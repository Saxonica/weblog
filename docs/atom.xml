<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xml:lang="EN-us"><title>Saxonica Weblogs</title><link href="https://blog.saxonica.com/" rel="alternate" type="text/html"/><link href="https://blog.saxonica.com/atom.xml" rel="self"/><id>https://blog.saxonica.com/atom.xml</id><updated>2024-12-29T15:00:13.846289Z</updated><entry><title>Ordered Maps</title><link href="https://blog.saxonica.com/mike/2024/12/ordered-maps.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2024/12/ordered-maps.html</id><published>2024-12-29T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2024/12/ordered-maps.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        <p>There's been a lot of discussion recently in the QT4 community group about introducing
        ordered maps: that is, maps in which there is a defined and predictable ordering of entries,
        typically "last-in, last-out" where the most recently added entry always appears at the end.
        The main motivation for this is that JSON is designed (like XML) to be human-readable, but
        JSON content in which the entries appear in random order is anything but: if a phone bill
        contains a name, address, account number, a summary of charges, and an itemized list of calls,
        then you don't want the phone number appearing in the middle, sandwiched between the
        list of calls and the list of charges. Currently when data is serialized as JSON, we provide
        an option to indent it for readability, but indentation isn't going to make the data readable if
        it's in random order.</p>
        
        <p>Retaining order is particularly useful for visual inspection of changes: if you write code that
        modifies one entry in a JSON document, you want to satisfy yourself that the transformation
        did exactly what you expected, and the best way to convince yourself is by placing the
        input and output side-by-side and comparing them visually.</p>
        
        <p>There seems to be consensus that support for ordered maps, at least in some circumstances,
        is desirable. There is debate about whether all maps should be ordered, and about whether
        ordering should be the default, and about whether ordering should be supported if a map
        is built incrementally using <code>map:put</code> operations. The answer to those questions
        depends at least in part on understanding how great the overhead is in retaining order
        in maps: if the overhead is negligible, then we might as well make all maps ordered.</p>
        
        <p>Normally I'm the first to argue that the language specification should not be driven
        by performance concerns: we should design a clean language and leave implementors to
        worry about how to implement it efficiently. But in this case, if we're making a change
        to the language semantics that affects users whether they want the feature or not, I think
        we need to understand clearly whether we are asking users to pay a performance price.</p>
        
        <p>Both JavaScript (from ES2015) and Python (from 3.7) have moved 
        in the direction of making all maps (objects/dictionaries) ordered, so we wouldn't 
        be on our own in doing this. However, JavaScript objects and Python dictionaries
        are mutable, whereas XDM maps are functionally persistent (adding an entry
        creates a new map, leaving the original unchanged), so the performance
        constraints are somewhat different.</p>
        
        <p>So let's look now at how Saxon implements maps.</p>
        
        <p>In SaxonJ 12.x there are two main implementations (ignoring special cases such as empty
        maps and singleton maps). The default implementation is in the class 
        <code>net.sf.saxon.ma.map.HashTrieMap</code>, and this is built using an open source
        implementation of immutable hash tries written by Michael Froh; it has been in the
        product since 9.6. In SaxonCS 12.x we replace this with the functionally equivalent Microsoft 
        class <code>System.Collections.Immutable.ImmutableDictionary</code>. Both these library
        implementations are unordered.</p>
        
        <p>There is a minor tweak that complicates the implementation. In an ideal world,
        we would create an underlying map of type <code>Map&lt;AtomicValue, GroundedValue&gt;</code>,
        where <code>AtomicValue</code> is the Saxon class used to hold all atomic values,
        and <code>GroundedValue</code> is the Saxon class used to hold all sequences other than
        those that are lazily-evaluated. However, <code>AtomicValue.equals()</code> does
        not implement the equality semantics defined by XDM for comparing map keys. This
        is because XPath has different rules for equality comparisons in different circumstances.
        The Microsoft <code>ImmutableDictionary</code> can take a custom <code>KeyComparer</code>
        parameter, which would solve this problem, but there is no equivalent in the Froh
        library that we use in SaxonJ. So instead we implement an underlying map of type
        <code>Map&lt;AtomicMatchKey, Tuple&lt;AtomicValue, GroundedValue&gt;&gt;</code>, where
        <code>AtomicMatchKey</code> is a value derived from the <code>AtomicValue</code>
        that has the correct equality semantics. We need to hold the <code>AtomicValue</code>
        because in general two atomic values can have the same <code>AtomicMatchKey</code>
        (for example this is the case when the keys are a mix of different numeric types):
        and the XPath functionality for maps requires the original key value (including
        its type annotation) to be retained.</p>
        
        <p>The second implementation of maps found in SaxonJ and SaxonCS is the class
        <code>net.sf.saxon.ma.map.DictionaryMap</code>. This is implemented over a standard
        mutable <code>java.util.HashMap&lt;String, GroundedValue&gt;&gt;</code> on Java, or
        <code>System.Collections.Generic.Dictionary&lt;string, GroundedValue&gt;</code>
        on .NET. It is suitable only where the keys are all instances of <code>xs:string</code>
        (which means we don't need to retain the type annotation), and where no in-situ
        modification takes place. As soon as an operation such as <code>map:put</code>
        or <code>map:remove</code> is applied to the map, we make a copy using the
        more general <code>HashTrieMap</code> implementation. But for many maps,
        especially those derived from JSON parsing, incremental modification is rare,
        and the lower-overhead <code>DictionaryMap</code> is perfectly satisfactory.</p>
        
        <p>In Saxon 13 (not yet released), a third map implementation has been introduced:
        the <code>ShapedMap</code>. This is described in the article 
        <a href="https://blog.saxonica.com/mike/2024/08/maps-and-records.html">Maps and Records</a>,
        and it is particularly useful in cases where many maps have exactly the same structure.
        This often happens when parsing CSV or JSON files. A <code>ShapedMap</code> is in two
        parts: a <code>Shape</code> object which holds a mapping from keys to integer slot numbers,
        and a simple array of slots holding the values of the fields. The <code>Shape</code>
        object can be shared between all map instances having a common structure. As with the
        <code>DictionaryMap</code>, if a <code>ShapedMap</code> is subjected to <code>map:put</code>
        or <code>map:remove</code> operations, it is immediately copied to a <code>HashTrieMap</code>.</p>
        
        <p>How are these map implementations affected by the requirement to maintain order
        of entries?</p>
        
        <p>For the <code>ShapedMap</code>, order is already maintained, so it isn't a problem.
        The only impact is that two maps can only share the same <code>Shape</code> object
        if their keys are in the same order. There isn't going to be any observable performance
        regression.</p>
        
        <p>For the <code>DictionaryMap</code>, on the Java platform we can replace the
        underlying <code>HashMap&lt;String, GroundedValue&gt;</code> by a 
        <code>LinkedHashMap&lt;String, GroundedValue&gt;</code>. That's easily done,
        because it supports the same interface. I don't yet know how much overhead
        it imposes (in space or time); that requires some measurements.</p>
        
        <p>On .NET, unfortunately, there is no equivalent to Java's <code>LinkedHashMap</code>.
        I have therefore implemented my own: this comprises a <code>Dictionary&lt;string, int&gt;</code>
        that maps string-valued keys to integer positions in the sequence, and two lists:
        a list of <code>AtomicValue</code> for the keys and a list of <code>GroundedValue</code>
        for the values.</p>
        
        <p>For the <code>HashTrieMap</code> on Java, my plan is to scrap the immutable map implemented
        by Michael Froh, and substitute it with the <code>io.vavr.collection.LinkedHashMap</code>
        from the VAVR library, which appears to have the required semantics. Again, there appears
        to be no direct equivalent on .NET, so a home grown solution is again called for. My
        current implementation uses the same apprach as for the <code>DictionaryMap</code>:
        an immutable unordered map from atomic keys to integers, supplemented by ordered 
        immutable lists of <code>AtomicValue</code> for the keys and <code>GroundedValue</code>
        for the values.</p>
        
        <p>Which brings us to the question, what are the overheads? Answering that question
        means making some assumptions about the workloads we want to measure. For example,
        how important are <code>map:put</code> and <code>map:remove</code> operations? 
        Anecdotal evidence suggests these are rather rare, and that most maps are read-only
        once built. But they might be important to some use cases.</p>
        
        <p>The other complication is that we might be able to mitigate the overheads of making
        maps ordered by introducing new optimisations. We've already introduced the 
        <code>ShapedMap</code> idea, where ordering hopefully imposes very little overhead.
        On .NET we could consider taking advantage of the ability to use a custom 
        <code>KeyComparer</code> to avoid the overhead of effectively storing the keys twice.</p>
        
        <p>We could also get smarter about choosing which implementation of maps to use under
        which circumstances. One change that I'm making is to introduce a <code>MapBuilder</code>
        class: during the initial construction of a map (for example during JSON parsing or
        during processing of <code>map:merge</code> or <code>map:build</code>, or during
        evaluation of a map constructor) we can add entries to a mutable builder object, and
        this then gives us the opportunity to choose the final map implementation when we
        know what all the keys and values are. For example, if all the keys have the same
        type annotation, then in principle we don't need to save the type annotations with
        every key value. We also know the size of the map at this stage.</p>
        
        <p>We can even go further and avoid indexing the map until the first lookup 
        (or <code>map:get</code>) operation. It might seem surprising, but there
        are many maps that are never used for lookup. For example, a JSON document
        might contain thousands of maps that are simply copied unchanged to the output,
        or that are discarded because they are irrelevant to the particular query.
        Perhaps the map builder should simply maintain a list of keys and values,
        and do nothing else until the first <code>map:get</code>? The only complication
        here is the need to detect duplicate keys, but that could be done cheaply
        using a Bloom filter.</p>
        
        <p>So we need to do some measurements. But there's a good chance that if
        it does turn out that ordered maps impose an overhead, we can find compensating
        optimisations that mean there's no regression on the bottom line.</p>
        
        <p>My first experiments looking at the cost of parsing and re-serializing
        JSON actually suggest that most of the cost is in the parsing and serializing,
        and that the choice of data structure for the XDM maps has very little impact 
        on the bottom line. But that's provisional and subject to confirmation.</p>
        
        
        
  
 
   
    </div></content></entry><entry><title>Announcing SaxonJS-HE 3.0.0-beta1!</title><link href="https://blog.saxonica.com/announcements/2024/12/saxonjs-he-3.0.0-beta1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/12/saxonjs-he-3.0.0-beta1.html</id><published>2024-12-18T16:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/12/saxonjs-he-3.0.0-beta1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS-HE 3.0.0-beta1!</h1>

<p>SaxonJS 3.0 is a major update to the SaxonJS product. In December 2024, it is
being published as a preview release, version 3.0.0-beta1. This is a preview
release of the SaxonJS 3.0 HE (Home Edition) product. An EE (Enterprise Edition)
product is in the works.
</p>

<div>
<h2>New features in the beta1 release</h2>

<p>This release includes a number of new features, with several more planned
before the final 3.0 release.
</p>

<div>
<h3>Promises</h3>

<p>SaxonJS 3 introduces new mechanisms for enabling asynchronous processing
using promises. A new instruction <code>ixsl:promise</code> is introduced which
can be used as a replacement for the existing <code>ixsl:schedule-action</code>
instruction.
</p>

<ul>
<li>The new instruction can now call any asychronous function to fetch any kind of
resource. Adding new kinds of resource is just a question of implementing new
functions (which can be user-written functions as well as system-supplied
functions). So if you want to fetch data from a SQL database, for example, you
can easily write a function to do that.</li>
<li>The machinery for handling asynchronous requests is now closely aligned with
JavaScript promises, both in terms of the conceptual design, and the
implementation. This makes it much easier to understand for users familiar
with the JavaScript processing model.</li>
<li>The mechanism takes advantage of XDM higher-order functions. (Note, however,
that it still “bends” the pure declarative approach of XPath by introducing
mutability. A promise, for example, is a mutable object, so you need to
exercise care for example if you bind it to a variable.)</li>
</ul>

<p>Note that for Node.js, run time use of ixsl:promise is an EE feature. So XSLT
stylesheets using <code>ixsl:promise</code> can be compiled to SEF with the XX
compiler in SaxonJS without a JS-EE license, and then run in the browser; but to
run such a stylesheet on Node.js requires SaxonJS-EE and a valid JS-EE license.
</p>
</div>

<div>
<h3>JavaScript extension functions</h3>

<p>JavaScript developers have easy access to a huge variety of tools and
libraries distributed as JavaScript packages through <code>npm</code> and other
mechanisms. We want to make those libraries easily accessible for SaxonJS
developers too.
</p>

<p>In SaxonJS 3, you can define extension functions in JavaScript and call them
directly from XPath, both from <code>SaxonJS.XPath.evaluate</code> and from
within XSLT stylesheets running on SaxonJS in the browser or on Node.js.
</p>

<p>This opens up whole new horizons for SaxonJS developers.
</p>
</div>

<div>
<h3>Smaller changes and improvements</h3>

<p>While a lot of our focus has been on larger improvements, a few less dramatic
features are also debuting in beta1.
</p>

<ul>
<li>Support XPath expressions (other than “.”) after ? in <code>xsl:result-document</code></li>
<li>New methods on <code>xsl:result-document</code>: <code>ixsl:replace-element</code>, <code>ixsl:insert-before</code>, and
<code>ixsl:insert-after</code></li>
<li>Improved support for following HTTP redirects</li>
<li>Improved support for accessing JavaScript objects with <code>ixsl:set-property</code>, <code>ixsl:json-parse</code>,
<code>ixsl:new</code>, <code>ixsl:apply</code>, <code>ixsl:call</code>, <code>ixsl:eval</code>, and <code>ixsl:get</code></li>
<li>Support the <code>escape-solidus</code> option when generating JSON.</li>
</ul>
</div>
</div>

<div>
<h2>New features coming soon</h2>

<p>Eager to publish a release, at this stage, we’ve opted only to publish the HE
version of SaxonJS 3.0 as beta1. More work is planned before the general
release, including SaxonJS 3.0 EE.
</p>

<div>
<h3>SaxonJS-EE</h3>

<p>SaxonJS-HE will remain a free product, but in 2025 we will also be introducing a
licensed version of SaxonJS, SaxonJS-EE. The licensed version will provide additional
features on Node.js (such as built-in EXPath and Saxon extension functions).
</p>

<p>The promises API run time will be a licensed feature on Node.js.
</p>
</div>

<div>
<h3>Calling XSLT functions from JavaScript</h3>

<p>Many transformations, on XML and JSON, are easier to define in XSLT than in
JavaScript. XSLT has a rich vocabulary of instructions for describing, constructing,
and transforming data in a clear, descriptive, and functional way.
</p>

<p>We anticipate making those features more accessible to JavaScript developers by
allowing JavaScript to call functions defined in XSLT.
</p>
</div>

<div>
<h3>Adding a SaxonJS.compile API</h3>

<p>The ability to construct an XSLT stylesheet and then compile it directly for
use in the current transformation is a powerful feature. A new API for doing this,
<code>SaxonJS.compile</code>, will be added in the general release.
</p>
</div>

<div>
<h2>Getting started</h2>
</div>

<p>You can try out SaxonJS-HE 3.0 today, the packages have been uploaded to
<a href="https://www.npmjs.com/">npmjs.com</a>: 
<a href="https://www.npmjs.com/package/saxonjs-he">saxonjs-he</a>
and 
<a href="https://www.npmjs.com/package/xslt3-he">xslt3-he</a>. You can also
download them <a href="https://downloads.saxonica.com/SaxonJS/3/index.html">our website</a>.</p>

<p>Our <a href="https://www.saxonica.com/saxonjs/documentation3/index.html">documentation
pages</a> have been updated and a repository of short examples has been
published: <a href="https://github.com/Saxonica/SaxonJS3-demo">SaxonJS3
demo</a>.</p>

<p>We hope you’re as excited as we are and we look forward to your feedback. Please
report any issues that you encounter on
<a href="https://saxonica.plan.io/projects/saxon-js/issues">our issue tracker</a>.
</p>

</div>
</div></content></entry><entry><title>Oops, we did it again</title><link href="https://blog.saxonica.com/norm/2024/10/17-oops.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2024/10/17-oops.html</id><published>2024-10-17T15:01:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2024/10/17-oops.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As some of you have noticed, the SaxonJS
“<a href="../../2023/10/06-no-longer-supported.html">no longer supported</a>” bug
returned a few days ago. I’d have sworn that I removed that warning when we shipped
SaxonJS 2.6. But I’d also have sworn we would get 3.0 out before now. Maybe I’m
not very good at swearing.</p>

<p>That warning <em>has been</em> removed from
<a href="../../../announcements/2024/10/saxonjs-2.7.html">SaxonJS 2.7</a>, so
this issue won’t surface again next October.</p>

<p>Apologies for not getting a maintenance release out sooner. We really should
have. Focus has been on SaxonJS 3.0, which is still coming along nicely, but
there were a number of bug fixes in SaxonJS 2.x that we could have shipped
months ago.</p>

<p>My expectation is that we’ll ship some sort of beta test version of SaxonJS
3.0 “real soon now” and Saxon 12.6 to fix
<a href="https://saxonica.plan.io/issues/6487">the SEF bug</a> in 12.5 shortly
before or after that.
</p>

</div></content></entry><entry><title>Announcing SaxonJS 2.7!</title><link href="https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html</id><published>2024-10-17T15:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS 2.7!</h1>

<p>The SaxonJS 2.7 maintenance release has been published. This is a
maintenance release for NodeJS and the browser. It fixes a number of bugs.
(Including <a href="/norm/2023/10/06-no-longer-supported.html">that one</a>
about the spurious warning message. Again.)</p>

<p>Highlights include:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/4991">#4991</a>: Support JSON indentation in xml-to-json</li>
<li><a href="https://saxonica.plan.io/issues/5540">#5540</a>: Namespace context is reset before each XSLT transformation</li>
<li><a href="https://saxonica.plan.io/issues/5743">#5743</a>: Text nodes are no longer lost in xsl:catch instruction</li>
<li><a href="https://saxonica.plan.io/issues/6234">#6234</a>: Corrected the behavior of a map called as a function</li>
<li><a href="https://saxonica.plan.io/issues/6318">#6318</a>: Fixed an error in parsing regular expressions</li>
<li><a href="https://saxonica.plan.io/issues/6352">#6352</a>: Resolved a performance issue introduced in SaxonJS 2.6</li>
<li><a href="https://saxonica.plan.io/issues/6393">#6393</a>: Fixed a string/number comparison bug</li>
<li><a href="https://saxonica.plan.io/issues/6418">#6418</a>: Improve behavior when attempting to use IXSL extensions on Node.js</li>
<li><a href="https://saxonica.plan.io/issues/6516">#6516</a>: Fixed some XPath parsing errors related to uncommon expressions (like <code>/[x]</code>)</li>
</ul>

<p>For a complete list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon-js/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_10&amp;op%5Bcf_10%5D=%3D&amp;v%5Bcf_10%5D%5B%5D=97&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxonica support site.</p>

<p>SaxonJS 2.7 was released on 17 October 2024. This release has been
uploaded to the usual locations on the Saxonica website and the NPM
repository.
For more details, please consult
<a href="https://www.saxonica.com/saxon-js/documentation2/index.html">the documentation</a>.
</p>

<div class="note">
<p>Note: Saxon 12.5 won’t create SEF files that can be used with SaxonJS 2.x.
This is a <a href="https://saxonica.plan.io/issues/6487">known bug</a> that will
be fixed in Saxon 12.6. Saxon 12.4 and earlier versions will make SEF files that
SaxonJS 2.x can use.</p>
</div>

<p>If you encounter any issues with SaxonJS 2.7, please
<a href="https://saxonica.plan.io/projects/saxon-js/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Packaging SaxonJS for the browser</title><link href="https://blog.saxonica.com/norm/2024/08/16-packaging.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2024/08/16-packaging.html</id><published>2024-08-16T15:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2024/08/16-packaging.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Over the years, there have been several requests to improve the way that
SaxonJS is packaged for the browser. In the run up towards SaxonJS 3.0 (real
soon now, I promise), I’ve spent a few hours trying to see if that’s possible.</p>

<p>For SaxonJS on Node.js, things seem to be working the way users expect. You
can install SaxonJS, and <em>xslt3.js</em>, the command-line XSLT processor,
with <code>npm install</code>. Then you can use them as you would other Node.js
modules and applications.</p>

<p>For the browser, things are a little less clear.</p>

<p>I’ll start out by observing that SaxonJS is a large(ish) collection of mostly
plain JavaScript files. There are a mixture of techniques used, as you might
expect from a code base that stretches back seven or eight years (roughly ∞ in
JavaScript years). This code is compiled by the <a href="https://developers.google.com/closure/compiler">Closure Compiler</a> to
produce the release artifacts.</p>

<div class="aside">
<p><em>Aside:</em> Producing TypeScript instead of JavaScript is almost certainly
impractical. And
the answer to the question, “can you make it an ESM module?” appears to be “no”. But
maybe I’m wrong?</p>
</div>

<p>Almost anything is <em>possible</em> in software,
but there some things are probably <em>impractical</em> because of how SaxonJS
is built.
</p>

<p>What I’ve come to realize after several hours is that I
don’t actually understand what problem I’m trying to solve. That usually makes
problems harder.</p>

<p>For example, it would be easy to package the browser versions of the SaxonJS
libraries into the <code>saxon-js</code> <em>npm</em> package. That would allow
you to use <code>npm install</code> to install it. Once installed, you could
refer to it in HTML like this:</p>

<pre><code>&lt;script src="node_modules/saxon-js/SaxonJS3.rt.js"&gt;&lt;/script&gt;</code></pre>

<p>That’s a non-zero usability improvement over downloading the browser release
yourself and adding it to your project, but it’s an <em>awfully small</em>
improvement. So small, that I conjecture that the request to “put it in the npm
package” means more than that. But I don’t know what more.</p>

<p>Another request that’s come up a couple of times is whether we should provide
a version that’s been packaged up with <em>webpack</em>. Well. Okay. I spent
a bit of time on that and eventually I managed to get</p>

<pre><code>npx webpack --config webpack.config.js</code></pre>

<p>to take <code>src/SaxonJS3.js</code>, chew on it for a while, and produce
<code>dist/SaxonJS3.js</code>. That was a little, uh, underwhelming. I started
with a JavaScript library that I could load in the browser and ended with…a
different one, I guess?</p>

<p>Then there are suggestions that instead of <em>webpack</em> I should be
trying <em>vite</em> or <em>bun</em> or something else and do I also need
<em>browserify</em>? I don’t know.
I’m about to give up, at least in the short term, but before I do, I thought
I’d see if anyone out there can tell me what I’m missing.</p>

<p>If you would like to see SaxonJS for the browser packaged up in some
different way, can you tell me how? And why? A small test case would be ideal:
something that isn’t too complicated, that doesn’t work with SaxonJS as it’s
distributed today, that would work if we packaged it in some other way.</p>

</div></content></entry><entry><title>Maps and Records</title><link href="https://blog.saxonica.com/mike/2024/08/maps-and-records.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2024/08/maps-and-records.html</id><published>2024-08-10T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2024/08/maps-and-records.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        <p>Maps have proved to be one of the most powerful new features in the 3.0/3.1 family of standards,
        and records, which extend the capability will probably prove one of the most powerful in 4.0. 
        Under the name <i>tuple types</i>, the feature has been available as a proprietary Saxon extension
        since Saxon 9.8, which came out on the same day as the XSLT 3.0 Recommendation in June 2017.
        The feature is now well established, but the details are still being refined.</p>
        
        <p>A record type is declared like this:</p>
        
        <pre>record(longitude as xs:double, latitude as xs:double)</pre>
        
        <p>A record type is simply a new way of constraining maps; the instances of the type
        are maps (in this case a map with two entries, one with key "longitude" and one with
        key "latitude"). You can use a record type to declare the types of variables and function
        arguments, but the actual value of the variable is a map, and all the standard map operations
        are available, such as the lookup operator: <code>$location?longitude</code>.</p>
        
        <p>We're working on an extension that allows named record types to be declared globally:</p>
        
        <pre>&lt;xsl:record name="my:location"&gt;
   &lt;xsl:field name="longitude" as="xs:double"/&gt;
   &lt;xsl:field name="latitude" as="xs:double"/&gt;
&lt;/xsl:record&gt;</pre>
        
        <p>which would also give you a constructor function: <code>my:location($long, $lat)</code>.</p>
        
        <p>The main thing I want to talk about in this article is how records can be efficiently
        implemented.</p>
        
        <p>Until recently, a record type simply constrained the contents of a map, and had no
        bearing on the way the map was implemented.</p>
        
        <p>Internally, Saxon represents maps using the interface <code>net.sf.saxon.ma.map.MapItem</code>
        (actually an abstract class), and there are several implementations of this interface:</p>
        
        <ul>
            <li><code>EmptyMap</code> for an empty map</li>
            <li><code>SingleEntryMap</code> for a map with one entry, such as the map created by <code>map:entry()</code></li>
            <li><code>DictionaryMap</code> for a map whose keys are all strings, and that isn't likely to be modified
            (for example maps derived by parsing JSON, or maps written using literal constructors as option parameter values)</li>
            <li><code>HashTrieMap</code> as the general implementation that handles everything.</li>
        </ul>
        
        <p>For the next release, Saxon 13, we've written a new implementation called a
        <i>ShapedMap</i>. There are two parts to this: a <i>Shape</i> is a mapping from field names to
        integer slot numbers, and a <i>ShapedMap</i> is a reference to a <i>Shape</i>, plus an array of slots.
        So it's great where you have many maps with exactly the same structure, because you only hold the keys
        once.</p>
        
        <p>So far we're mainly using shaped maps where the structure of the map is defined by the language specification,
        for example for the key-value pairs returned by <code>map:pairs()</code>, for the results of functions such as
        <code>parse-csv()</code>, <code>random-number-generator()</code>, and <code>load-xquery-module()</code>,
        and for the labels attached to values by the new deep-lookup operator (plenty of scope there for future articles).
        I would love to use them also for the result of <code>parse-json()</code> if we can detect the common case
        of a JSON file containing thousands of maps (JSON objects) with exactly the same structure. And of course, once
        we have record constructor functions as described above, they are an obvious candidate for the result
        of such a function.</p>
        
        <p>Shaped maps immediately give a space saving because the keys and their hash index are shared between instances.
        The next challenge after that is to make lookup on shaped maps more efficient. Given a lookup expression
        such as <code>$location?longitude</code>, we <i>ought</i> to be able to extract the corresponding value directly
        from slot 0 of the <code>ShapedMap</code> object, without the overhead of doing a run-time hash lookup of the string
        <code>"longitude"</code> in the corresponding <code>Shape</code> in order to establish that this field is always
        in slot 0.</p>
        
        <p>The obvious, classic way of doing that is through static type inference: if we know the static type of the
        <code>$location</code> variable, then we can know at compile time what the mapping of field names to slots will be,
        and can generate an execution plan accordingly.</p>
        
        <p>But I'm becoming a bit disillusioned with relying on static type analysis. Users, in general, are lazy: they
        want good performance without doing extra work, like declaring the types of all their variables. That's particularly
        true when you start writing code that relies heavily on higher-order functions, which we want to encourage.
        So I'm looking increasingly at options that decide the execution plan at run-time, modifying it in the light
        of actual experience. Given an expression like <code>$location?longitude</code> that is executed repeatedly,
        the chances are that if <code>$location</code> is a shaped map with <code>longitude</code> in slot 0 on one occasion,
        then the same will be true next time you execute the same expression.</p>
        
        <p>We've quietly introduced this kind of approach in recent releases, and it's working well. For example, with
        lazy evaluation of variables and function results we now use a learning approach: we start with lazy evaluation,
        but if on the first 20 executions the value is immediately read to completion, we switch to eager evaluation.
        That's because lazy evaluation has a significant set-up overhead to retain the parts of the context on which the
        expression depends, and there is no benefit in doing this if the caller is going to immediately materialise
        the value anyway.</p>
        
        <p>The concrete design for shaped record access goes something like this. We augment the 
            <code>MapItem</code> interface with a method
        <code>map.lookup(key, plan)</code>. This method returns the requested value from the map, but also updates the
        value of <code>plan</code> with information that will be retained the next time the same expression is evaluated.
        If the map is a shaped map, the returned plan can include the <code>Shape</code> and the slot number; if an incoming
        request comes with a plan that identifies the same <code>Shape</code> (which it usually will), 
        then we can access the relevant slot number directly,
        ignoring the value of the key. That only works, of course, for a lookup expression where the key is a literal
        constant; but that's the normal case when working with records.</p>
        
        <p>If we can make this work (and it seems straightforward), then the same approach might have other applications.
        For example, can we make path expressions go faster if we optimize for the tree model in use? Or could we get rid
        of statically-allocated fingerprints (with the inconvenience they cause by not allowing documents and stylesheets
        to be shared across configurations), and instead have the expression discover the fingerprint and NamePool at 
        execution time?</p>
        
        <p>Saxon is now 25 years old. It seems there are still plenty of exciting ways to make it better.</p>
        
        
        
 
 
   
    </div></content></entry><entry><title>Announcing Saxon 12.5!</title><link href="https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html</id><published>2024-07-02T11:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.5!</h1>

<p>The Saxon 12.5 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since previous Saxon 12.4 releases.
</p>

<p>Saxon 12.5 was released on 1 July 2024.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.5 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=96&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.5&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.5">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is available from our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=96&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>

<li><a href="https://saxonica.plan.io/issues/6450">6450</a>
    CollectionFinder parsesd ALLOWED_PROTOCOLS incorrectly</li>
<li><a href="https://saxonica.plan.io/issues/6449">6449</a>
    SaxonCS failure when using collection function to pull a collection catalog file over HTTP(S)</li>
<li><a href="https://saxonica.plan.io/issues/6448">6448</a>
    Saxon-HE 12.4J has wrong column number in trace, unlike Saxon-EE</li>
<li><a href="https://saxonica.plan.io/issues/6446">6446</a>
    Improved performance of XQuery group by some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/6435">6435</a>
    Resolve concurrency issue in the use of accumulators behind the scenes in xsl:for-each</li>
<li><a href="https://saxonica.plan.io/issues/6428">6428</a>
    Output of xsl:on-non-empty changes when using TraceListener</li>
<li><a href="https://saxonica.plan.io/issues/6426">6426</a>
    fn:matches surprisingly returns false for fn:matches("AB", "^(.*)+B")</li>
<li><a href="https://saxonica.plan.io/issues/6420">6420</a>
    -Tout filename not used when set on command line</li>
<li><a href="https://saxonica.plan.io/issues/6419">6419</a>
    Union of nodes in a Template Match produces wrong output in Trace</li>
<li><a href="https://saxonica.plan.io/issues/6415">6415</a>
    Improved results for trace of an unreferenced XSLT variables</li>
<li><a href="https://saxonica.plan.io/issues/6407">6407</a>
    Tree Model option -tree seems to be ignored for initial source documents</li>
<li><a href="https://saxonica.plan.io/issues/6406">6406</a>
    A collection cannot contain the same document more than once</li>
<li><a href="https://saxonica.plan.io/issues/6405">6405</a>
    Improve saxon:column-number() for text nodes not inside xsl:text</li>
<li><a href="https://saxonica.plan.io/issues/6394">6394</a>
    Resolve "Duplicate definition of global variable" exception when using compileLibrary on modules which import a common module</li>
<li><a href="https://saxonica.plan.io/issues/6386">6386</a>
    Resolve inadvertant backwards incompatibility in some uses of Configuration#setFeature</li>
<li><a href="https://saxonica.plan.io/issues/6381">6381</a>
    set_unprefixed_element_matching_policy(1) doesn't seem to work</li>
<li><a href="https://saxonica.plan.io/issues/6380">6380</a>
    Internal error when match pattern invoked by xsl:next-match refers to global variable</li>
<li><a href="https://saxonica.plan.io/issues/6378">6378</a>
    Resolved problem with tracing a variable declared abstract</li>
<li><a href="https://saxonica.plan.io/issues/6377">6377</a>
    Resolved exception that could be thrown by format-time in some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/6370">6370</a>
    XSD based validation finds a validation throws NullPointerException when trying to generate a validation report</li>
<li><a href="https://saxonica.plan.io/issues/6365">6365</a>
    Fixed bug where Gizmo could fail if no license was provided</li>
<li><a href="https://saxonica.plan.io/issues/6363">6363</a>
    Incorrect result comparing untypedAtomic value to NaN</li>
<li><a href="https://saxonica.plan.io/issues/6348">6348</a>
    Fixed multi-threading bug related to xsl:result-document operating asynchronously </li>
<li><a href="https://saxonica.plan.io/issues/6340">6340</a>
    Fixed exception that sometimes arose when using saxon:capture="yes" in an accumlator rule</li>
<li><a href="https://saxonica.plan.io/issues/6339">6339</a>
    Describe fix and workaround for ArrayIndexOutOfBoundsException in saxon:transform() </li>
<li><a href="https://saxonica.plan.io/issues/6313">6313</a>
    Static type error from fn:remove()</li>
<li><a href="https://saxonica.plan.io/issues/6302">6302</a>
    Improved trace output when the transform function is used</li>
<li><a href="https://saxonica.plan.io/issues/6286">6286</a>
    Resolved problem where $connection?close() could throw an error</li>
<li><a href="https://saxonica.plan.io/issues/6279">6279</a>
    Incorrect optimization of generate-id() comparisons</li>
<li><a href="https://saxonica.plan.io/issues/6256">6256</a>
    function-name returns an empty sequence for node-name#0, string#0 and more?</li>
<li><a href="https://saxonica.plan.io/issues/6183">6183</a>
    Improved documentation for debugging errors when using "fallback=no" on UCA collation</li>
</ul>

<h3>Issues in SaxonC</h3>

<p>Memory management in SaxonC, PHP, and Python has been greatly improved. This resolved
a number of issues (<a href="https://saxonica.plan.io/issues/6338">6338</a>,
<a href="https://saxonica.plan.io/issues/6349">6349</a>,
<a href="https://saxonica.plan.io/issues/6357">6357</a>,
<a href="https://saxonica.plan.io/issues/6396">6396</a>, and
<a href="https://saxonica.plan.io/issues/6397">6397</a>). In addition, the following
issues were resolved. (For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.5&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.)</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6439">6439</a>
    Fixed bug in Python extension that could cause an AttributeError on PyXdmFunctionItem</li>
<li><a href="https://saxonica.plan.io/issues/6402">6402</a>
    Added <code>clearXslMessages</code> to clear accumulated xsl:message messages</li>
<li><a href="https://saxonica.plan.io/issues/6401">6401</a>
    Resolved bug when setting a filename on an executable in Python</li>
<li><a href="https://saxonica.plan.io/issues/6372">6372</a>
    Updated build to include all character sets (will enable Windows-1252 encoded XML files to be parsed on Linux)</li>
<li><a href="https://saxonica.plan.io/issues/6360">6360</a>
    Fixed bug where setOutputFile did not work with transformToFile()</li>
<li><a href="https://saxonica.plan.io/issues/6356">6356</a>
    Fixed argument count error in executable in PHP</li>
<li><a href="https://saxonica.plan.io/issues/6351">6351</a>
    Added methods for getting the line and column number of a node</li>
<li><a href="https://saxonica.plan.io/issues/6342">6342</a>
    Fixed bug where in compileFromAssociatedFile PHP might fail</li>
<li><a href="https://saxonica.plan.io/issues/6341">6341</a>
    Support try/catch in PHP for underlying parse errors</li>
<li><a href="https://saxonica.plan.io/issues/6336">6336</a>
    Fixed bug when passing array values as parameters in Python</li>
<li><a href="https://saxonica.plan.io/issues/6327">6327</a>
    Fixed bug where an empty XdmValue in Python might throw a TypeError</li>
<li><a href="https://saxonica.plan.io/issues/6297">6297</a>
    Fixed build issue on CentOS 7</li>
<li><a href="https://saxonica.plan.io/issues/6276">6276</a>
    Fixed bug where proc.version did not include the patch version</li>
</ul>

<p>If you encounter any issues with Saxon 12.5, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing SaxonC 12.4.2!</title><link href="https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html</id><published>2024-01-26T10:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonC 12.4.2!</h1>

<p>A SaxonC 12.4.2 maintenance release has been published. This
release fixes several issues:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6197">6197</a> A segmentation fault in the PHP extension</li>
<li><a href="https://saxonica.plan.io/issues/6273">6273</a> A change in the way whitespace is handled in filenames</li>
<li><a href="https://saxonica.plan.io/issues/6274">6274</a> An problem with the “encoding” keyword in the python saxon processor</li>
<li><a href="https://saxonica.plan.io/issues/6277">6277</a> A build configuration issue for the SaxonC HE Python processor</li>
<li><a href="https://saxonica.plan.io/issues/6288">6288</a> A build issue for the SaxonC PHP extension</li>
<li><a href="https://saxonica.plan.io/issues/6294">6294</a> A segmentation fault parsing JSON</li>
<li><a href="https://saxonica.plan.io/issues/6301">6301</a> A compile error related to memory allocation with some C++ compilers</li>
<!--
<li><a href="https://saxonica.plan.io/issues/6304">6304</a> An issue when using multiple threads from the Python processor</li>
-->
<li><a href="https://saxonica.plan.io/issues/6306">6306</a> Unreleased memory in the Python processor</li>
<li><a href="https://saxonica.plan.io/issues/6324">6324</a>  A segmentation fault in the Python extension</li>
</ul>

<p>Some efforts have also been made to improve the way dynamic
libraries are referenced when using the C/C++ APIs directly. These
changes are reflected in the builds and in the scripts that compile
the “command” and “samples” applications.</p>

<p>In brief: on macOS, the dynamic library can be accessed through
<code>@rpath</code> and on Linux, the dynamic library can be placed in a standard
location or accessed with the <code>LD_LIBRARY_PATH</code> environment variable.
On Windows, apparently the standard practice is to place the DLL in the same
directory as the executable.</p>

<p>For a more complete list of what’s new in 12.4, please see the original
<a href="../../2023/11/saxon-12.4.html">release announcement</a> and the
<a href="https://www.saxonica.com/saxon-c/release-notes.xml">SaxonC release notes</a>
on the main website.</p>

</div></content></entry><entry><title>Announcing SaxonC 12.4.1!</title><link href="https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html</id><published>2023-12-01T14:50:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonC 12.4.1!</h1>

<p>A SaxonC 12.4.1 maintenance release has been published. This
release fixes <a href="https://saxonica.plan.io/issues/6268">a build
error</a> on the Windows platform and includes one additional
patch.</p>

<p>I’m an ardent believer in build automation and reproducibility
through scripting. We’ve made a lot of progress in this area, but
Windows is still a bit “hands on.” Problem is, it was my hands and I
messed up.</p>

<p>A while back, we considered upgrading to a newer version of
GraalVM. In the course of testing that, I upgraded the version on the
Windows build machine. But ultimately, we decided not to make that
upgrade.</p>

<p>Despite having an explicit note in my release checklist:</p>

<ul>
<li>☑ Check the version of GraalVM</li>
</ul>

<p>I missed it on the Windows box. A lot of good detective work went
into trying to figure out what was going on, but in the end, just
building with the “right” version of GraalVM fixed it. Apologies to
the team and everyone else for that.</p>

<p>The 12.4.1 release also includes a
<a href="https://saxonica.plan.io/issues/6182">partial fix</a> for
issues relating to UTF-8 string-based C API functions. Unfortunately,
a more complete fix was deemed too risky for what was otherwise an
“emergency” release. That fix will have to wait for next time.</p>

<p>For a more complete list of what’s new in 12.4, please see the original
<a href="../11/saxon-12.4.html">release announcement</a>.</p>

</div></content></entry><entry><title>Announcing Saxon 12.4!</title><link href="https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html</id><published>2023-11-29T18:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.4!</h1>

<p>The Saxon 12.4 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.3 release.
(Note: A <em>12.4.1</em> maintenance release of SaxonC
<a href="../12/saxonc-12.4.1.html">was published</a> on 1 December 2023.)
</p>

<p>Saxon 12.4 was released on 29 November 2023.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.4 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=95&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.4&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.4">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is available from our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=95&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5792">5792</a>
    ICU spellout numbering</li>
<li><a href="https://saxonica.plan.io/issues/5896">5896</a>
    Intermittent failure in multi-threading with XSLT</li>
<li><a href="https://saxonica.plan.io/issues/5914">5914</a>
    Performance regression in SaxonJ 12, searching for context properties</li>
<li><a href="https://saxonica.plan.io/issues/5949">5949</a>
    A resource loaded via the resolver vs one loaded "directly" is a different source with different options</li>
<li><a href="https://saxonica.plan.io/issues/6049">6049</a>
    Does XQueryEvaluator for SaxonCS lack the API to set an ErrorReporter?</li>
<li><a href="https://saxonica.plan.io/issues/6082">6082</a>
    Saxon 12 XQuery: Issue with compile-time error checking</li>
<li><a href="https://saxonica.plan.io/issues/6090">6090</a>
    Performance regression SaxonCS 12</li>
<li><a href="https://saxonica.plan.io/issues/6094">6094</a>
    saxon:eval and saxon:expression no longer available with Saxon 12</li>
<li><a href="https://saxonica.plan.io/issues/6116">6116</a>
    UncheckedXPathException and missing error codes in output with Saxon-HE 12J</li>
<li><a href="https://saxonica.plan.io/issues/6117">6117</a>
    Transformation using memo functions fails if the source is an XdmDocument.asSource()</li>
<li><a href="https://saxonica.plan.io/issues/6128">6128</a>
    Unwanted diagnostic output when validating notations</li>
<li><a href="https://saxonica.plan.io/issues/6130">6130</a>
    No error is reported for <code>schema-element(*:foo)</code></li>
<li><a href="https://saxonica.plan.io/issues/6131">6131</a>
    Unexpected function call triggers cardinality check and error</li>
<li><a href="https://saxonica.plan.io/issues/6146">6146</a>
    Relative URI resolution in XQuery vs XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6147">6147</a>
    Incorrect fingerprint for XML_SPACE_TYPE</li>
<li><a href="https://saxonica.plan.io/issues/6148">6148</a>
    xsi:type and xsi:schemaLocation on same element</li>
<li><a href="https://saxonica.plan.io/issues/6149">6149</a>
    $connection?close() throws NullPointerException</li>
<li><a href="https://saxonica.plan.io/issues/6153">6153</a>
    XSD blockDefault effect on complex types</li>
<li><a href="https://saxonica.plan.io/issues/6157">6157</a>
    xsl:array instruction does not perform fallback processing</li>
<li><a href="https://saxonica.plan.io/issues/6158">6158</a>
    Errors in xsl:fallback not detected</li>
<li><a href="https://saxonica.plan.io/issues/6159">6159</a>
    sql:query() throws NullPointerException when retrieving a column with null value</li>
<li><a href="https://saxonica.plan.io/issues/6160">6160</a>
    Key type in a MapTest cannot be a union type</li>
<li><a href="https://saxonica.plan.io/issues/6161">6161</a>
    ReportingSingletonIterator.next throws NullPointerException - race condition</li>
<li><a href="https://saxonica.plan.io/issues/6165">6165</a>
    Spurious template rule ambiguity reported</li>
<li><a href="https://saxonica.plan.io/issues/6166">6166</a>
    Public fields in a Java instance object cannot be accessed from XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6167">6167</a>
    Enclosing modes do not work with JIT enabled</li>
<li><a href="https://saxonica.plan.io/issues/6168">6168</a>
    mode="#all" failures with JIT enabled</li>
<li><a href="https://saxonica.plan.io/issues/6176">6176</a>
    Failure to test for UncheckedXPathException</li>
<li><a href="https://saxonica.plan.io/issues/6186">6186</a>
    IndexOutOfBounds exception during stylesheet compilation when package is overridden</li>
<li><a href="https://saxonica.plan.io/issues/6196">6196</a>
    Functions of wrong arity: arguments → parameters</li>
<li><a href="https://saxonica.plan.io/issues/6198">6198</a>
    SCM export fails for a schema containing namespace prefixes in an XPath expression</li>
<li><a href="https://saxonica.plan.io/issues/6199">6199</a>
    SCM export/import sometimes fails for an <code>xs:alternative</code></li>
<li><a href="https://saxonica.plan.io/issues/6201">6201</a>
    configuration file: option for unparsed text URI Resolver</li>
<li><a href="https://saxonica.plan.io/issues/6202">6202</a>
    Invalid attribute names in configuration files are ignored</li>
<li><a href="https://saxonica.plan.io/issues/6207">6207</a>
    Filter expression not working properly</li>
<li><a href="https://saxonica.plan.io/issues/6210">6210</a>
    Format of numbers generated by fn:json-to-xml</li>
<li><a href="https://saxonica.plan.io/issues/6211">6211</a>
    Saxon return wrong error position in XPath expression</li>
<li><a href="https://saxonica.plan.io/issues/6212">6212</a>
    Serializer tries to guess doctype from content and fails at it.</li>
<li><a href="https://saxonica.plan.io/issues/6215">6215</a>
    SQL extension: returning the results of a join query</li>
<li><a href="https://saxonica.plan.io/issues/6217">6217</a>
    Sliding windows: finished windows not output if windows that started earlier are unfinished</li>
<li><a href="https://saxonica.plan.io/issues/6221">6221</a>
    Static error in XPath expression supplied to xsl:evaluate</li>
<li><a href="https://saxonica.plan.io/issues/6225">6225</a>
    Significant performance problem for case insensitive regex matching under high concurrency</li>
<li><a href="https://saxonica.plan.io/issues/6226">6226</a>
    Race condition initialising UnicodeBlocks class</li>
<li><a href="https://saxonica.plan.io/issues/6230">6230</a>
    fn:transform doesn't use the resource resolver from the XPathContext</li>
<li><a href="https://saxonica.plan.io/issues/6231">6231</a>
    Saxon does not recognise function annotations written using Q{uri}local syntax</li>
<li><a href="https://saxonica.plan.io/issues/6232">6232</a>
    Error message: "An empty sequence is not allowed as the result of a call to map"</li>
<li><a href="https://saxonica.plan.io/issues/6236">6236</a>
    Expected XPathException but got AssertionError 'No current component'</li>
<li><a href="https://saxonica.plan.io/issues/6237">6237</a>
    HTTP redirection expects an absolute URI in the location field</li>
<li><a href="https://saxonica.plan.io/issues/6238">6238</a>
    XPath error information is lost in XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6239">6239</a>
    Function conversion rules: xs:anyURI to xs:string conversion</li>
<li><a href="https://saxonica.plan.io/issues/6249">6249</a>
    <code>xsl:evaluate/@context-item</code> expression is present, but evaluates to empty sequence</li>
<li><a href="https://saxonica.plan.io/issues/6253">6253</a>
    Atomized item type for an array (test CastableAs667)</li>
<li><a href="https://saxonica.plan.io/issues/6256">6256</a>
    function-name returns an empty sequence for node-name#0, string#0 and more?</li>
<li><a href="https://saxonica.plan.io/issues/6257">6257</a>
    Gizmo quits after certain errors</li>
<li><a href="https://saxonica.plan.io/issues/6258">6258</a>
    Repeated failures from unparsed-text() / unparsed-text-available()</li>
<li><a href="https://saxonica.plan.io/issues/6260">6260</a>
    Operator || and fn:concat are not exactly equivalent</li>
<li><a href="https://saxonica.plan.io/issues/6265">6265</a>
    NPE in net.sf.saxon.functions.Contains</li>
</ul>

<h3>Issues in SaxonC</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.4&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6241">6241</a>:
    Python 3.12 wheels</li>
<li><a href="https://saxonica.plan.io/issues/6195">6195</a>:
    Sources node objects not deleted in the C++ Schema validation samples</li>
<li><a href="https://saxonica.plan.io/issues/6174">6174</a>:
    ICU localization is currently not supported</li>
<li><a href="https://saxonica.plan.io/issues/6162">6162</a>:
    SaxonC does not accept multiple catalog files</li>
<li><a href="https://saxonica.plan.io/issues/6144">6144</a>:
    PyXPathProcessor object has no attribute <code>thisxqptr</code></li>
<li><a href="https://saxonica.plan.io/issues/6143">6143</a>:
    White space in file path causing an error</li>
<li><a href="https://saxonica.plan.io/issues/6118">6118</a>:
    parseJson API current not supported in SaxonC</li>
<li><a href="https://saxonica.plan.io/issues/6109">6109</a>:
    Give SaxonC XPath API a counterpart to SaxonJ setUnprefixedElementMatchingPolicy</li>
<li><a href="https://saxonica.plan.io/issues/6099">6099</a>:
    Import xslt package currently not available</li>
</ul>

<p>If you encounter any issues with Saxon 12.4, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing SaxonJS 2.6!</title><link href="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html</id><published>2023-10-13T15:45:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS 2.6!</h1>

<p>The SaxonJS 2.6 maintenance release has been published. This is a
maintenance release for NodeJS and the browser. It fixes more than a
dozen bugs (including <a href="/norm/2023/10/06-no-longer-supported.html">that one</a>
about the spurious warning message). Highlights include:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5597">#5597</a>: ixsl:schedule-action fails without xsl:call-template</li>
<li><a href="https://saxonica.plan.io/issues/5714">#5714</a>: Update documentation to mention the backtick escaping mechanism</li>
<li><a href="https://saxonica.plan.io/issues/5739">#5739</a>: Space in string in text template not output as element content</li>
<li><a href="https://saxonica.plan.io/issues/5761">#5761</a>: fn:transform called from XPath with simplified stylesheet gives an error</li>
<li><a href="https://saxonica.plan.io/issues/5855">#5855</a>: map:merge with duplicates=combine gives wrong answer</li>
<li><a href="https://saxonica.plan.io/issues/5925">#5925</a>: Dynamic function lookup runs very slowly</li>
<li><a href="https://saxonica.plan.io/issues/5974">#5974</a>: SaxonJS documentation does not address namespaces</li>
<li><a href="https://saxonica.plan.io/issues/6037">#6037</a>: ixsl:schedule-action return objects</li>
<li><a href="https://saxonica.plan.io/issues/6107">#6107</a>: Can't use namespaced attributes on the root element of the body of a SaxonJS http-request</li>
<li><a href="https://saxonica.plan.io/issues/6134">#6134</a>: Partial function application call to function in ixsl namespace fails</li>
<li><a href="https://saxonica.plan.io/issues/6216">#6216</a>: base-uri() value empty for documents async-loaded with ixsl:schedule-action/@http-request</li>
<li><a href="https://saxonica.plan.io/issues/6219">#6219</a>: base-uri(ixsl:page()) returns empty value</li>
</ul>

<p>For a complete list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon-js/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_10&amp;op%5Bcf_10%5D=%3D&amp;v%5Bcf_10%5D%5B%5D=94&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxonica support site.</p>

<p>SaxonJS 2.6 was released on 13 October 2023. This release has been
uploaded to the usual locations on the Saxonica website and the NPM
repository.
For more details, please consult
<a href="https://www.saxonica.com/saxon-js/documentation2/index.html">the documentation</a>.
</p>

<p>If you encounter any issues with SaxonJS 2.6, please
<a href="https://saxonica.plan.io/projects/saxon-js/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>SaxonJS 2.5 ** NO LONGER SUPPORTED **</title><link href="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html</id><published>2023-10-06T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p><a href="https://en.wikipedia.org/wiki/TL;DR">TL;DR</a>, you can
ignore the message.</p>

<p>Several folks have noticed that, since about yesterday, if you run
the SaxonJS 2.5 <code>xslt3</code> Node.js command line processor, it
prints a scary “no longer supported” message.</p>

<p>Sorry. Our bad. The message is only informative and has no effect
on the performance of the processor.</p>

<p>We support SaxonJS releases for at least a year and a while back
(far enough back that I can’t easily determine when from the
repository history), we confidently assumed that we’d always do a
release at least once a year. So when you got that message, it was to
encourage you to upgrade.</p>

<p>Except this year, we published a whole bunch of other releases,
embarked on SaxonJS 3.0, shifted our web infrastructure around, and
did a bunch of other things. What we didn’t do was publish SaxonJS 3.0
within a year, and because we were heads-down on that, we didn’t
notice that we hadn’t published a SaxonJS 2.6 release within a year
either.</p>

<p>(It’s all a little embarrassing.)</p>

<p>We’ve fixed a handful of bugs in SaxonJS 2.5 since we shipped it,
and we’ve identified a slightly larger handful that we’d like to
consider fixing before we ship a SaxonJS 2.6 release. But we will ship
it, as quickly as practical.</p>

</div></content></entry><entry><title>Looking forward</title><link href="https://blog.saxonica.com/norm/2023/10/02-saxonica.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/02-saxonica.html</id><published>2023-10-02T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/02-saxonica.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As <a href="/mike/2023/10/eot.html">Mike says</a>, today is a big
day. It is an honour to be able to announce that I am taking on a new
role as CEO of Saxonica.</p>

<p>Let me start by offering huge congratulations and thanks to Mike and
Penny Kay, whose talent, commitment, and hard work have made Saxonica
into the successful company it is today.</p>

<p>I’m happy (and somewhat relieved!) to say that the Saxonica team
will continue to benefit from Mike’s experience for the foreseeable
future, as he moves to a new role as Director of Innovation. Working
part-time, Mike will continue to support customers and colleagues
alike, as well as ensuring that his in-depth knowledge of our code
base continues to be passed on to the rest of the Saxonica engineering
team, myself included!</p>

<p>Before I had the opportunity to join the company in 2020, I was
already an enthusiastic part of Saxonica’s user base. I know how
important our products are to our users; I <em>am</em> one of our users!</p>

<p>Working with this team of talented people to develop software that
makes a real contribution to the XML community has been a privilege.
Becoming Saxonica’s CEO is an even greater one. I am committed to
seeing Saxonica grow and prosper into the next decades, continuing the
reputation for excellence, innovation, and community-mindedness that
Mike has worked so hard to establish.</p>

</div></content></entry><entry><title>All Change at Saxonica</title><link href="https://blog.saxonica.com/mike/2023/10/eot.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/10/eot.html</id><published>2023-10-02T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/10/eot.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        
        <p>Today we are announcing a big change at Saxonica, but it's one 
            that we hope no-one will notice.</p>
        
        <p>Some of you may have noticed that I will be 72 in a couple of weeks, 
        and you may have been wondering how long I intended to continue. 
        Well, I'm still enjoying the challenge, and I'm not giving up just yet, 
        but I have been thinking for some time about how to move the company 
        into a position where it can thrive without me. I decided a while ago 
        that the best approach — in the interests of the staff and the user community — 
        was to move the ownership of the company into an Employee Ownership Trust, 
        and this has now been effected.</p>
        
        <p>What this means is that Saxonica is now owned by a Trust, which 
        has acquired a 100% shareholding from my wife Penny and myself. 
        The Trustees are Norm Tovey-Walsh, Sue Schreiber, and myself, and their 
        task is to appoint directors and approve any big decisions (such as 
        acquisitions). When making such decisions the Trust is obliged to 
        take into consideration the best interests of the staff and the user 
        community, including both paying customers and open-source users.</p>
        
        <p>Indeed, there's a specific clause in the trust deed noting that the company's
        software is used to deliver open data for the wider benefit of society at large,
        and the Trustees are required to take this into account.</p>
        
        <p>The most obvious change will be that Norm Tovey-Walsh is taking over as Chief Executive; 
        I will remain on the board (with the title "Director of Innovation"), 
        but Norm is now the boss. I can't think of anyone in the world who 
        is better qualified to steer the ship.</p>
        
        <p>Back at the start of 2020, before the pandemic, I was rather conscious that
        with several people approaching retirement age,
        the company was not in a good state to carry on without me; as a result any 
        acquisition could well have led to serious discontinuity for the user community, 
        and indeed for the future of the XML ecosystem of which we have become such 
        a central part. Since then, with Norm joining in a senior technical role, 
        with Ankita Mohinta taking over the marketing and commercial side so effectively, 
        and more recently with Matt Patterson joining O'Neil Delpratt and Debbie Lockett 
        on the development side, we now have a team that has an unmatched depth of talent. 
        This is reflected in excellent financial results over the last couple of years. 
        But it's also true that I know the innards of the software better than anyone, 
        and I don't intend to walk away from my focus on providing technical support 
        to customers, which is probably the part of the job that I enjoy the most.</p>
        
        <p>Penny is taking this opportunity to retire from her role as a director 
        and employee of the company, and this is a good opportunity to thank 
        her for her contribution. She may not have been very visible externally, 
        but she's done a lot of invaluable admin work behind the scenes, 
        and has been a constant source of good advice, most particularly 
        in helping to build a happy and productive team — especially 
        through the pandemic.</p>
        
        <p>I'm confident that through this adminstrative change, the company will 
        retain the core values that have been central to our success: innovation, 
        commitment to standards, outstanding technical support, honesty and integrity, 
        admitting to our mistakes when we make them, and above all being active 
        contributors to the thriving community without which we would not exist. 
        I hope to remain part of that for many years to come.</p>
    </div></content></entry><entry><title>XML Resolver 6.x SNAPSHOT</title><link href="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html</id><published>2023-09-14T14:55:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Under the hood, Saxon uses a “resolver” whenever it
attempts to load a document (a source document, stylesheet module,
unparsed text document, etc.). For the past few releases, the Java,
C#, and C products have been using resolvers based on the
<a href="https://xmlresolver.org/">XML Resolver APIs</a>.</p>

<p>I’ve been working on some improvements to those APIs. It’s likely
that the next releases of Saxon will be ship with XML Resolver
6.x.</p>

<p>If you’d like to
<a href="https://xmlresolver.org/6x-snapshot/">preview the planned changes</a>
and provide feedback about how they work in your applications, that’d
be grand.</p>

</div></content></entry><entry><title>New infrastructure…</title><link href="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/31-infrastructure.html</id><published>2023-08-31T13:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>New infrastructure…</h1>

<p>Just FYI, we’ve moved some things around. Some of our web
infrastructure, the way
<a href="https://www.saxonica.com/">www.saxonica.com</a>
and
<a href="https://dev.saxonica.com/">dev.saxonica.com</a>
are served, for example, has changed.
Plus we have some new infrastructure for
<a href="https://downloads.saxonica.com/">downloads</a>
and 
<a href="https://maven.saxonica.com/">Maven</a>.
</p>

<p>You aren’t supposed to notice. Or, at least, it isn’t supposed to
be broken. There are redirects in place for things we know moved and
a few very old things have fallen by the wayside.</p>

<p>If you see something that you think is broken, please tell us!</p>

</div></content></entry><entry><title>Announcing Saxon 11.6!</title><link href="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html</id><published>2023-08-24T13:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 11.6!</h1>

<p>The Saxon 11.6 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes
almost 40 issues reported since the 11.5 release.</p>

<p>Saxon 11.6 was released on 24 August 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub,
Maven, and NuGet. SaxonCS 11.6 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=93&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/11.6">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation11">the documentation</a>.
</p>

<p>If you encounter any issues with Saxon 11.6, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>ICU4J and SaxonJ EE</title><link href="https://blog.saxonica.com/norm/2023/08/24-icu4j.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/24-icu4j.html</id><published>2023-08-24T12:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/24-icu4j.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>ICU4J and SaxonJ EE</h1>

<p>We’ve recently discovered a small discrepancy in how we manage the
dependencies between <a href="https://unicode-org.github.io/icu/userguide/icu4j/">ICU4J</a>
and SaxonJ EE.</p>

<p>If you download the EE release from our website, you get a
distribution that includes SaxonJ EE, XML Resolver, ICU4J, and JLine
(used by Gizmo). The manifest in the SaxonJ EE jar file puts those
additional dependencies on your classpath automatically.</p>

<p>If you get the EE release from our Maven repository, ICU4J is an
<em>optional</em> dependency. So Maven won’t automatically put it on
your classpath. That’s the discrepancy.</p>

<p>Saxon EE will function without ICU4J, so it is technically
optional. I’m unsure which would be better: making it optional in both
places or non-optional in both places. Having it different certainly
seems like the worst choice and we should fix it.</p>

<p>In the short term, if you’re using Saxon EE and you want the
collations supported by ICU4J, make sure you’re also arranging for
ICU4J to be on your classpath.</p>

<p>We discovered this in the course of examining issue
<a href="https://saxonica.plan.io/issues/6183">#6183</a>. For slightly
complicated reasons involving our type hierarchy, if ICU4J is missing,
you can get an error message that suggests you’re running Saxon HE
even when you’re running EE. We’ll fix that too.
</p>

</div></content></entry><entry><title>XML doclet</title><link href="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html</id><published>2023-08-16T10:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Historically, we’ve used a customized version of
<a href="https://jeldoclet.sourceforge.net/">JELDoclet</a> to generate
XML from Javadoc. We use the XML to construct parts of our website.
The Javadoc APIs used by JELDoclet (and all of the other
Javadoc-to-XML doclets that I could lay my hands on) have been deprecated as of
Java 9 and will eventually be removed from the JDK.</p>

<p>On a whim last weekend, I took a stab at simply rebuilding an XML
doclet on top of the new Javadoc APIs. You can find the results of that
effort in the <a href="https://github.com/Saxonica/xmldoclet">xmldoclet</a> repository.
</p>

<p>It’s only version 0.1.0, but I think it’s broadly functional. It
handles all of the sources I’ve thrown at it, including the Saxon Java
products which are fairly large and complex. If you try it out and
discover that it produces output that seems incomplete or incorrect, please
<a href="https://github.com/Saxonica/xmldoclet/issues">open an issue</a>.</p>

<p>I can’t say I’m especially fond of the Javadoc APIs. In particular,
although you need to know what imports a class has in order to
correctly resolve the names of types, the public APIs provide no
access to that information. In the end, I applied an old maxim:</p>

<blockquote>
  <p><em>If brute force doesn’t work, you’re not applying enough brute force.</em></p>
</blockquote>

<p>I simply included the Java parser that we use for the transpiler and 
parse the sources myself.</p>

<p>Comments most welcome…</p>

</div></content></entry><entry><title>How Safe is your Schema?</title><link href="https://blog.saxonica.com/mike/2023/07/schema-safety.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/07/schema-safety.html</id><published>2023-07-22T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/07/schema-safety.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        <p>When you validate a document, you expect to set the rules for what it can contain.
        If you specify that your nesting box can only contain wrens and robins, you don't want
        any cuckoos in there.</p>
        
        <p>So you write a schema <code>nesting-box.xsd</code> like this:</p>
        
        <pre>&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    version="1.1"&gt;
    
    &lt;xs:element name="nesting-box" type="nesting-box-type"/&gt;
    
    &lt;xs:complexType name="nesting-box-type"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element ref="wren"/&gt;
            &lt;xs:element ref="robin"/&gt;
        &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
    
    &lt;xs:element name="wren" type="xs:string"/&gt;
    &lt;xs:element name="robin" type="xs:string"/&gt;
&lt;/xs:schema&gt;         
        </pre>
        
        <p>And you're now comfortable that any <code>&lt;nesting-box&gt;</code> that
            passes validation will look something like this:</p>
        
        <pre>&lt;nesting-box&gt;
   &lt;wren&gt;Nice!&lt;/wren&gt;
   &lt;robin&gt;Nicer!&lt;/robin&gt;
   &lt;robin&gt;Nicest!&lt;/robin&gt;
&lt;/nesting-box&gt;
        </pre>
        
        <p><b><i>You're wrong!</i></b></p>
        
        <p>The following document also passes validation:</p>
        
        <pre>&lt;nesting-box xsi:schemaLocation="cuckoo.ns cuckoo.xsd" 
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
   &lt;wren&gt;Nice!&lt;/wren&gt;
   &lt;robin&gt;Nicer!&lt;/robin&gt;
   &lt;robin&gt;Nicest!&lt;/robin&gt;
   &lt;cuckoo xmlns="cuckoo.ns"&gt;Horrid!&lt;/cuckoo&gt;
&lt;/nesting-box&gt;
        </pre>
        
        <p>Here <code>cuckoo.xsd</code> is another schema document, like this:</p>
        
        <pre>&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    targetNamespace="cuckoo.ns"
    version="1.1"&gt;
    
    &lt;xs:import schemaLocation="nesting-box.xsd"/&gt;
    
    &lt;xs:element name="cuckoo" type="xs:string"
       substitutionGroup="robin"/&gt;
    
&lt;/xs:schema&gt;
        </pre>
        
        <p>So you thought you were constraining what could appear in the document,
        and the user found a way past your defenses, submitting a document that
        your code probably can't handle.</p>
        
        <p>Saxon does allow you to disable use of <code>xsi:schemaLocation</code>,
        but it's enabled by default. I'm inclined to think the default needs to
        be changed.</p>
        
 
   
    </div></content></entry><entry><title>Announcing Saxon 12.3!</title><link href="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html</id><published>2023-07-04T17:50:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.3!</h1>

<p>The Saxon 12.3 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.2 release.</p>

<p>Saxon 12.3 was released on
<span title="Happy Independence Day to all our readers in the United States!">4 July 2023</span>.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.3 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.3">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6003">6003</a>:
    Inline function expression evaluated using xsl:evaluate</li>
<li><a href="https://saxonica.plan.io/issues/6018">6018</a>:
    UnicodeString - indexWhere does not start from the expected position</li>
<li><a href="https://saxonica.plan.io/issues/6022">6022</a>:
    Eager evaluation prematurely throws exception in analyze-string/non-matching-string.</li>
<li><a href="https://saxonica.plan.io/issues/6024">6024</a>:
    java.lang.NoClassDefFoundError: org/jdom2/Document</li>
<li><a href="https://saxonica.plan.io/issues/6033">6033</a>:
    Invalid warning about field in xs:key</li>
<li><a href="https://saxonica.plan.io/issues/6034">6034</a>:
    Problems with saxon:slice()</li>
<li><a href="https://saxonica.plan.io/issues/6036">6036</a>:
    Undeclaration of default namespace is not reported to a SAXResult</li>
<li><a href="https://saxonica.plan.io/issues/6040">6040</a>:
    Invalid warning displayed when map:contains() is used</li>
<li><a href="https://saxonica.plan.io/issues/6054">6054</a>:
    NamedNodeMap.getNamedItem throw UnsupportedOperationException</li>
<li><a href="https://saxonica.plan.io/issues/6059">6059</a>:
    Bug on "-" castable to xs:duration</li>
<li><a href="https://saxonica.plan.io/issues/6061">6061</a>:
    Crash in SaxonCS using ";n" in regex flags</li>
<li><a href="https://saxonica.plan.io/issues/6063">6063</a>:
    Incorrect attribute indentation</li>
<li><a href="https://saxonica.plan.io/issues/6067">6067</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6076">6076</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6085">6085</a>:
    Fixed an incomplete path in error messages in a validation report</li>
<li><a href="https://saxonica.plan.io/issues/6086">6086</a>:
    Updated the validation-reports.xsd</li>
<li><a href="https://saxonica.plan.io/issues/6091">6091</a>:
    Fixed an NPE in ContextStackIterator.getMajorCaller</li>
<li><a href="https://saxonica.plan.io/issues/6092">6092</a>:
    Fixed a bug in defaultOpenContent/@appliesToEmpty in XML Schema support</li>
<li><a href="https://saxonica.plan.io/issues/6093">6093</a>:
    Fixed a bug in a predicate with last()</li>
<li><a href="https://saxonica.plan.io/issues/6095">6095</a>:
    Fixed an index out-of-bounds exception when using an accumulator-rule match with variables</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/6017">6017</a>:
    Interrupted by signal 11: SIGSEGV when PyDocumentBuilder.set_schema_validator is set to None</li>
<li><a href="https://saxonica.plan.io/issues/6023">6023</a>:
    Thread 1 "python3" received signal SIGSEGV, Segmentation fault</li>
<li><a href="https://saxonica.plan.io/issues/6025">6025</a>:
    Python Saxon not releasing memory</li>
<li><a href="https://saxonica.plan.io/issues/6053">6053</a>:
    PydmNode object gets deleted before reuse</li>
<li><a href="https://saxonica.plan.io/issues/6075">6075</a>:
    Unable to read unicodeBlocks.xml file</li>
<li><a href="https://saxonica.plan.io/issues/6077">6077</a>:
    Axis Iterator required on the XdmNode</li>
<li><a href="https://saxonica.plan.io/issues/6078">6078</a>:
    Undefined reference to <code>dlopen@GLIBC_2.34</code></li>
<li><a href="https://saxonica.plan.io/issues/6084">6084</a>:
    Exception: Initial template parameters can only be of type PyXdmValue</li>
<li><a href="https://saxonica.plan.io/issues/6098">6098</a>:
    SaxonApiException::getSystemId() throws NullPointerException</li>
</ul>

<p>If you encounter any issues with Saxon 12.3, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Schema Modularity</title><link href="https://blog.saxonica.com/mike/2023/06/schema-modules.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/06/schema-modules.html</id><published>2023-06-20T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/06/schema-modules.html"><div xmlns="http://www.w3.org/1999/xhtml">

            

        <p>Saxon, ever since we first introduced schema awareness back in 2004, has always
        worked with a single global schema maintained at the level of the <code>Configuration</code>
        object. This article discusses the advantages and disadvantages of this approach, and
        looks at possible alternatives.</p>
        
        <p>Let's start by getting some terminology clear. A <b>schema</b>, in the terminology
        of the XSD specification, is a set of schema components (such as element declarations
        and type definitions). Don't confuse it with a <b>schema document</b>, which is an
        XML document rooted at an <code>xs:schema</code> element. A <b>schema</b>
        is what you get when you compile a collection of schema documents linked to each
        other using <code>xs:include</code> and <code>xs:import</code> declarations.</p>
        
        <p>Not every set of schema components constitutes a valid schema. Most obviously
        you can't have two different components (for example, two type definitions) with the
        same name, unless they are identical. The XSD specification is a bit fuzzy about what
        it means for two components to be identical.</p>
        
        <p>This means that in general, you can try and combine two schemas into one by
        taking their union, but the operation won't always succeed because the two
        schemas may be found to be inconsistent with each other.</p>
        
        <h2>The Global Schema</h2>
        
        <p>Saxon currently maintains a global schema at the level of the <code>Configuration</code>
        object. This means that every time you introduce a new schema, for example by
        compiling a schema-aware query or stylesheet that has an <code>import schema</code> declaration,
        or by validating a document against a schema loaded using the <code>SchemaManager</code>
        API, or referenced using <code>xsi:schemaLocation</code>, the schema components
        from that schema are added to the global pool, provided they are consistent with
        the declarations already present in the pool.</p>
        
        <p>These consistency checks are of two kinds:</p>
        
        <ul>
            <li><p>Firstly, the new components must not have names that clash with the old.
            You can't have two different types with the same name. To test whether two types
            are the same, Saxon basically checks that they came from the same place: the same
            line number in the same source schema document.</p></li>
            <li><p>Secondly, the new components must not change the semantics of existing
            components, if the existing components have already been used for validation purposes.
            The test whether components have been used is done at the level of a target
            namespace: if any declaration or definition in a target namespace has been
            used for validating a source document, or if it has been used when compiling
            a stylesheet or query, then the namespace is <b>sealed</b>, which means that its
            components must not be extended or redefined by any new components.
            We'll talk later about exactly what this means.</p></li>
        </ul>
        
        <p>The main benefit of the global schema approach is that you can always be sure
        that type annotations in validated instance documents are consistent with types
        that are mentioned (or inferred) in compiled queries and stylesheets. If a query
        is compiled believing that element <i>E</i> will always be empty, then you can be sure
        that every validated instance of <i>E</i> will be empty, because no-one is allowed, between
        compilation and validation, to add a type definition that extends or redefines <i>E</i>
        allowing it to be non-empty. That's the theory, anyway.    
        </p>
        
        <p>The most obvious <i>disadvantage</i> of the approach is that an application can't
        work with two different versions of the same schema. If you want to write a stylesheet
        that transforms input documents from <i>V1</i> to <i>V2</i> of the same schema, you
        can't import both versions into the same stylesheet, one to validate the input and one
        to validate the output. In fact, you can't even have both versions in the same
        <code>Configuration</code> — which means you can't process an input collection containing
        a mix of different versions (or if you do, you have to forgo validation).</p>
        
        <p>There are other less obvious disadvantages. One of them is revealed by a recent
        embarrassing bug where we discovered that schema compilation isn't thread safe: you
        can't reliably run two schema compilations within a single <code>Configuration</code>
        at the same time. We've patched that by adding some locking, but it's an imperfect
        solution because the lock is rather coarse-grained. We need to find a better solution,
        and that gives us an opportunity to re-examine the design and see whether we can fix some
        other long-standing issues at the same time.</p>
        
        <p>Another outstanding issue is a long-standing bug #3531, concerning a situation where
        two independently-loaded schemas <i>X</i> and <i>Y</i> both extend the same substitution
        group. This has remained outstanding because we have had no reports of users being affected
        by it; but it remains an unsatisfactory state of affairs.</p>
        
        <h2>The X+Y Problem</h2>
        
        <p>Suppose that <i>X</i> and <i>Y</i> are valid schemas. Then we've already seen
        that their union, which I will call <i>X+Y</i>, is not necessarily a valid schema;
        their declarations might be inconsistent. Apart from the obvious inconsistencies
        where <i>X</i> and <i>Y</i> contain different elements or types with the same name,
        there can be much more subtle inconsistencies:</p>
        
        <ul>
            <li><p><i>Y</i> might contain a type that redefines a type in <i>X</i>.</p>
            <p>The semantics of <code>xs:redefine</code> as defined in XSD are a bit
            fuzzy round the edges, but the effect is supposed to be global: if a type
            is redefined, then all references to that type are affected. Exactly what
            happens when the same type is redefined more than once isn't made clear.
            </p>
            <p>The introduction of <code>xs:override</code> in XSD 1.1 makes this
            problem even worse, because <code>xs:override</code> allows existing
            definitions to be changed in completely arbitrary ways.</p></li>
            <li><p><i>Y</i> might contain a type that extends a type in <i>X</i>,
            by allowing additional child elements or attributes. To be valid, 
            instances that use the extended type have to identify themselves
            with an <code>xsi:type</code> attribute, but this doesn't alter the
            fact that adding the extended type to the global schema makes some
            things valid that were previously invalid. It's bad news if a document
            that was invalid at breakfast time suddenly becomes valid at tea time
            because a new schema has been added to the <code>Configuration</code>.
            It's even worse news if the schema changes during the course of
            validating an input document. </p></li>
            <li><p><i>Y</i> might contain an element declaration that
            adds to the substitution group of an element defined in <i>X</i>.
            Again, this means that a document that was invalid when validated
            against schema <i>X</i> becomes valid when validated against
            <i>X+Y</i>.</p></li>
            <li><p><i>X</i> might contain a wildcard, for example 
                <code>&lt;xs:any processContents="lax"/&gt;</code>. Suppose
            an instance document matches this wildcard with an element
            named <i>W</i>, and is valid (under the rules for lax validation)
            because the schema contains no element declaration for <i>W</i>.
            Now schema <i>Y</i> comes along and adds a definition for
            element <i>W</i>, and suddenly our source document is no
            longer valid.</p></li>
        </ul>
        
        <p>It doesn't really help that all these situations are rare. Should the
        processor simply ignore the problem and hope it doesn't happen? For the first
        three cases above, Saxon prevents the situation occurring, which imposes an
        inconvenience on users who are actually doing something completely safe.
        For the final case (wildcards), Saxon ignores the problem, which creates
        the theoretical risk that queries and stylesheets are not type-safe: a document
        that has been validated against a type <i>T</i> might not satisfy all the contraints
        that the query or stylesheet processor assumes to be true for any valid instance
        of <i>T</i>.</p>
        
        <h2>An Alternative: Modular Schemas</h2>
        
        <p>Let's consider an alternative model, where instead of adding all schema
        components to a single global schema at <code>Configuration</code> level,
        we keep schemas independent and modular. So two stylesheets that import
        different schema documents have separate unrelated schemas, and there are
        no requirements that the two schemas should be consistent with each other.</p>
        
        <p>The challenge now is to ensure that a source document validated against
        a schema <i>S1</i> is consistent with a stylesheet that imports schema <i>S2</i>.
        If the two schemas are identical, there's no problem (and it's not too hard to
        detect that they are identical, for example if they load the same schema
        document as their starting point).</p>
        
        <p>But what if <i>S2</i> is a superset of <i>S1</i>? Suppose the document is
        validated against a schema with target namespace <i>X</i>, while the stylesheet
        has two <code>xsl:import-schema</code> declarations, for namespaces <i>X</i> 
        and <i>Y</i>? We're now back with the <i>X+Y</i> problem: a document that is valid
        against <i>X</i> is not necessarily valid against <i>X+Y</i>.</p>
        
        <p>It gets worse: if we have a pipeline of stylesheets, each of which imports
        schemas for both its input document and its output document, then the first
        stylesheet might import schemas for <i>X+Y</i>, and the second for <i>Y+Z</i>,
        and we need to be sure that when the first stylesheet validates its output against
        <i>X+Y</i>, the result will also be valid input against <i>Y+Z</i>.</p>
        
        <p>One possible solution here is to keep the imported schemas within a single
        stylesheet separate. Import one schema for the input, and another for the output,
        and don't require the two to be consistent. This also solves the problem of transforming
        from <i>V1</i> to <i>V2</i> of the same schema. So in our pipeline, the output
        of the first stylesheet would be validated not against <i>X+Y</i>, but merely
        against <i>Y</i>, which is the same schema used for the input of the second stylesheet.
        This would need language changes: <code>xsl:import-schema</code> declarations
        would need to identify which schema they belong to, and type names used in 
        <code>type</code> or <code>as</code> attributes would need to qualify the type
        name with a schema name.</p>
        
        <p>I've started doing work to allow free-standing schemas to be constructed
        and used for validation, independently of the <code>Configuration</code>.
        There are clearly cases where this is useful. However, there's a lot more
        work to be done on ensuring consistency of free-standing schemas, when a validated
        document is used as input to a schema-aware stylesheet or query. Expect a new
        class of (initially bewildering) error messages saying that element <i>E</i>
        is known to be valid against type <i>T</i> in schema <i>X</i>. but it isn't known
        to be valid against type <i>T</i> in schema <i>Y</i>. Hopefully these will be rare.</p>
        
        <h2>What about Wildcards?</h2>
        
        <p>I mentioned that there's an open issue with wildcards: if a schema type include
        a lax wildcard, then an element that's valid against that schema (because there's
        no element declaration matching the actual element name) can become invalid when
        more element declarations are added.</p>
        
        <p>This isn't the only issue with wildcards. XSD 1.1 allows you to say, for example
        <code>notQName="##defined"</code> which means that the name used for an element or
        attribute must be one that has no global declaration anywhere in the schema. That's
        another example of how adding new declarations to a schema can make existing content
        invalid.</p>
        
        <p>I think the answer to this problem is to interpret these definitions in the context
        of a "schema compilation unit". That is, when you compile a schema, 
            <code>notQName="##defined"</code> is interpreted as meaning "not a name used for
        a global element/attribute declaration in the that schema"; any
        names or declarations added later (by merging this schema with others) have no effect 
        on the meaning.</p>
        
        <p>This seems to solve the problem whether using a global schema or local free-standing
        schemas, and makes the two cases behave more consistently and predictably.</p>
        
    </div></content></entry><entry><title>Announcing Saxon 12.2!</title><link href="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html</id><published>2023-05-02T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.2!</h1>

<p>The Saxon 12.2 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.1 release.</p>

<p>Saxon 12.2 was released on 2 May 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.2 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86 64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.2">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5997">5997</a>:
    XSLT version for fn:transform</li>
<li><a href="https://saxonica.plan.io/issues/5996">5996</a>:
    Union types extension is available in Saxon-PE</li>
<li><a href="https://saxonica.plan.io/issues/5995">5995</a>:
    JavaDoc for XPathCompiler.setLanguageVersion should mention 4.0 is accepted</li>
<li><a href="https://saxonica.plan.io/issues/5978">5978</a>:
    StackOverflow during multithreaded schema processing</li>
<li><a href="https://saxonica.plan.io/issues/5970">5970</a>:
    DirectResourceResolver - unresolved XML classpath resources</li>
<li><a href="https://saxonica.plan.io/issues/5957">5957</a>:
    Disabling DTD validation</li>
<li><a href="https://saxonica.plan.io/issues/5953">5953</a>:
    JAXP ValidatorHandler throws an exception if the document is invalid</li>
<li><a href="https://saxonica.plan.io/issues/5952">5952</a>:
    unparsed-text-available throws an un-catchable IllegalCharsetNameException</li>
<li><a href="https://saxonica.plan.io/issues/5939">5939</a>:
    Using -u and a file: URI as the source argument for a query doesn't work</li>
<li><a href="https://saxonica.plan.io/issues/5937">5937</a>:
    Extension function gives NullPointerException in 12.1 when returning empty sequence</li>
<li><a href="https://saxonica.plan.io/issues/5931">5931</a>:
    Remove outdated xml-apis from the Maven artifacts</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5983">5983</a>:
    Saxon.C.API/SaxonApiException.cpp calculates wrong strlen</li>
<li><a href="https://saxonica.plan.io/issues/5954">5954</a>:
    The XPath 4.0 function parse-html not available</li>
<li><a href="https://saxonica.plan.io/issues/5944">5944</a>:
    set_cwd on PySchemaValidator seems to be ignored under some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/5941">5941</a>:
    SaxonC EE 12.1 Validate command line tool seems broken; doesn't give any output</li>
<li><a href="https://saxonica.plan.io/issues/5938">5938</a>:
    Trying to compile XSLT from file after setting allowedProtocols raises an NPE</li>
<li><a href="https://saxonica.plan.io/issues/5936">5936</a>:
    Fix exception reporting for Python on Windows</li>
<li><a href="https://saxonica.plan.io/issues/5934">5934</a>:
    Python wheels don’t work in a virtual environment on Windows</li>
</ul>

<p>If you encounter any issues with Saxon 12.2, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing Saxon 12.1!</title><link href="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html</id><published>2023-03-21T15:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.1!</h1>

<p>The Saxon 12.1 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the first Saxon 12.0 release,
in particular it now runs on Java 8.</p>

<p>Saxon 12.1 was released on 21 March 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.1 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.1">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5624">5624</a>:
    SaxonCS validate problem</li>
<li><a href="https://saxonica.plan.io/issues/5801">5801</a>:
    Dependency on axiom pom causes maven-dependency-plugin error</li>
<li><a href="https://saxonica.plan.io/issues/5805">5805</a>:
    Set locator to XmlProcessingIncident</li>
<li><a href="https://saxonica.plan.io/issues/5809">5809</a>:
    NPE on failure to load user-supplied collation class</li>
<li><a href="https://saxonica.plan.io/issues/5823">5823</a>:
    The implemented fn:slice function signature differs from the Saxonica docs and the specification</li>
<li><a href="https://saxonica.plan.io/issues/5824">5824</a>:
    SaxonJ 12.0 does not run with Java 8</li>
<li><a href="https://saxonica.plan.io/issues/5839">5839</a>:
    SaxonCS query problem</li>
<li><a href="https://saxonica.plan.io/issues/5852">5852</a>:
    XML Transformer generates invalid XHTML</li>
<li><a href="https://saxonica.plan.io/issues/5880">5880</a>:
    XQuery error with -p:on command line option</li>
<li><a href="https://saxonica.plan.io/issues/5884">5884</a>:
    SaxonCS 12 doesn't find elements in HTML DOM based on [@class = 'foo'] predicate</li>
<li><a href="https://saxonica.plan.io/issues/5906">5906</a>:
    C# context item absent</li>
<li><a href="https://saxonica.plan.io/issues/5908">5908</a>:
    saxon:for-each-member was dropped in Saxon 11</li>
<li><a href="https://saxonica.plan.io/issues/5910">5910</a>:
    Double reporting of template execution in timing profile</li>
<li><a href="https://saxonica.plan.io/issues/5911">5911</a>:
    SaxonCS crashes when package version number is wrong</li>
<li><a href="https://saxonica.plan.io/issues/5913">5913</a>:
    Tail recursion overwrites value of variable</li>
<li><a href="https://saxonica.plan.io/issues/5920">5920</a>:
    Java reflexive API fails to run, throws ClassNotFoundException</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5849">5849</a>:
    transform_to_file() in PyXslt30Processor not working.</li>
<li><a href="https://saxonica.plan.io/issues/5850">5850</a>:
    Error when compiling XSLT that uses "i" flag in regular expressions.</li>
<li><a href="https://saxonica.plan.io/issues/5856">5856</a>:
    Compilation/build issue PHP 8</li>
<li><a href="https://saxonica.plan.io/issues/5868">5868</a>:
    C samples don't build with Ubuntu</li>
<li><a href="https://saxonica.plan.io/issues/5869">5869</a>:
    For Windows SaxonC HE 12.0 there is no bat file to build the C samples</li>
</ul>

<p>If you encounter any issues with Saxon 12.1, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Brand new weblog, just like the old weblog</title><link href="https://blog.saxonica.com/norm/2023/03/16-weblog.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/03/16-weblog.html</id><published>2023-03-16T10:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/03/16-weblog.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As part of some infrastructure cleanup, we decided to change how
the weblog is managed. It’s now hosted on
<a href="https://blog.saxonica.com/">blog.saxonica.com</a>.</p>

<p>All of the old posts have been copied over and redirects are in
place. Along the way, I cleaned up a few broken links.</p>

<p>If anything seems broken, please do let me know!</p>

</div></content></entry><entry><title>SaxonC HE “11.99” pre-release</title><link href="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/23-saxon-c.html</id><published>2022-12-23T17:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Happy holidays everyone! Wishing you peace and joy in this festive season!</p>

<p>And toys.</p>

<p>Since we didn't get any releases out before Christmas, we've
packaged up a special treat for anyone who wants to play with
something new: SaxonC HE 12.0 in Python.</p>

<p>We've built and deployed the Python "wheels" for installing SaxonC
HE “11.99” (that's the 12.0 code base, but it's a test release so I
didn't want to use up one of the 12.x release numbers). You’ll find the
details at <a href="https://saxonica.com/saxon-c/1199/">https://saxonica.com/saxon-c/1199/</a>.
</p>

<p>If you decide to
<a href="https://en.wiktionary.org/wiki/kick_the_tires">kick the tyres</a><sup>†</sup>,
please do let us know how it goes. There’s still work to do with
installing and packaging, but we think the API is in good shape. (I
did notice that if you call <code>compile_stylesheet()</code> and the stylesheet
isn’t well formed, the call silently returns <code>None</code> instead of raising
an error. I’ve
<a href="https://saxonica.plan.io/issues/5781">reported that one</a>!)</p>

<p>I’ll probably check my email most days, but I can’t speak for
anyone else. Apologies if some of your feedback isn’t properly
addressed before the new year.</p>

<p>Once again, wishing you the happiest of holiday seasons!</p>

<div class="fn">
<hr/>
<sup>†</sup>That’s “tires” for my American friends.
</div>
</div></content></entry><entry><title>Signed, sealed, and delivered</title><link href="https://blog.saxonica.com/norm/2022/12/21-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/21-net6.html</id><published>2022-12-21T13:19:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/21-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Signed, sealed, and delivered</h1>

<p>I have been trying to build SaxonCS for .NET such that I could deliver it
on MacOS without warning messages for
<a href="https://github.com/dotnet/sdk/issues/24337">a long time</a>.
It has not been an easy or enjoyable adventure. Here are some
breadcrumbs for the next poor soul forced to tread down this path.</p>

<p>You can’t do this with .NET 5. That’s probably less important today
than it was when I started. I don’t understand the details, but something has
been fixed in .NET 6 that isn’t going to be backported to .NET 5. (There’s
a comment to that effect in an issue, but I can’t now locate that issue.)</p>

<p>There are several problems that have to be solved. The application
has to be built such that it will run when signed. All of the various pieces
have to be (correctly) signed. A DMG must be constructed to distribute
the application (maybe I don’t <em>have</em> to do this step, but it’s
reasonably what users expect). The <em>DMG</em> has to be signed.
<em>And</em> the whole thing has to be notarized by Apple so that
it will open without warnings.</p>

<div>
<h2>The objective</h2>
<p>A complete, hands off, CI-driven build of a C# application to produce
a MacOS DMG file that a user can open and use without any warnings about
unsigned code or potentially malicious applications.</p>
</div>

<div>
<h2>Prerequisites</h2>

<p>Before you begin, there are some things you have to have setup.</p>

<ul>
<li><p>You need <a href="https://dotnet.microsoft.com/en-us/">dotnet</a> 6
(or later, I assume, but we’re planning to ship Saxon 12 with .NET 6
so that’s what I’m using).</p></li>
<li><p>You need the
<a href="https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools">nuget</a>
command line tool. This is distinct from the <em>nuget</em> subcommand
of the <em>dotnet</em> tool. As far as I can tell, only the former
can actually install packages.</p>
<p>On a Mac, you need the Mono framework and some
other fiddling to make it work. Because that’s the way it is. The details
are outlined on the tools page linked above.</p>
</li>
<li><p>You’ll need
<a href="https://developer.apple.com/xcode/">XCode</a>. I’m using version 14.2.
I think you need to install the XCode command line tools and you need to run
XCode at least once, it does a bunch of initialization the first time it runs.
</p></li>
<li><p>You need an Apple developer account and you have to go through
the dance necessary to create a developer ID certificate. The certificate
and (at least some of) the certificate chain need to be downloaded and
installed in your keychain. I don’t remember the exact details, but I seem
to recall that it was spelled out <em>reasonably</em> well in the Apple developer
documentation.</p>
</li>
<li><p>I decided to use
<a href="https://www.araelium.com/dmgcanvas">DMG Canvas</a> to build the
DMG. In addition to building the DMG, this application does the sign
and notarize dance with Apple for me. $20 well spent, I think. I
assume these steps can be done manually, but I’m not inspired to try
to figure out how just at the moment.</p>
</li>
</ul>

<p>Use the <em>nuget</em> command to install <code>Dotnet.Bundle</code>:</p>

<pre><code>$ nuget install Dotnet.Bundle</code></pre>

<p>This package constructs the “bundle” of files that MacOS expects
for an application. (That’s the <code><em>application</em>.app</code> directory
and its descendants.)</p>
</div>

<div>
<h2>Application files</h2>

<p>Start with your application. In our case, this complex beast:</p>

<pre><code>using System;

namespace HelloWorld
{
    public class HelloWorld
    {
        public static void Main(string[] arg)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}</code></pre>

<p>You will also need a <code>.csproj</code> file. Here’s one that works
for me:</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;PlatformTarget&gt;AnyCPU&lt;/PlatformTarget&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
    &lt;PublishSingleFile&gt;true&lt;/PublishSingleFile&gt;
    &lt;SelfContained&gt;true&lt;/SelfContained&gt;
    &lt;PublishReadyToRun&gt;true&lt;/PublishReadyToRun&gt;
    &lt;RuntimeIdentifier&gt;osx-x64&lt;/RuntimeIdentifier&gt;
    &lt;UseHardenedRuntime&gt;true&lt;/UseHardenedRuntime&gt;
    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;IncludeNativeLibrariesForSelfExtract&gt;true&lt;/IncludeNativeLibrariesForSelfExtract&gt;
    &lt;IncludeSymbolsInSingleFile&gt;false&lt;/IncludeSymbolsInSingleFile&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup&gt;
    &lt;CFBundleName&gt;HelloWorld&lt;/CFBundleName&gt;
    &lt;CFBundleDisplayName&gt;HelloWorld&lt;/CFBundleDisplayName&gt;
    &lt;CFBundleIdentifier&gt;com.saxonica.helloworld&lt;/CFBundleIdentifier&gt;
    &lt;CFBundleVersion&gt;1.0.0&lt;/CFBundleVersion&gt;
    &lt;CFBundleShortVersionString&gt;1.0.0&lt;/CFBundleShortVersionString&gt;
    &lt;CFBundleExecutable&gt;HelloWorld&lt;/CFBundleExecutable&gt;
    &lt;CFBundleIconFile&gt;HelloWorld.icns&lt;/CFBundleIconFile&gt;
    &lt;NSPrincipalClass&gt;NSApplication&lt;/NSPrincipalClass&gt;
    &lt;NSHighResolutionCapable&gt;true&lt;/NSHighResolutionCapable&gt;
    &lt;NSRequiresAquaSystemAppearance&gt;false&lt;/NSRequiresAquaSystemAppearance&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="DotNet.Bundle" Version="0.9.13" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;</code></pre>

<p>The first property group specifies properties of the build, the second
defines how the application will be bundled, and the last item group is
necessary to make the bundler part of the build.</p>

<p>Notes:</p>

<ol>
<li>You must specify <code>net6</code> for the framework and create
a single file, self-contained application.</li>
<li>You must use the hardened runtime.</li>
<li>You must include native libraries for self extraction.</li>
<li>You must <em>not</em> include symbols in the single file, that’s an option that
apparently stopped working in .NET 5.</li>
<li>I created <code>HelloWorld.icns</code> from a PNG with ImageMagick.</li>
</ol>
</div>

<div>
<h2>Building the application</h2>

<p>Add <code>Dotnet.Bundle</code> to the project:</p>

<pre><code>$ dotnet add package Dotnet.Bundle</code></pre>

<p>(You only have to do this once.)</p>

<p>Build the application:</p>

<pre><code>$ dotnet msbuild -t:BundleApp -p:RuntimeIdentifier=osx-x64 -p:Configuration=Release</code></pre>

<p>You can run the bundled application to make sure it works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>
</div>

<div>
<h2>Sign the application</h2>

<p>Next we have to sign the application. But before we can do that, we have
to make an entitlements plist file. I called mine <code>entitlements.plist</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-library-validation&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-executable-page-protection&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;</code></pre>

<p>Now we can sign it:</p>

<pre><code>$ codesign --force --options runtime --entitlements ./entitlements.plist --deep \
  --sign "Developer ID Application: YOUR DEVELOPER ID GOES HERE" \
  --timestamp bin/Release/net6.0/osx-x64/publish/HelloWorld.app</code></pre>

<p>You must use the entitlements option and the timestamp option. (You probably
need all the other options too, but those were the ones that I initially 
overlooked.)</p>

<p>You can run it again to make sure it still works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>

<p>(It didn’t for me for the longest time!)</p>
</div>

<div>
<h2>Construct the DMG</h2>

<p>Fire up the <em>DMG Canvas</em> application. (Yes, I know, I said I wanted this to
be a hands-off process. I believe <em>DMG Canvas</em> can be automated, but I haven’t
tried to figure out exactly how yet.)</p>

<p>The first time you open it up, go to the Preferences dialog and add your Apple ID
and a one-time password on the Notarization tab:</p>

<figure>
<img src="img/app-password.png" alt="Screen capture of the DMG Canvas notarization preferences tab."/>
</figure>

<p>This will enable signing and notarizing the DMG later.</p>

<p>On the main screen, add the application to the canvas. On the right hand
side, choose the second tab and select “Code Sign and Notarize” in the drop down.
You’ll have to specify the certificate you want to use, your Apple ID, and the primary
bundle ID. (I have no idea what that means in this context, but you have to put
something in there.)</p>

<figure>
<img src="img/app-main.png" alt="Screen capture of the DMG Canvas main screen with the notarization dialog shown on the right."/>
</figure>

<p>Click the “Build” button in the upper right corner, fill in the details,</p>

<figure>
<img src="img/app-build.png" alt="Screen capture of the DMG Canvas build dialog."/>
</figure>

<p>Hit Save and wait (nervously, and for quite a while) for the results!</p>

<figure>
<img src="img/app-wait.png" alt="Screen capture of the DMG Canvas modal dialog while it's building and notarizing the DMG file."/>
</figure>

<p>With luck, it all goes smoothly and you get back a signed, notarized DMG file.</p>

<p>There’s obviously more to be done in the DMG: it needs a background image, the
standard symlink to <code>/Applications</code> should be present, etc. But
I got a <a href="HelloWorld.dmg">working DMG</a> file out of it so, I’m
declaring victory for the moment.</p>

</div>
</div></content></entry><entry><title>SaxonCS for .NET 6</title><link href="https://blog.saxonica.com/norm/2022/08/09-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/08/09-net6.html</id><published>2022-08-09T17:06:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/08/09-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>We first published SaxonCS 11.x using .NET 5. Since then, .NET 5
has reached “end of life” and .NET 6 has become the recommended “long
term service” release of the .NET framework.</p>

<p>This puts us in a bit of a bind.</p>

<p>On the one hand, we try not to make disruptive changes in a
maintenance release if we can avoid it. Consequently, we’re
reluctant to suddenly require all of our customers who might be
building applications with SaxonCS 11.x to upgrade to .NET 6 just
because they want to install a new maintenance release.</p>

<p>On the other hand, it is becoming difficult to support .NET 5
applications in some environments. Ubuntu 22.04, for example, doesn’t
ship with the SSL libraries that .NET 5 requires. This makes it
difficult, perhaps impossible, to deploy SaxonCS 11.x built with .NET 5 in some
environments.</p>

<p>As a compromise, we’ve published a set of SaxonCS 11.4 releases
built against .NET 6. In order to distinguish them from their .NET 5
counterparts, we’ve named them “SaxonCS-b6”. The “b6” is both a nod
towards their .NET 6 provenance and a way of identifying them as
“beta”. There are no code changes in these builds, they should perform
exactly as the SaxonCS 11.4 release does, but they have not been
tested extensively.</p>

<p>They are identified as “SaxonCS-b6 11.4.1”. You can get the
platform-specific release artifacts from our downloads area and the
NuGet package has been uploaded and should be available soon.</p>

<p>(Speaking of NuGet, I should also confess that I published the
wrong SaxonCS 11.4.0 artifact. The SaxonCS 11.4.0 release on NuGet
will only work on 64 bit platforms. I republished the corrected,
architecture independent release as SaxonCS 11.4.1 yesterday.)</p>

<p>We’ll have to cross this bridge again if we publish another Saxon
11.x maintenance release. Please let us know what works for you, and what doesn’t.</p>

</div></content></entry><entry><title>Triaging the bug lists…</title><link href="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/06/15-saxonjs.html</id><published>2022-06-15T16:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>The very observant among you may have noticed me making a bunch of changes to
the
<a href="https://saxonica.plan.io/projects/saxon-js/issues">SaxonJS
issues list</a> this afternoon. We’ve started planning for SaxonJS 3.0 and we’ve made
a couple of early passes over the issues list.</p>

<p>Today, I tried to make the actual issues list reflect some of those
tentative plans. I’ve added “SaxonJS 3.0” as a milestone to a bunch of
issues and I’ve moved some of the priorities around.</p>

<p>Don’t read <em>too</em> much into that at the moment. For one
thing, there’s almost certainly too much on the list, for another
I expect we’ll do at least one more maintenance release of 2.x before we get to 3.0.
</p>

<p>But we have to start somewhere. Feedback welcome.</p>
</div></content></entry><entry><title>The pattern match="para except appendix//para"
      </title><link href="https://blog.saxonica.com/mike/2022/05/except-patterns.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2022/05/except-patterns.html</id><published>2022-05-26T15:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2022/05/except-patterns.html"><div xmlns="http://www.w3.org/1999/xhtml">
        <h1>The pattern <code>match="para except appendix//para"</code></h1>
        
        <p>If you saw this pattern in an XSLT stylesheet, I can guess your reaction: <i>I haven't
        seen a pattern like that before. Cool, a neat way of matching paragraphs that aren't in
        an appendix. Must remember that and use it myself.</i></p>
        
        <p>Sadly, it doesn't do what you think. Consider this input document:</p>
        
        <pre><code>
&lt;appendix id="A"&gt;
    &lt;section id="A.1"&gt;
        &lt;para&gt;Ipsum lorem.&lt;/para&gt;
    &lt;/section&gt;
&lt;/appendix&gt;                   
        </code></pre>
        
        <p>You'd probably be as surprised as I was to see that the <i>Ipsum lorem</i> paragraph in this
            example matches the pattern <code>para except appendix//para</code>.</p>
        
        <p>To see why this is true, go to the spec, section 5.5.3: </p>
        
        <p>An item <i>N</i> matches a pattern <i>P</i> if the following applies, where <i>EE</i> is the equivalent expression to <i>P</i>: 
            <i>N</i> is a node, and the result of evaluating the expression <code>root(.)//(EE)</code> with a singleton 
            focus based on <i>N</i> is a sequence that includes the node <i>N</i>.</p>
        
        <p>So, this is saying that a node matches the pattern if it is selected by the expression <code>root(.)//(para except appendix/para)</code>.
        Assuming that we're in a tree rooted at a document node, that means it must be selected by the expression 
        <code>/descendant-or-self::node()/(para except appendix//para)</code>.</p>
        
        <p>Now, in our example document, one of the nodes selected by <code>/descendant-or-self::node()</code> is the <code>section</code> element;
            and when we evaluate <code>(para except appendix//para)</code> starting at the <code>section</code> element, the first operand
            (<code>para</code>) selects our paragraph, and the second operand (<code>appendix//para</code>) doesn't select it, so
        the expression as a whole selects it, and therefore it matches the pattern.</p>
        
        <p>That's totally counter-intuitive, and it's certainly not what the Working Group intended. It's a nasty bug. So the question is,
        what can we do about it, given that this is a published spec and there are implementations out there, and user applications that
        depend on it?</p>
        
        <h2>Is there anything we can do about it?</h2>
        
        <p>Perhaps we should start by asking: what would we like the spec to say, if we had the opportunity to change it?</p>
        
        <p>Given that we already have a special rule for patterns with a top-level <code>union</code> operator (see §6.5 rule 2),
        we could add a special rule for patterns with a top-level <code>intersect</code> or <code>except</code>
            operator: a pattern of the form <code>A except B</code> matches an item if pattern <i>A</i> matches the item and 
            pattern <i>B</i> does not. (And analagously for <code>intersect</code>.)</p>
        
        <p>If that's what we think we need to do, that leaves two challenges:</p>
        
        <ul>
            <li>Changing the spec (given there is no longer a Working Group to maintain it).</li>
            <li>Changing the Saxon implementation.</li>
        </ul>
        
        <p>Starting with the second point, there are several possibilities:</p>
        
        <ul>
            <li>Just do it, and hope we don't break any existing applications.</li>
            <li>Support both the old and new semantics concurrently, with some mechanism for selecting which to use. (Which should
            be the default? We want new users not to fall into the elephant trap, but we also don't want to break working applications.)</li>
            <li>Deprecate the syntax, and provide new syntax for the new semantics (e.g. operators spelled <code>and-also</code> or
            <code>but-not</code>). Note however, that it's likely most applications currently using <code>except</code> in a pattern
            are using unproblematic patterns like <code>@* except @code</code>.</li>
        </ul>
        
        <p>The third option seems the most satisfactory. And that suggest a route forward for the spec: in XSLT 4.0, if and when we
        manage to get it defined, deprecate the <code>except</code> and <code>intersect</code> operators at the top level of a pattern,
        and replace them with new operators that have the expected intuitive semantics.</p>
        
    
    </div></content></entry></feed>