<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xml:lang="EN-us"><title>Saxonica Weblogs</title><link href="https://blog.saxonica.com/" rel="alternate" type="text/html"/><link href="https://blog.saxonica.com/atom.xml" rel="self"/><id>https://blog.saxonica.com/atom.xml</id><updated>2023-10-13T15:09:28.153084Z</updated><entry><title>Announcing SaxonJS 2.6!</title><link href="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html</id><published>2023-10-13T15:45:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS 2.6!</h1>

<p>The SaxonJS 2.6 maintenance release has been published. This is a
maintenance release for NodeJS and the browser. It fixes more than a
dozen bugs (including <a href="/norm/2023/10/06-no-longer-supported.html">that one</a>
about the spurious warning message). Highlights include:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5597">#5597</a>: ixsl:schedule-action fails without xsl:call-template</li>
<li><a href="https://saxonica.plan.io/issues/5714">#5714</a>: Update documentation to mention the backtick escaping mechanism</li>
<li><a href="https://saxonica.plan.io/issues/5739">#5739</a>: Space in string in text template not output as element content</li>
<li><a href="https://saxonica.plan.io/issues/5761">#5761</a>: fn:transform called from XPath with simplified stylesheet gives an error</li>
<li><a href="https://saxonica.plan.io/issues/5855">#5855</a>: map:merge with duplicates=combine gives wrong answer</li>
<li><a href="https://saxonica.plan.io/issues/5925">#5925</a>: Dynamic function lookup runs very slowly</li>
<li><a href="https://saxonica.plan.io/issues/5974">#5974</a>: SaxonJS documentation does not address namespaces</li>
<li><a href="https://saxonica.plan.io/issues/6037">#6037</a>: ixsl:schedule-action return objects</li>
<li><a href="https://saxonica.plan.io/issues/6107">#6107</a>: Can't use namespaced attributes on the root element of the body of a SaxonJS http-request</li>
<li><a href="https://saxonica.plan.io/issues/6134">#6134</a>: Partial function application call to function in ixsl namespace fails</li>
<li><a href="https://saxonica.plan.io/issues/6216">#6216</a>: base-uri() value empty for documents async-loaded with ixsl:schedule-action/@http-request</li>
<li><a href="https://saxonica.plan.io/issues/6219">#6219</a>: base-uri(ixsl:page()) returns empty value</li>
</ul>

<p>For a complete list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon-js/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_10&amp;op%5Bcf_10%5D=%3D&amp;v%5Bcf_10%5D%5B%5D=94&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxonica support site.</p>

<p>SaxonJS 2.6 was released on 13 October 2023. This release has been
uploaded to the usual locations on the Saxonica website and the NPM
repository.
For more details, please consult
<a href="https://www.saxonica.com/saxon-js/documentation2/index.html">the documentation</a>.
</p>

<p>If you encounter any issues with SaxonJS 2.6, please
<a href="https://saxonica.plan.io/projects/saxon-js/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>SaxonJS 2.5 ** NO LONGER SUPPORTED **</title><link href="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html</id><published>2023-10-06T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p><a href="https://en.wikipedia.org/wiki/TL;DR">TL;DR</a>, you can
ignore the message.</p>

<p>Several folks have noticed that, since about yesterday, if you run
the SaxonJS 2.5 <code>xslt3</code> Node.js command line processor, it
prints a scary “no longer supported” message.</p>

<p>Sorry. Our bad. The message is only informative and has no effect
on the performance of the processor.</p>

<p>We support SaxonJS releases for at least a year and a while back
(far enough back that I can’t easily determine when from the
repository history), we confidently assumed that we’d always do a
release at least once a year. So when you got that message, it was to
encourage you to upgrade.</p>

<p>Except this year, we published a whole bunch of other releases,
embarked on SaxonJS 3.0, shifted our web infrastructure around, and
did a bunch of other things. What we didn’t do was publish SaxonJS 3.0
within a year, and because we were heads-down on that, we didn’t
notice that we hadn’t published a SaxonJS 2.6 release within a year
either.</p>

<p>(It’s all a little embarrassing.)</p>

<p>We’ve fixed a handful of bugs in SaxonJS 2.5 since we shipped it,
and we’ve identified a slightly larger handful that we’d like to
consider fixing before we ship a SaxonJS 2.6 release. But we will ship
it, as quickly as practical.</p>

</div></content></entry><entry><title>Looking forward</title><link href="https://blog.saxonica.com/norm/2023/10/02-saxonica.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/02-saxonica.html</id><published>2023-10-02T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/02-saxonica.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As <a href="/mike/2023/10/eot.html">Mike says</a>, today is a big
day. It is an honour to be able to announce that I am taking on a new
role as CEO of Saxonica.</p>

<p>Let me start by offering huge congratulations and thanks to Mike and
Penny Kay, whose talent, commitment, and hard work have made Saxonica
into the successful company it is today.</p>

<p>I’m happy (and somewhat relieved!) to say that the Saxonica team
will continue to benefit from Mike’s experience for the foreseeable
future, as he moves to a new role as Director of Innovation. Working
part-time, Mike will continue to support customers and colleagues
alike, as well as ensuring that his in-depth knowledge of our code
base continues to be passed on to the rest of the Saxonica engineering
team, myself included!</p>

<p>Before I had the opportunity to join the company in 2020, I was
already an enthusiastic part of Saxonica’s user base. I know how
important our products are to our users; I <em>am</em> one of our users!</p>

<p>Working with this team of talented people to develop software that
makes a real contribution to the XML community has been a privilege.
Becoming Saxonica’s CEO is an even greater one. I am committed to
seeing Saxonica grow and prosper into the next decades, continuing the
reputation for excellence, innovation, and community-mindedness that
Mike has worked so hard to establish.</p>

</div></content></entry><entry><title>All Change at Saxonica</title><link href="https://blog.saxonica.com/mike/2023/10/eot.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/10/eot.html</id><published>2023-10-02T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/10/eot.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        
        <p>Today we are announcing a big change at Saxonica, but it's one 
            that we hope no-one will notice.</p>
        
        <p>Some of you may have noticed that I will be 72 in a couple of weeks, 
        and you may have been wondering how long I intended to continue. 
        Well, I'm still enjoying the challenge, and I'm not giving up just yet, 
        but I have been thinking for some time about how to move the company 
        into a position where it can thrive without me. I decided a while ago 
        that the best approach — in the interests of the staff and the user community — 
        was to move the ownership of the company into an Employee Ownership Trust, 
        and this has now been effected.</p>
        
        <p>What this means is that Saxonica is now owned by a Trust, which 
        has acquired a 100% shareholding from my wife Penny and myself. 
        The Trustees are Norm Tovey-Walsh, Sue Schreiber, and myself, and their 
        task is to appoint directors and approve any big decisions (such as 
        acquisitions). When making such decisions the Trust is obliged to 
        take into consideration the best interests of the staff and the user 
        community, including both paying customers and open-source users.</p>
        
        <p>Indeed, there's a specific clause in the trust deed noting that the company's
        software is used to deliver open data for the wider benefit of society at large,
        and the Trustees are required to take this into account.</p>
        
        <p>The most obvious change will be that Norm Tovey-Walsh is taking over as Chief Executive; 
        I will remain on the board (with the title "Director of Innovation"), 
        but Norm is now the boss. I can't think of anyone in the world who 
        is better qualified to steer the ship.</p>
        
        <p>Back at the start of 2020, before the pandemic, I was rather conscious that
        with several people approaching retirement age,
        the company was not in a good state to carry on without me; as a result any 
        acquisition could well have led to serious discontinuity for the user community, 
        and indeed for the future of the XML ecosystem of which we have become such 
        a central part. Since then, with Norm joining in a senior technical role, 
        with Ankita Mohinta taking over the marketing and commercial side so effectively, 
        and more recently with Matt Patterson joining O'Neil Delpratt and Debbie Lockett 
        on the development side, we now have a team that has an unmatched depth of talent. 
        This is reflected in excellent financial results over the last couple of years. 
        But it's also true that I know the innards of the software better than anyone, 
        and I don't intend to walk away from my focus on providing technical support 
        to customers, which is probably the part of the job that I enjoy the most.</p>
        
        <p>Penny is taking this opportunity to retire from her role as a director 
        and employee of the company, and this is a good opportunity to thank 
        her for her contribution. She may not have been very visible externally, 
        but she's done a lot of invaluable admin work behind the scenes, 
        and has been a constant source of good advice, most particularly 
        in helping to build a happy and productive team — especially 
        through the pandemic.</p>
        
        <p>I'm confident that through this adminstrative change, the company will 
        retain the core values that have been central to our success: innovation, 
        commitment to standards, outstanding technical support, honesty and integrity, 
        admitting to our mistakes when we make them, and above all being active 
        contributors to the thriving community without which we would not exist. 
        I hope to remain part of that for many years to come.</p>
    </div></content></entry><entry><title>XML Resolver 6.x SNAPSHOT</title><link href="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html</id><published>2023-09-14T14:55:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Under the hood, Saxon uses a “resolver” whenever it
attempts to load a document (a source document, stylesheet module,
unparsed text document, etc.). For the past few releases, the Java,
C#, and C products have been using resolvers based on the
<a href="https://xmlresolver.org/">XML Resolver APIs</a>.</p>

<p>I’ve been working on some improvements to those APIs. It’s likely
that the next releases of Saxon will be ship with XML Resolver
6.x.</p>

<p>If you’d like to
<a href="https://xmlresolver.org/6x-snapshot/">preview the planned changes</a>
and provide feedback about how they work in your applications, that’d
be grand.</p>

</div></content></entry><entry><title>New infrastructure…</title><link href="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/31-infrastructure.html</id><published>2023-08-31T13:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>New infrastructure…</h1>

<p>Just FYI, we’ve moved some things around. Some of our web
infrastructure, the way
<a href="https://www.saxonica.com/">www.saxonica.com</a>
and
<a href="https://dev.saxonica.com/">dev.saxonica.com</a>
are served, for example, has changed.
Plus we have some new infrastructure for
<a href="https://downloads.saxonica.com/">downloads</a>
and 
<a href="https://maven.saxonica.com/">Maven</a>.
</p>

<p>You aren’t supposed to notice. Or, at least, it isn’t supposed to
be broken. There are redirects in place for things we know moved and
a few very old things have fallen by the wayside.</p>

<p>If you see something that you think is broken, please tell us!</p>

</div></content></entry><entry><title>Announcing Saxon 11.6!</title><link href="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html</id><published>2023-08-24T13:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 11.6!</h1>

<p>The Saxon 11.6 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes
almost 40 issues reported since the 11.5 release.</p>

<p>Saxon 11.6 was released on 24 August 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub,
Maven, and NuGet. SaxonCS 11.6 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=93&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/11.6">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation11">the documentation</a>.
</p>

<p>If you encounter any issues with Saxon 11.6, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>ICU4J and SaxonJ EE</title><link href="https://blog.saxonica.com/norm/2023/08/24-icu4j.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/24-icu4j.html</id><published>2023-08-24T12:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/24-icu4j.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>ICU4J and SaxonJ EE</h1>

<p>We’ve recently discovered a small discrepancy in how we manage the
dependencies between <a href="https://unicode-org.github.io/icu/userguide/icu4j/">ICU4J</a>
and SaxonJ EE.</p>

<p>If you download the EE release from our website, you get a
distribution that includes SaxonJ EE, XML Resolver, ICU4J, and JLine
(used by Gizmo). The manifest in the SaxonJ EE jar file puts those
additional dependencies on your classpath automatically.</p>

<p>If you get the EE release from our Maven repository, ICU4J is an
<em>optional</em> dependency. So Maven won’t automatically put it on
your classpath. That’s the discrepancy.</p>

<p>Saxon EE will function without ICU4J, so it is technically
optional. I’m unsure which would be better: making it optional in both
places or non-optional in both places. Having it different certainly
seems like the worst choice and we should fix it.</p>

<p>In the short term, if you’re using Saxon EE and you want the
collations supported by ICU4J, make sure you’re also arranging for
ICU4J to be on your classpath.</p>

<p>We discovered this in the course of examining issue
<a href="https://saxonica.plan.io/issues/6183">#6183</a>. For slightly
complicated reasons involving our type hierarchy, if ICU4J is missing,
you can get an error message that suggests you’re running Saxon HE
even when you’re running EE. We’ll fix that too.
</p>

</div></content></entry><entry><title>XML doclet</title><link href="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html</id><published>2023-08-16T10:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Historically, we’ve used a customized version of
<a href="https://jeldoclet.sourceforge.net/">JELDoclet</a> to generate
XML from Javadoc. We use the XML to construct parts of our website.
The Javadoc APIs used by JELDoclet (and all of the other
Javadoc-to-XML doclets that I could lay my hands on) have been deprecated as of
Java 9 and will eventually be removed from the JDK.</p>

<p>On a whim last weekend, I took a stab at simply rebuilding an XML
doclet on top of the new Javadoc APIs. You can find the results of that
effort in the <a href="https://github.com/Saxonica/xmldoclet">xmldoclet</a> repository.
</p>

<p>It’s only version 0.1.0, but I think it’s broadly functional. It
handles all of the sources I’ve thrown at it, including the Saxon Java
products which are fairly large and complex. If you try it out and
discover that it produces output that seems incomplete or incorrect, please
<a href="https://github.com/Saxonica/xmldoclet/issues">open an issue</a>.</p>

<p>I can’t say I’m especially fond of the Javadoc APIs. In particular,
although you need to know what imports a class has in order to
correctly resolve the names of types, the public APIs provide no
access to that information. In the end, I applied an old maxim:</p>

<blockquote>
  <p><em>If brute force doesn’t work, you’re not applying enough brute force.</em></p>
</blockquote>

<p>I simply included the Java parser that we use for the transpiler and 
parse the sources myself.</p>

<p>Comments most welcome…</p>

</div></content></entry><entry><title>How Safe is your Schema?</title><link href="https://blog.saxonica.com/mike/2023/07/schema-safety.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/07/schema-safety.html</id><published>2023-07-22T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/07/schema-safety.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        <p>When you validate a document, you expect to set the rules for what it can contain.
        If you specify that your nesting box can only contain wrens and robins, you don't want
        any cuckoos in there.</p>
        
        <p>So you write a schema <code>nesting-box.xsd</code> like this:</p>
        
        <pre>&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    version="1.1"&gt;
    
    &lt;xs:element name="nesting-box" type="nesting-box-type"/&gt;
    
    &lt;xs:complexType name="nesting-box-type"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element ref="wren"/&gt;
            &lt;xs:element ref="robin"/&gt;
        &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
    
    &lt;xs:element name="wren" type="xs:string"/&gt;
    &lt;xs:element name="robin" type="xs:string"/&gt;
&lt;/xs:schema&gt;         
        </pre>
        
        <p>And you're now comfortable that any <code>&lt;nesting-box&gt;</code> that
            passes validation will look something like this:</p>
        
        <pre>&lt;nesting-box&gt;
   &lt;wren&gt;Nice!&lt;/wren&gt;
   &lt;robin&gt;Nicer!&lt;/robin&gt;
   &lt;robin&gt;Nicest!&lt;/robin&gt;
&lt;/nesting-box&gt;
        </pre>
        
        <p><b><i>You're wrong!</i></b></p>
        
        <p>The following document also passes validation:</p>
        
        <pre>&lt;nesting-box xsi:schemaLocation="cuckoo.ns cuckoo.xsd" 
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
   &lt;wren&gt;Nice!&lt;/wren&gt;
   &lt;robin&gt;Nicer!&lt;/robin&gt;
   &lt;robin&gt;Nicest!&lt;/robin&gt;
   &lt;cuckoo xmlns="cuckoo.ns"&gt;Horrid!&lt;/cuckoo&gt;
&lt;/nesting-box&gt;
        </pre>
        
        <p>Here <code>cuckoo.xsd</code> is another schema document, like this:</p>
        
        <pre>&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    targetNamespace="cuckoo.ns"
    version="1.1"&gt;
    
    &lt;xs:import schemaLocation="nesting-box.xsd"/&gt;
    
    &lt;xs:element name="cuckoo" type="xs:string"
       substitutionGroup="robin"/&gt;
    
&lt;/xs:schema&gt;
        </pre>
        
        <p>So you thought you were constraining what could appear in the document,
        and the user found a way past your defenses, submitting a document that
        your code probably can't handle.</p>
        
        <p>Saxon does allow you to disable use of <code>xsi:schemaLocation</code>,
        but it's enabled by default. I'm inclined to think the default needs to
        be changed.</p>
        
 
   
    </div></content></entry><entry><title>Announcing Saxon 12.3!</title><link href="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html</id><published>2023-07-04T17:50:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.3!</h1>

<p>The Saxon 12.3 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.2 release.</p>

<p>Saxon 12.3 was released on
<span title="Happy Independence Day to all our readers in the United States!">4 July 2023</span>.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.3 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.3">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6003">6003</a>:
    Inline function expression evaluated using xsl:evaluate</li>
<li><a href="https://saxonica.plan.io/issues/6018">6018</a>:
    UnicodeString - indexWhere does not start from the expected position</li>
<li><a href="https://saxonica.plan.io/issues/6022">6022</a>:
    Eager evaluation prematurely throws exception in analyze-string/non-matching-string.</li>
<li><a href="https://saxonica.plan.io/issues/6024">6024</a>:
    java.lang.NoClassDefFoundError: org/jdom2/Document</li>
<li><a href="https://saxonica.plan.io/issues/6033">6033</a>:
    Invalid warning about field in xs:key</li>
<li><a href="https://saxonica.plan.io/issues/6034">6034</a>:
    Problems with saxon:slice()</li>
<li><a href="https://saxonica.plan.io/issues/6036">6036</a>:
    Undeclaration of default namespace is not reported to a SAXResult</li>
<li><a href="https://saxonica.plan.io/issues/6040">6040</a>:
    Invalid warning displayed when map:contains() is used</li>
<li><a href="https://saxonica.plan.io/issues/6054">6054</a>:
    NamedNodeMap.getNamedItem throw UnsupportedOperationException</li>
<li><a href="https://saxonica.plan.io/issues/6059">6059</a>:
    Bug on "-" castable to xs:duration</li>
<li><a href="https://saxonica.plan.io/issues/6061">6061</a>:
    Crash in SaxonCS using ";n" in regex flags</li>
<li><a href="https://saxonica.plan.io/issues/6063">6063</a>:
    Incorrect attribute indentation</li>
<li><a href="https://saxonica.plan.io/issues/6067">6067</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6076">6076</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6085">6085</a>:
    Fixed an incomplete path in error messages in a validation report</li>
<li><a href="https://saxonica.plan.io/issues/6086">6086</a>:
    Updated the validation-reports.xsd</li>
<li><a href="https://saxonica.plan.io/issues/6091">6091</a>:
    Fixed an NPE in ContextStackIterator.getMajorCaller</li>
<li><a href="https://saxonica.plan.io/issues/6092">6092</a>:
    Fixed a bug in defaultOpenContent/@appliesToEmpty in XML Schema support</li>
<li><a href="https://saxonica.plan.io/issues/6093">6093</a>:
    Fixed a bug in a predicate with last()</li>
<li><a href="https://saxonica.plan.io/issues/6095">6095</a>:
    Fixed an index out-of-bounds exception when using an accumulator-rule match with variables</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/6017">6017</a>:
    Interrupted by signal 11: SIGSEGV when PyDocumentBuilder.set_schema_validator is set to None</li>
<li><a href="https://saxonica.plan.io/issues/6023">6023</a>:
    Thread 1 "python3" received signal SIGSEGV, Segmentation fault</li>
<li><a href="https://saxonica.plan.io/issues/6025">6025</a>:
    Python Saxon not releasing memory</li>
<li><a href="https://saxonica.plan.io/issues/6053">6053</a>:
    PydmNode object gets deleted before reuse</li>
<li><a href="https://saxonica.plan.io/issues/6075">6075</a>:
    Unable to read unicodeBlocks.xml file</li>
<li><a href="https://saxonica.plan.io/issues/6077">6077</a>:
    Axis Iterator required on the XdmNode</li>
<li><a href="https://saxonica.plan.io/issues/6078">6078</a>:
    Undefined reference to <code>dlopen@GLIBC_2.34</code></li>
<li><a href="https://saxonica.plan.io/issues/6084">6084</a>:
    Exception: Initial template parameters can only be of type PyXdmValue</li>
<li><a href="https://saxonica.plan.io/issues/6098">6098</a>:
    SaxonApiException::getSystemId() throws NullPointerException</li>
</ul>

<p>If you encounter any issues with Saxon 12.3, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Schema Modularity</title><link href="https://blog.saxonica.com/mike/2023/06/schema-modules.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2023/06/schema-modules.html</id><published>2023-06-20T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2023/06/schema-modules.html"><div xmlns="http://www.w3.org/1999/xhtml">

            

        <p>Saxon, ever since we first introduced schema awareness back in 2004, has always
        worked with a single global schema maintained at the level of the <code>Configuration</code>
        object. This article discusses the advantages and disadvantages of this approach, and
        looks at possible alternatives.</p>
        
        <p>Let's start by getting some terminology clear. A <b>schema</b>, in the terminology
        of the XSD specification, is a set of schema components (such as element declarations
        and type definitions). Don't confuse it with a <b>schema document</b>, which is an
        XML document rooted at an <code>xs:schema</code> element. A <b>schema</b>
        is what you get when you compile a collection of schema documents linked to each
        other using <code>xs:include</code> and <code>xs:import</code> declarations.</p>
        
        <p>Not every set of schema components constitutes a valid schema. Most obviously
        you can't have two different components (for example, two type definitions) with the
        same name, unless they are identical. The XSD specification is a bit fuzzy about what
        it means for two components to be identical.</p>
        
        <p>This means that in general, you can try and combine two schemas into one by
        taking their union, but the operation won't always succeed because the two
        schemas may be found to be inconsistent with each other.</p>
        
        <h2>The Global Schema</h2>
        
        <p>Saxon currently maintains a global schema at the level of the <code>Configuration</code>
        object. This means that every time you introduce a new schema, for example by
        compiling a schema-aware query or stylesheet that has an <code>import schema</code> declaration,
        or by validating a document against a schema loaded using the <code>SchemaManager</code>
        API, or referenced using <code>xsi:schemaLocation</code>, the schema components
        from that schema are added to the global pool, provided they are consistent with
        the declarations already present in the pool.</p>
        
        <p>These consistency checks are of two kinds:</p>
        
        <ul>
            <li><p>Firstly, the new components must not have names that clash with the old.
            You can't have two different types with the same name. To test whether two types
            are the same, Saxon basically checks that they came from the same place: the same
            line number in the same source schema document.</p></li>
            <li><p>Secondly, the new components must not change the semantics of existing
            components, if the existing components have already been used for validation purposes.
            The test whether components have been used is done at the level of a target
            namespace: if any declaration or definition in a target namespace has been
            used for validating a source document, or if it has been used when compiling
            a stylesheet or query, then the namespace is <b>sealed</b>, which means that its
            components must not be extended or redefined by any new components.
            We'll talk later about exactly what this means.</p></li>
        </ul>
        
        <p>The main benefit of the global schema approach is that you can always be sure
        that type annotations in validated instance documents are consistent with types
        that are mentioned (or inferred) in compiled queries and stylesheets. If a query
        is compiled believing that element <i>E</i> will always be empty, then you can be sure
        that every validated instance of <i>E</i> will be empty, because no-one is allowed, between
        compilation and validation, to add a type definition that extends or redefines <i>E</i>
        allowing it to be non-empty. That's the theory, anyway.    
        </p>
        
        <p>The most obvious <i>disadvantage</i> of the approach is that an application can't
        work with two different versions of the same schema. If you want to write a stylesheet
        that transforms input documents from <i>V1</i> to <i>V2</i> of the same schema, you
        can't import both versions into the same stylesheet, one to validate the input and one
        to validate the output. In fact, you can't even have both versions in the same
        <code>Configuration</code> — which means you can't process an input collection containing
        a mix of different versions (or if you do, you have to forgo validation).</p>
        
        <p>There are other less obvious disadvantages. One of them is revealed by a recent
        embarrassing bug where we discovered that schema compilation isn't thread safe: you
        can't reliably run two schema compilations within a single <code>Configuration</code>
        at the same time. We've patched that by adding some locking, but it's an imperfect
        solution because the lock is rather coarse-grained. We need to find a better solution,
        and that gives us an opportunity to re-examine the design and see whether we can fix some
        other long-standing issues at the same time.</p>
        
        <p>Another outstanding issue is a long-standing bug #3531, concerning a situation where
        two independently-loaded schemas <i>X</i> and <i>Y</i> both extend the same substitution
        group. This has remained outstanding because we have had no reports of users being affected
        by it; but it remains an unsatisfactory state of affairs.</p>
        
        <h2>The X+Y Problem</h2>
        
        <p>Suppose that <i>X</i> and <i>Y</i> are valid schemas. Then we've already seen
        that their union, which I will call <i>X+Y</i>, is not necessarily a valid schema;
        their declarations might be inconsistent. Apart from the obvious inconsistencies
        where <i>X</i> and <i>Y</i> contain different elements or types with the same name,
        there can be much more subtle inconsistencies:</p>
        
        <ul>
            <li><p><i>Y</i> might contain a type that redefines a type in <i>X</i>.</p>
            <p>The semantics of <code>xs:redefine</code> as defined in XSD are a bit
            fuzzy round the edges, but the effect is supposed to be global: if a type
            is redefined, then all references to that type are affected. Exactly what
            happens when the same type is redefined more than once isn't made clear.
            </p>
            <p>The introduction of <code>xs:override</code> in XSD 1.1 makes this
            problem even worse, because <code>xs:override</code> allows existing
            definitions to be changed in completely arbitrary ways.</p></li>
            <li><p><i>Y</i> might contain a type that extends a type in <i>X</i>,
            by allowing additional child elements or attributes. To be valid, 
            instances that use the extended type have to identify themselves
            with an <code>xsi:type</code> attribute, but this doesn't alter the
            fact that adding the extended type to the global schema makes some
            things valid that were previously invalid. It's bad news if a document
            that was invalid at breakfast time suddenly becomes valid at tea time
            because a new schema has been added to the <code>Configuration</code>.
            It's even worse news if the schema changes during the course of
            validating an input document. </p></li>
            <li><p><i>Y</i> might contain an element declaration that
            adds to the substitution group of an element defined in <i>X</i>.
            Again, this means that a document that was invalid when validated
            against schema <i>X</i> becomes valid when validated against
            <i>X+Y</i>.</p></li>
            <li><p><i>X</i> might contain a wildcard, for example 
                <code>&lt;xs:any processContents="lax"/&gt;</code>. Suppose
            an instance document matches this wildcard with an element
            named <i>W</i>, and is valid (under the rules for lax validation)
            because the schema contains no element declaration for <i>W</i>.
            Now schema <i>Y</i> comes along and adds a definition for
            element <i>W</i>, and suddenly our source document is no
            longer valid.</p></li>
        </ul>
        
        <p>It doesn't really help that all these situations are rare. Should the
        processor simply ignore the problem and hope it doesn't happen? For the first
        three cases above, Saxon prevents the situation occurring, which imposes an
        inconvenience on users who are actually doing something completely safe.
        For the final case (wildcards), Saxon ignores the problem, which creates
        the theoretical risk that queries and stylesheets are not type-safe: a document
        that has been validated against a type <i>T</i> might not satisfy all the contraints
        that the query or stylesheet processor assumes to be true for any valid instance
        of <i>T</i>.</p>
        
        <h2>An Alternative: Modular Schemas</h2>
        
        <p>Let's consider an alternative model, where instead of adding all schema
        components to a single global schema at <code>Configuration</code> level,
        we keep schemas independent and modular. So two stylesheets that import
        different schema documents have separate unrelated schemas, and there are
        no requirements that the two schemas should be consistent with each other.</p>
        
        <p>The challenge now is to ensure that a source document validated against
        a schema <i>S1</i> is consistent with a stylesheet that imports schema <i>S2</i>.
        If the two schemas are identical, there's no problem (and it's not too hard to
        detect that they are identical, for example if they load the same schema
        document as their starting point).</p>
        
        <p>But what if <i>S2</i> is a superset of <i>S1</i>? Suppose the document is
        validated against a schema with target namespace <i>X</i>, while the stylesheet
        has two <code>xsl:import-schema</code> declarations, for namespaces <i>X</i> 
        and <i>Y</i>? We're now back with the <i>X+Y</i> problem: a document that is valid
        against <i>X</i> is not necessarily valid against <i>X+Y</i>.</p>
        
        <p>It gets worse: if we have a pipeline of stylesheets, each of which imports
        schemas for both its input document and its output document, then the first
        stylesheet might import schemas for <i>X+Y</i>, and the second for <i>Y+Z</i>,
        and we need to be sure that when the first stylesheet validates its output against
        <i>X+Y</i>, the result will also be valid input against <i>Y+Z</i>.</p>
        
        <p>One possible solution here is to keep the imported schemas within a single
        stylesheet separate. Import one schema for the input, and another for the output,
        and don't require the two to be consistent. This also solves the problem of transforming
        from <i>V1</i> to <i>V2</i> of the same schema. So in our pipeline, the output
        of the first stylesheet would be validated not against <i>X+Y</i>, but merely
        against <i>Y</i>, which is the same schema used for the input of the second stylesheet.
        This would need language changes: <code>xsl:import-schema</code> declarations
        would need to identify which schema they belong to, and type names used in 
        <code>type</code> or <code>as</code> attributes would need to qualify the type
        name with a schema name.</p>
        
        <p>I've started doing work to allow free-standing schemas to be constructed
        and used for validation, independently of the <code>Configuration</code>.
        There are clearly cases where this is useful. However, there's a lot more
        work to be done on ensuring consistency of free-standing schemas, when a validated
        document is used as input to a schema-aware stylesheet or query. Expect a new
        class of (initially bewildering) error messages saying that element <i>E</i>
        is known to be valid against type <i>T</i> in schema <i>X</i>. but it isn't known
        to be valid against type <i>T</i> in schema <i>Y</i>. Hopefully these will be rare.</p>
        
        <h2>What about Wildcards?</h2>
        
        <p>I mentioned that there's an open issue with wildcards: if a schema type include
        a lax wildcard, then an element that's valid against that schema (because there's
        no element declaration matching the actual element name) can become invalid when
        more element declarations are added.</p>
        
        <p>This isn't the only issue with wildcards. XSD 1.1 allows you to say, for example
        <code>notQName="##defined"</code> which means that the name used for an element or
        attribute must be one that has no global declaration anywhere in the schema. That's
        another example of how adding new declarations to a schema can make existing content
        invalid.</p>
        
        <p>I think the answer to this problem is to interpret these definitions in the context
        of a "schema compilation unit". That is, when you compile a schema, 
            <code>notQName="##defined"</code> is interpreted as meaning "not a name used for
        a global element/attribute declaration in the that schema"; any
        names or declarations added later (by merging this schema with others) have no effect 
        on the meaning.</p>
        
        <p>This seems to solve the problem whether using a global schema or local free-standing
        schemas, and makes the two cases behave more consistently and predictably.</p>
        
    </div></content></entry><entry><title>Announcing Saxon 12.2!</title><link href="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html</id><published>2023-05-02T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.2!</h1>

<p>The Saxon 12.2 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.1 release.</p>

<p>Saxon 12.2 was released on 2 May 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.2 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86 64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.2">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5997">5997</a>:
    XSLT version for fn:transform</li>
<li><a href="https://saxonica.plan.io/issues/5996">5996</a>:
    Union types extension is available in Saxon-PE</li>
<li><a href="https://saxonica.plan.io/issues/5995">5995</a>:
    JavaDoc for XPathCompiler.setLanguageVersion should mention 4.0 is accepted</li>
<li><a href="https://saxonica.plan.io/issues/5978">5978</a>:
    StackOverflow during multithreaded schema processing</li>
<li><a href="https://saxonica.plan.io/issues/5970">5970</a>:
    DirectResourceResolver - unresolved XML classpath resources</li>
<li><a href="https://saxonica.plan.io/issues/5957">5957</a>:
    Disabling DTD validation</li>
<li><a href="https://saxonica.plan.io/issues/5953">5953</a>:
    JAXP ValidatorHandler throws an exception if the document is invalid</li>
<li><a href="https://saxonica.plan.io/issues/5952">5952</a>:
    unparsed-text-available throws an un-catchable IllegalCharsetNameException</li>
<li><a href="https://saxonica.plan.io/issues/5939">5939</a>:
    Using -u and a file: URI as the source argument for a query doesn't work</li>
<li><a href="https://saxonica.plan.io/issues/5937">5937</a>:
    Extension function gives NullPointerException in 12.1 when returning empty sequence</li>
<li><a href="https://saxonica.plan.io/issues/5931">5931</a>:
    Remove outdated xml-apis from the Maven artifacts</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5983">5983</a>:
    Saxon.C.API/SaxonApiException.cpp calculates wrong strlen</li>
<li><a href="https://saxonica.plan.io/issues/5954">5954</a>:
    The XPath 4.0 function parse-html not available</li>
<li><a href="https://saxonica.plan.io/issues/5944">5944</a>:
    set_cwd on PySchemaValidator seems to be ignored under some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/5941">5941</a>:
    SaxonC EE 12.1 Validate command line tool seems broken; doesn't give any output</li>
<li><a href="https://saxonica.plan.io/issues/5938">5938</a>:
    Trying to compile XSLT from file after setting allowedProtocols raises an NPE</li>
<li><a href="https://saxonica.plan.io/issues/5936">5936</a>:
    Fix exception reporting for Python on Windows</li>
<li><a href="https://saxonica.plan.io/issues/5934">5934</a>:
    Python wheels don’t work in a virtual environment on Windows</li>
</ul>

<p>If you encounter any issues with Saxon 12.2, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing Saxon 12.1!</title><link href="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html</id><published>2023-03-21T15:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.1!</h1>

<p>The Saxon 12.1 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the first Saxon 12.0 release,
in particular it now runs on Java 8.</p>

<p>Saxon 12.1 was released on 21 March 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.1 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.1">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5624">5624</a>:
    SaxonCS validate problem</li>
<li><a href="https://saxonica.plan.io/issues/5801">5801</a>:
    Dependency on axiom pom causes maven-dependency-plugin error</li>
<li><a href="https://saxonica.plan.io/issues/5805">5805</a>:
    Set locator to XmlProcessingIncident</li>
<li><a href="https://saxonica.plan.io/issues/5809">5809</a>:
    NPE on failure to load user-supplied collation class</li>
<li><a href="https://saxonica.plan.io/issues/5823">5823</a>:
    The implemented fn:slice function signature differs from the Saxonica docs and the specification</li>
<li><a href="https://saxonica.plan.io/issues/5824">5824</a>:
    SaxonJ 12.0 does not run with Java 8</li>
<li><a href="https://saxonica.plan.io/issues/5839">5839</a>:
    SaxonCS query problem</li>
<li><a href="https://saxonica.plan.io/issues/5852">5852</a>:
    XML Transformer generates invalid XHTML</li>
<li><a href="https://saxonica.plan.io/issues/5880">5880</a>:
    XQuery error with -p:on command line option</li>
<li><a href="https://saxonica.plan.io/issues/5884">5884</a>:
    SaxonCS 12 doesn't find elements in HTML DOM based on [@class = 'foo'] predicate</li>
<li><a href="https://saxonica.plan.io/issues/5906">5906</a>:
    C# context item absent</li>
<li><a href="https://saxonica.plan.io/issues/5908">5908</a>:
    saxon:for-each-member was dropped in Saxon 11</li>
<li><a href="https://saxonica.plan.io/issues/5910">5910</a>:
    Double reporting of template execution in timing profile</li>
<li><a href="https://saxonica.plan.io/issues/5911">5911</a>:
    SaxonCS crashes when package version number is wrong</li>
<li><a href="https://saxonica.plan.io/issues/5913">5913</a>:
    Tail recursion overwrites value of variable</li>
<li><a href="https://saxonica.plan.io/issues/5920">5920</a>:
    Java reflexive API fails to run, throws ClassNotFoundException</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5849">5849</a>:
    transform_to_file() in PyXslt30Processor not working.</li>
<li><a href="https://saxonica.plan.io/issues/5850">5850</a>:
    Error when compiling XSLT that uses "i" flag in regular expressions.</li>
<li><a href="https://saxonica.plan.io/issues/5856">5856</a>:
    Compilation/build issue PHP 8</li>
<li><a href="https://saxonica.plan.io/issues/5868">5868</a>:
    C samples don't build with Ubuntu</li>
<li><a href="https://saxonica.plan.io/issues/5869">5869</a>:
    For Windows SaxonC HE 12.0 there is no bat file to build the C samples</li>
</ul>

<p>If you encounter any issues with Saxon 12.1, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Brand new weblog, just like the old weblog</title><link href="https://blog.saxonica.com/norm/2023/03/16-weblog.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/03/16-weblog.html</id><published>2023-03-16T10:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/03/16-weblog.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As part of some infrastructure cleanup, we decided to change how
the weblog is managed. It’s now hosted on
<a href="https://blog.saxonica.com/">blog.saxonica.com</a>.</p>

<p>All of the old posts have been copied over and redirects are in
place. Along the way, I cleaned up a few broken links.</p>

<p>If anything seems broken, please do let me know!</p>

</div></content></entry><entry><title>SaxonC HE “11.99” pre-release</title><link href="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/23-saxon-c.html</id><published>2022-12-23T17:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Happy holidays everyone! Wishing you peace and joy in this festive season!</p>

<p>And toys.</p>

<p>Since we didn't get any releases out before Christmas, we've
packaged up a special treat for anyone who wants to play with
something new: SaxonC HE 12.0 in Python.</p>

<p>We've built and deployed the Python "wheels" for installing SaxonC
HE “11.99” (that's the 12.0 code base, but it's a test release so I
didn't want to use up one of the 12.x release numbers). You’ll find the
details at <a href="https://saxonica.com/saxon-c/1199/">https://saxonica.com/saxon-c/1199/</a>.
</p>

<p>If you decide to
<a href="https://en.wiktionary.org/wiki/kick_the_tires">kick the tyres</a><sup>†</sup>,
please do let us know how it goes. There’s still work to do with
installing and packaging, but we think the API is in good shape. (I
did notice that if you call <code>compile_stylesheet()</code> and the stylesheet
isn’t well formed, the call silently returns <code>None</code> instead of raising
an error. I’ve
<a href="https://saxonica.plan.io/issues/5781">reported that one</a>!)</p>

<p>I’ll probably check my email most days, but I can’t speak for
anyone else. Apologies if some of your feedback isn’t properly
addressed before the new year.</p>

<p>Once again, wishing you the happiest of holiday seasons!</p>

<div class="fn">
<hr/>
<sup>†</sup>That’s “tires” for my American friends.
</div>
</div></content></entry><entry><title>Signed, sealed, and delivered</title><link href="https://blog.saxonica.com/norm/2022/12/21-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/21-net6.html</id><published>2022-12-21T13:19:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/21-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Signed, sealed, and delivered</h1>

<p>I have been trying to build SaxonCS for .NET such that I could deliver it
on MacOS without warning messages for
<a href="https://github.com/dotnet/sdk/issues/24337">a long time</a>.
It has not been an easy or enjoyable adventure. Here are some
breadcrumbs for the next poor soul forced to tread down this path.</p>

<p>You can’t do this with .NET 5. That’s probably less important today
than it was when I started. I don’t understand the details, but something has
been fixed in .NET 6 that isn’t going to be backported to .NET 5. (There’s
a comment to that effect in an issue, but I can’t now locate that issue.)</p>

<p>There are several problems that have to be solved. The application
has to be built such that it will run when signed. All of the various pieces
have to be (correctly) signed. A DMG must be constructed to distribute
the application (maybe I don’t <em>have</em> to do this step, but it’s
reasonably what users expect). The <em>DMG</em> has to be signed.
<em>And</em> the whole thing has to be notarized by Apple so that
it will open without warnings.</p>

<div>
<h2>The objective</h2>
<p>A complete, hands off, CI-driven build of a C# application to produce
a MacOS DMG file that a user can open and use without any warnings about
unsigned code or potentially malicious applications.</p>
</div>

<div>
<h2>Prerequisites</h2>

<p>Before you begin, there are some things you have to have setup.</p>

<ul>
<li><p>You need <a href="https://dotnet.microsoft.com/en-us/">dotnet</a> 6
(or later, I assume, but we’re planning to ship Saxon 12 with .NET 6
so that’s what I’m using).</p></li>
<li><p>You need the
<a href="https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools">nuget</a>
command line tool. This is distinct from the <em>nuget</em> subcommand
of the <em>dotnet</em> tool. As far as I can tell, only the former
can actually install packages.</p>
<p>On a Mac, you need the Mono framework and some
other fiddling to make it work. Because that’s the way it is. The details
are outlined on the tools page linked above.</p>
</li>
<li><p>You’ll need
<a href="https://developer.apple.com/xcode/">XCode</a>. I’m using version 14.2.
I think you need to install the XCode command line tools and you need to run
XCode at least once, it does a bunch of initialization the first time it runs.
</p></li>
<li><p>You need an Apple developer account and you have to go through
the dance necessary to create a developer ID certificate. The certificate
and (at least some of) the certificate chain need to be downloaded and
installed in your keychain. I don’t remember the exact details, but I seem
to recall that it was spelled out <em>reasonably</em> well in the Apple developer
documentation.</p>
</li>
<li><p>I decided to use
<a href="https://www.araelium.com/dmgcanvas">DMG Canvas</a> to build the
DMG. In addition to building the DMG, this application does the sign
and notarize dance with Apple for me. $20 well spent, I think. I
assume these steps can be done manually, but I’m not inspired to try
to figure out how just at the moment.</p>
</li>
</ul>

<p>Use the <em>nuget</em> command to install <code>Dotnet.Bundle</code>:</p>

<pre><code>$ nuget install Dotnet.Bundle</code></pre>

<p>This package constructs the “bundle” of files that MacOS expects
for an application. (That’s the <code><em>application</em>.app</code> directory
and its descendants.)</p>
</div>

<div>
<h2>Application files</h2>

<p>Start with your application. In our case, this complex beast:</p>

<pre><code>using System;

namespace HelloWorld
{
    public class HelloWorld
    {
        public static void Main(string[] arg)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}</code></pre>

<p>You will also need a <code>.csproj</code> file. Here’s one that works
for me:</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;PlatformTarget&gt;AnyCPU&lt;/PlatformTarget&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
    &lt;PublishSingleFile&gt;true&lt;/PublishSingleFile&gt;
    &lt;SelfContained&gt;true&lt;/SelfContained&gt;
    &lt;PublishReadyToRun&gt;true&lt;/PublishReadyToRun&gt;
    &lt;RuntimeIdentifier&gt;osx-x64&lt;/RuntimeIdentifier&gt;
    &lt;UseHardenedRuntime&gt;true&lt;/UseHardenedRuntime&gt;
    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;IncludeNativeLibrariesForSelfExtract&gt;true&lt;/IncludeNativeLibrariesForSelfExtract&gt;
    &lt;IncludeSymbolsInSingleFile&gt;false&lt;/IncludeSymbolsInSingleFile&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup&gt;
    &lt;CFBundleName&gt;HelloWorld&lt;/CFBundleName&gt;
    &lt;CFBundleDisplayName&gt;HelloWorld&lt;/CFBundleDisplayName&gt;
    &lt;CFBundleIdentifier&gt;com.saxonica.helloworld&lt;/CFBundleIdentifier&gt;
    &lt;CFBundleVersion&gt;1.0.0&lt;/CFBundleVersion&gt;
    &lt;CFBundleShortVersionString&gt;1.0.0&lt;/CFBundleShortVersionString&gt;
    &lt;CFBundleExecutable&gt;HelloWorld&lt;/CFBundleExecutable&gt;
    &lt;CFBundleIconFile&gt;HelloWorld.icns&lt;/CFBundleIconFile&gt;
    &lt;NSPrincipalClass&gt;NSApplication&lt;/NSPrincipalClass&gt;
    &lt;NSHighResolutionCapable&gt;true&lt;/NSHighResolutionCapable&gt;
    &lt;NSRequiresAquaSystemAppearance&gt;false&lt;/NSRequiresAquaSystemAppearance&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="DotNet.Bundle" Version="0.9.13" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;</code></pre>

<p>The first property group specifies properties of the build, the second
defines how the application will be bundled, and the last item group is
necessary to make the bundler part of the build.</p>

<p>Notes:</p>

<ol>
<li>You must specify <code>net6</code> for the framework and create
a single file, self-contained application.</li>
<li>You must use the hardened runtime.</li>
<li>You must include native libraries for self extraction.</li>
<li>You must <em>not</em> include symbols in the single file, that’s an option that
apparently stopped working in .NET 5.</li>
<li>I created <code>HelloWorld.icns</code> from a PNG with ImageMagick.</li>
</ol>
</div>

<div>
<h2>Building the application</h2>

<p>Add <code>Dotnet.Bundle</code> to the project:</p>

<pre><code>$ dotnet add package Dotnet.Bundle</code></pre>

<p>(You only have to do this once.)</p>

<p>Build the application:</p>

<pre><code>$ dotnet msbuild -t:BundleApp -p:RuntimeIdentifier=osx-x64 -p:Configuration=Release</code></pre>

<p>You can run the bundled application to make sure it works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>
</div>

<div>
<h2>Sign the application</h2>

<p>Next we have to sign the application. But before we can do that, we have
to make an entitlements plist file. I called mine <code>entitlements.plist</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-library-validation&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-executable-page-protection&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;</code></pre>

<p>Now we can sign it:</p>

<pre><code>$ codesign --force --options runtime --entitlements ./entitlements.plist --deep \
  --sign "Developer ID Application: YOUR DEVELOPER ID GOES HERE" \
  --timestamp bin/Release/net6.0/osx-x64/publish/HelloWorld.app</code></pre>

<p>You must use the entitlements option and the timestamp option. (You probably
need all the other options too, but those were the ones that I initially 
overlooked.)</p>

<p>You can run it again to make sure it still works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>

<p>(It didn’t for me for the longest time!)</p>
</div>

<div>
<h2>Construct the DMG</h2>

<p>Fire up the <em>DMG Canvas</em> application. (Yes, I know, I said I wanted this to
be a hands-off process. I believe <em>DMG Canvas</em> can be automated, but I haven’t
tried to figure out exactly how yet.)</p>

<p>The first time you open it up, go to the Preferences dialog and add your Apple ID
and a one-time password on the Notarization tab:</p>

<figure>
<img src="img/app-password.png" alt="Screen capture of the DMG Canvas notarization preferences tab."/>
</figure>

<p>This will enable signing and notarizing the DMG later.</p>

<p>On the main screen, add the application to the canvas. On the right hand
side, choose the second tab and select “Code Sign and Notarize” in the drop down.
You’ll have to specify the certificate you want to use, your Apple ID, and the primary
bundle ID. (I have no idea what that means in this context, but you have to put
something in there.)</p>

<figure>
<img src="img/app-main.png" alt="Screen capture of the DMG Canvas main screen with the notarization dialog shown on the right."/>
</figure>

<p>Click the “Build” button in the upper right corner, fill in the details,</p>

<figure>
<img src="img/app-build.png" alt="Screen capture of the DMG Canvas build dialog."/>
</figure>

<p>Hit Save and wait (nervously, and for quite a while) for the results!</p>

<figure>
<img src="img/app-wait.png" alt="Screen capture of the DMG Canvas modal dialog while it's building and notarizing the DMG file."/>
</figure>

<p>With luck, it all goes smoothly and you get back a signed, notarized DMG file.</p>

<p>There’s obviously more to be done in the DMG: it needs a background image, the
standard symlink to <code>/Applications</code> should be present, etc. But
I got a <a href="HelloWorld.dmg">working DMG</a> file out of it so, I’m
declaring victory for the moment.</p>

</div>
</div></content></entry><entry><title>SaxonCS for .NET 6</title><link href="https://blog.saxonica.com/norm/2022/08/09-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/08/09-net6.html</id><published>2022-08-09T17:06:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/08/09-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>We first published SaxonCS 11.x using .NET 5. Since then, .NET 5
has reached “end of life” and .NET 6 has become the recommended “long
term service” release of the .NET framework.</p>

<p>This puts us in a bit of a bind.</p>

<p>On the one hand, we try not to make disruptive changes in a
maintenance release if we can avoid it. Consequently, we’re
reluctant to suddenly require all of our customers who might be
building applications with SaxonCS 11.x to upgrade to .NET 6 just
because they want to install a new maintenance release.</p>

<p>On the other hand, it is becoming difficult to support .NET 5
applications in some environments. Ubuntu 22.04, for example, doesn’t
ship with the SSL libraries that .NET 5 requires. This makes it
difficult, perhaps impossible, to deploy SaxonCS 11.x built with .NET 5 in some
environments.</p>

<p>As a compromise, we’ve published a set of SaxonCS 11.4 releases
built against .NET 6. In order to distinguish them from their .NET 5
counterparts, we’ve named them “SaxonCS-b6”. The “b6” is both a nod
towards their .NET 6 provenance and a way of identifying them as
“beta”. There are no code changes in these builds, they should perform
exactly as the SaxonCS 11.4 release does, but they have not been
tested extensively.</p>

<p>They are identified as “SaxonCS-b6 11.4.1”. You can get the
platform-specific release artifacts from our downloads area and the
NuGet package has been uploaded and should be available soon.</p>

<p>(Speaking of NuGet, I should also confess that I published the
wrong SaxonCS 11.4.0 artifact. The SaxonCS 11.4.0 release on NuGet
will only work on 64 bit platforms. I republished the corrected,
architecture independent release as SaxonCS 11.4.1 yesterday.)</p>

<p>We’ll have to cross this bridge again if we publish another Saxon
11.x maintenance release. Please let us know what works for you, and what doesn’t.</p>

</div></content></entry><entry><title>Triaging the bug lists…</title><link href="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/06/15-saxonjs.html</id><published>2022-06-15T16:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>The very observant among you may have noticed me making a bunch of changes to
the
<a href="https://saxonica.plan.io/projects/saxon-js/issues">SaxonJS
issues list</a> this afternoon. We’ve started planning for SaxonJS 3.0 and we’ve made
a couple of early passes over the issues list.</p>

<p>Today, I tried to make the actual issues list reflect some of those
tentative plans. I’ve added “SaxonJS 3.0” as a milestone to a bunch of
issues and I’ve moved some of the priorities around.</p>

<p>Don’t read <em>too</em> much into that at the moment. For one
thing, there’s almost certainly too much on the list, for another
I expect we’ll do at least one more maintenance release of 2.x before we get to 3.0.
</p>

<p>But we have to start somewhere. Feedback welcome.</p>
</div></content></entry><entry><title>The pattern match="para except appendix//para"
      </title><link href="https://blog.saxonica.com/mike/2022/05/except-patterns.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2022/05/except-patterns.html</id><published>2022-05-26T15:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2022/05/except-patterns.html"><div xmlns="http://www.w3.org/1999/xhtml">
        <h1>The pattern <code>match="para except appendix//para"</code></h1>
        
        <p>If you saw this pattern in an XSLT stylesheet, I can guess your reaction: <i>I haven't
        seen a pattern like that before. Cool, a neat way of matching paragraphs that aren't in
        an appendix. Must remember that and use it myself.</i></p>
        
        <p>Sadly, it doesn't do what you think. Consider this input document:</p>
        
        <pre><code>
&lt;appendix id="A"&gt;
    &lt;section id="A.1"&gt;
        &lt;para&gt;Ipsum lorem.&lt;/para&gt;
    &lt;/section&gt;
&lt;/appendix&gt;                   
        </code></pre>
        
        <p>You'd probably be as surprised as I was to see that the <i>Ipsum lorem</i> paragraph in this
            example matches the pattern <code>para except appendix//para</code>.</p>
        
        <p>To see why this is true, go to the spec, section 5.5.3: </p>
        
        <p>An item <i>N</i> matches a pattern <i>P</i> if the following applies, where <i>EE</i> is the equivalent expression to <i>P</i>: 
            <i>N</i> is a node, and the result of evaluating the expression <code>root(.)//(EE)</code> with a singleton 
            focus based on <i>N</i> is a sequence that includes the node <i>N</i>.</p>
        
        <p>So, this is saying that a node matches the pattern if it is selected by the expression <code>root(.)//(para except appendix/para)</code>.
        Assuming that we're in a tree rooted at a document node, that means it must be selected by the expression 
        <code>/descendant-or-self::node()/(para except appendix//para)</code>.</p>
        
        <p>Now, in our example document, one of the nodes selected by <code>/descendant-or-self::node()</code> is the <code>section</code> element;
            and when we evaluate <code>(para except appendix//para)</code> starting at the <code>section</code> element, the first operand
            (<code>para</code>) selects our paragraph, and the second operand (<code>appendix//para</code>) doesn't select it, so
        the expression as a whole selects it, and therefore it matches the pattern.</p>
        
        <p>That's totally counter-intuitive, and it's certainly not what the Working Group intended. It's a nasty bug. So the question is,
        what can we do about it, given that this is a published spec and there are implementations out there, and user applications that
        depend on it?</p>
        
        <h2>Is there anything we can do about it?</h2>
        
        <p>Perhaps we should start by asking: what would we like the spec to say, if we had the opportunity to change it?</p>
        
        <p>Given that we already have a special rule for patterns with a top-level <code>union</code> operator (see §6.5 rule 2),
        we could add a special rule for patterns with a top-level <code>intersect</code> or <code>except</code>
            operator: a pattern of the form <code>A except B</code> matches an item if pattern <i>A</i> matches the item and 
            pattern <i>B</i> does not. (And analagously for <code>intersect</code>.)</p>
        
        <p>If that's what we think we need to do, that leaves two challenges:</p>
        
        <ul>
            <li>Changing the spec (given there is no longer a Working Group to maintain it).</li>
            <li>Changing the Saxon implementation.</li>
        </ul>
        
        <p>Starting with the second point, there are several possibilities:</p>
        
        <ul>
            <li>Just do it, and hope we don't break any existing applications.</li>
            <li>Support both the old and new semantics concurrently, with some mechanism for selecting which to use. (Which should
            be the default? We want new users not to fall into the elephant trap, but we also don't want to break working applications.)</li>
            <li>Deprecate the syntax, and provide new syntax for the new semantics (e.g. operators spelled <code>and-also</code> or
            <code>but-not</code>). Note however, that it's likely most applications currently using <code>except</code> in a pattern
            are using unproblematic patterns like <code>@* except @code</code>.</li>
        </ul>
        
        <p>The third option seems the most satisfactory. And that suggest a route forward for the spec: in XSLT 4.0, if and when we
        manage to get it defined, deprecate the <code>except</code> and <code>intersect</code> operators at the top level of a pattern,
        and replace them with new operators that have the expected intuitive semantics.</p>
        
    
    </div></content></entry><entry><title>XML versus JSON: A Comparison using the XMark Benchmark</title><link href="https://blog.saxonica.com/mike/2022/05/xml-vs-json.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2022/05/xml-vs-json.html</id><published>2022-05-06T11:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2022/05/xml-vs-json.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
        
        <p>For many years we have used the XMark benchmark to check for performance
        regression between Saxon releases, and to evaluate the impact of internal
        changes on query performance.</p>
        
        <p>XMark originated with the MonetDB project and is described at
            <a href="https://projects.cwi.nl/xmark/">https://projects.cwi.nl/xmark/</a>. It consists
        of a scaleable XML data file (produced using a data generator), and a set of 20 XQuery queries
        to be run against that data file. We have run the data generator to produce files with
        nominal sizes of 100Kb, 1Mb, 4Mb, 10Mb, and 100Mb; we use the original queries as published,
        except for one or two small changes to correct errors in the original publication.</p>
        
        <p>Recently we have converted these data files to JSON, and have produced equivalent XQuery 3.1
        queries to deliver the same results as the original. The queries still produce XML rather than JSON
        output, so that we can compare the results; except in a few cases where large chunks of the original
        XML are copied to the output, which we cannot reproduce exactly because we don't have the original
        XML available. The results also differ because JSON maps don't retain order.</p>
        
        <p>In this article I will report first on the data conversion; then on the query conversion;
        and finally on performance results.</p>
        
        <h2>Converting the data</h2>
        
        <p>I didn't attempt to use any off-the-shelf XML-to-JSON conversion tools. My instinct is that they
        wouldn't have done a very good job, and I would have needed an XSLT transformation to refine the output
        anyway, so I decided to do the whole job using XSLT 3.0.</p>
        
        <p>The conversion stylesheet is not particularly interesting; in fact, it's rather tedious. A few points
        are worth mentioning:</p>
        
        <ul>
            <li><p>As mentioned in <a href="/mike/2021/06/arrays.html">What should
            we do about arrays?</a> the XSLT 3.0 spec is weak on capabilities for constructing arrays. This
            is the only area where we used Saxon extensions. I'm not convinced we yet have a perfect solution to this
            problem, and I've proposed some new ideas at <a href="https://github.com/qt4cg/qtspecs/issues/113">Constructing Arrays</a>.</p></li>
            <li><p>The XMark data files are mainly structured data, but there is some use of mixed content for narrative
            text. Mixed content is bad news for JSON. In real life, I would probably have handled this by embedding
            XML or HTML fragments within character strings in the JSON structure; but that seemed to be against
            the spirit of this exercise, so I instead expanded the node structure of the mixed content using JSON
            maps and arrays. As we'll see later, this had a severe effect on the ease of writing the queries
            and on their performance.</p></li>
            <li><p>Most structured data elements in the original file fall into two categories: elements
            with homogenous element content (multiple children all having the same name), and elements
            with heterogeous element content (multiple children with different names). These translate very
            naturally into JSON arrays and maps respectively. A few cases weren't quite so simple: for example
            the content model for <code>open_auction</code> has the form <code>(initial, bidder*, current,
            privacy, seller, ...)</code>. We handle this as if there were a wrapper element <code>bidders</code>
            around the sequence of <code>bidder</code> elements, so <code>open_auction</code> translates
            to a map, and <code>bidders</code> converts to an array. The names of elements within an array
            are generally dropped.</p></li>
            <li><p>There are a few attributes in the XML; these posed no particular problem.</p></li>
        </ul>
        
        <p>The nominal 10Mb file is actually 11,875,066 bytes in its XML form, and 10,464,266 bytes
        when converted to JSON, a reduction of 13%. Some of this difference (perhaps 200Kb) is due to 
        unnecessary whitespace in the XML; the rest is the overhead of element end tags.</p>
        
        <p>Parsing the XML and building a Saxon TinyTree took 353ms; parsing the JSON and building a structure
        of XDM maps and arrays took 636ms. I haven't attempted to assess the memory usage of the two data structures,
        but the maps and arrays are almost certainly larger. This is despite the fact that for maps derived directly
        from JSON parsing, we use a specialized representation of maps that optimizes for the fact that all keys
        are instances of <code>xs:string</code>, and therefore don't need to retain a type annotation.</p>
        
        <h2>Converting the Queries</h2>
        
        <p>The queries were converted by hand. Generally we tried to change the query so it continued to produce
        the same (XML) output as the original, for ease of comparing results; but for queries whose output copies
        sizeable chunks of the input XML, we abandoned this principle, instead replicating the intent of the query
        as far as we could.</p>
        
        <p>In most cases the conversion is very straightforward. For example, this is Q3:</p>
        
        <pre><code>
(: Q3. Return the IDs of all open auctions whose current
     increase is at least twice as high as the initial increase. :)

for    $b in /site/open_auctions/open_auction
where  $b/bidder[1]/increase * 2 &lt;= $b/bidder[last()]/increase
return &lt;increase first="{$b/bidder[1]/increase}"
                 last="{$b/bidder[last()]/increase}"/&gt;            
            
        </code>           
        </pre>
        
        <p>Which turns into:</p>
        <pre><code>
(: Q3. Return the IDs of all open auctions whose current
     increase is at least twice as high as the initial increase. :)

for    $b in ?open_auctions?*
where  $b?bidders?*[1]?increase *2 &lt;= $b?bidders?*[last()]?increase
return &lt;increase first="{$b?bidders?*[1]?increase}"
                 last="{$b?bidders?*[last()]?increase}"/&gt;
        </code>           
        </pre>
        
        <p>Some observations:</p>
        
        <ul>
            <li>We have to use <code>bidders?*[1]</code> rather than <code>bidders?1</code> because
            the latter expression throws a dynamic error (rather than returning an empty sequence)
            for an auction in which there are no bidders.</li>
            <li>We use <code>bidders?*[last()]</code> to get the last item in an array
            because converting the array to a sequence and using a filter is simpler than the alternative of
            writing <code>bidders?(array:size($b?bidders))</code>.</li>
            <li>The element name <code>site</code> is dropped because the JSON file is a map in which
            <code>open_auctions</code> is a top-level entry.</li>
            <li>The element name <code>open_auction</code> is dropped because the 
                <code>open_auctions</code> entry in the JSON contains an array of objects which do
                not need to be named; the <code>?*</code> in the JSON query corresponds to the
                <code>/open_auction</code> in the original.</li>
            <li>The JSON form introduces the name <code>bidders</code> as a wrapper for the group of
            individual <code>bidder</code> elements in the XML (which become anonymous in the JSON).</li>
        </ul>
        
        <p>Some specific difficulties that were encountered in converting other queries:</p>
        
        <ul>
            <li>Query Q4 looks for auctions where one bid differs from a previous bid, and for this
            purpose it uses the operator <code>&lt;&lt;</code> to test the relative order of two
            nodes in document order. The JSON model offers no equivalent. To solve this I introduced
            a higher-order function <code>index-where(array, predicate)</code> which returns the
            index positions in an array of members that satisfy the given predicate; it is then possible
            to find the required two items and compare their index positions.</li>
            <li>For any query using the mixed content <code>description</code> field, I needed to include
            a recursive function that reconstructs the <code>description</code> as text by flattening
            the arrays and maps that make it up. This is tedious and expensive. Queries that do a deep dive
            into the description, like looking for text marked up with <code>keyword</code> tags at any
            depth, are even more complicated. The <code>map:find</code> function sometimes does what's needed,
            but not if any context is involved (for example, finding a keyword that's nested within 
            <code>emph</code> markup).</li>
            <li>Debugging mistakes can be tricky. The diagnostics you get when you write 
                <code>?closed_auctions?annotation</code> instead of <code>?closed_auctions?*?annotation</code>
            aren't always helpful. I've tried to improve them. I've also proposed a language change so
            the first expression becomes valid: see <a href="https://github.com/qt4cg/qtspecs/issues/115">Lookup
            operator on arrays of maps</a>.</li>
            <li>It's very easy to forget that if <code>$A</code> is an array, then <code>$A[$index]</code>
            and <code>$A[condition]</code> are both valid, but neither means what you think, because they treat
            the array as a single item, not as a collection. With arrays derived from JSON, every member of the
            array (discounting any nulls) is a singleton, so you can always write <code>$A?*[$index]</code>
                or <code>$A?*[condition]</code> instead.</li>
        </ul>
        
        
        
        
        <h2>Query Performance</h2>
        
        <p>For most of the queries, the JSON query was a little slower than the XML version. 
            Queries in this category include: </p>
        
        <table>
            <thead>
                <tr>
                    <th>Query</th>
                    <th>XML timing (ms)</th>
                    <th>JSON timing (ms)</th>
                    <th>Ratio (%)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>q1</td>
                    <td>0.2649</td>
                    <td>0.6845</td>
                    <td>258%</td> 
                </tr>
                <tr>
                    <td>q2</td>
                    <td>0.4861</td>
                    <td>0.6588</td>
                    <td>136%</td> 
                </tr>
                <tr>
                    <td>q5</td>
                    <td>0.2711</td>
                    <td>0.3190</td>
                    <td>118%</td> 
                </tr>
                <tr>
                    <td>q8</td>
                    <td>1.9359</td>
                    <td>2.3572</td>
                    <td>122%</td> 
                </tr>
                <tr>
                    <td>q10</td>
                    <td>11.3329</td>
                    <td>14.3428</td>
                    <td>127%</td> 
                </tr>
                <tr>
                    <td>q11</td>
                    <td>93.5360</td>
                    <td>144.1105</td>
                    <td>154%</td> 
                </tr>
                <tr>
                    <td>q16</td>
                    <td>0.4183</td>
                    <td>0.8489</td>
                    <td>203%</td> 
                </tr>
                <tr>
                    <td>q17</td>
                    <td>0.5964</td>
                    <td>0.8887</td>
                    <td>149%</td> 
                </tr>
                <tr>
                    <td>q20</td>
                    <td>1.2380</td>
                    <td>2.2084</td>
                    <td>178%</td> 
                </tr>
            </tbody>
        </table>
        
        <p>How do we account for these numbers? My theory (based on gut feeling) is that the XML queries
        are faster because of the use of integer fingerprints for name matching in the TinyTree. Look at
        q1, for example, which in the original is:</p>
        
        <p>Q1: <code>for $b in /site/people/person[@id="person0"] return $b/name</code></p>
        
        <p>(The XMark queries were written by someone who felt that everything ought to be written
        as a FLWOR expression. It can of course be simplified to a simple XPath. I'm surprised
        they didn't use a <code>where</code> clause...)</p>
        
        <p>The child and attribute axis steps here (<code>child::people</code>, <code>child::person</code>, 
            <code>attribute::id</code>etc) are implemented
        in the TinyTree by a sequential search of node entries testing each one for an integer namecode. By contrast
        the JSON equivalent is:</p>
        
        <p>Q1: <code>for $b in ?people?*[?id="person0"] return $b?name</code></p>
        
        <p>and this involves string-based lookups in a hash table. Because the fan-out is fairly small, the
        sequential search wins.</p>
        
        <p><i>To test this theory, I ran the XML queries using DOM rather than TinyTree as the tree model. Navigation
            in the DOM uses string matching on element and attribute names. The DOM queries
        are dramatically slower than the TinyTree: q1: 0.2947 q2: 9.1684 q5: 5.1841 q8: 49.4798 q10: 116.8379 
        q11: 402.2151 q16: 6.5635 q17: 44.1887 q20: 179.2854.</i></p>
        
        <p>In the next group of queries, the JSON query is slightly faster:</p>
        
        <table>
            <thead>
                <tr>
                    <th>Query</th>
                    <th>XML timing (ms)</th>
                    <th>JSON timing (ms)</th>
                    <th>Ratio (%)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>q3</td>
                    <td>1.3507</td>
                    <td>1.2656</td>
                    <td>94%</td> 
                </tr>
                <tr>
                    <td>q6</td>
                    <td>0.2870</td>
                    <td>0.0316</td>
                    <td>11%</td> 
                </tr>
                <tr>
                    <td>q9</td>
                    <td>3.2959</td>
                    <td>2.2320</td>
                    <td>68%</td> 
                </tr>
                <tr>
                    <td>q12</td>
                    <td>32.3911</td>
                    <td>29.2320</td>
                    <td>90%</td> 
                </tr>
                <tr>
                    <td>q18</td>
                    <td>0.3134</td>
                    <td>0.2865</td>
                    <td>91%</td> 
                </tr>
                <tr>
                    <td>q19</td>
                    <td>4.9937</td>
                    <td>4.6699</td>
                    <td>93%</td> 
                </tr>
            </tbody>
        </table>
        
        <p>Query q6 is clearly an outlier. This query counts descendants: the original XML formulation is:</p>
        
        <p>Q6: <code>for $b in /site/regions/* return count ($b//item)</code></p>
        
        <p>As it happens, <code>item</code> elements cannot appear at any depth, so the return clause
        could equally have been written <code>count($b/item)</code>. In writing the JSON query I took
        advantage of this knowledge, and wrote the query as:</p>
        
        <p>Q6: <code>map:for-each(?regions, function($k, $v){a:size($v)})</code></p>
        
        <p>This runs faster firstly because of this simplification, and secondly because the size of a map
        can be determined in constant time, whereas counting the number of children of an element requires
        actually scanning them.</p>
        
        <p>For the other queries where there is a small speed-up, the cause is less obvious, but it's usually
        possible to hazard a guess. Some of them, for example, involve arithmetic and numeric comparisons,
        and the JSON queries in such cases avoid the overhead of converting strings to numbers on the fly
        (instead, the conversion is done during JSON parsing). We know from profiling that these conversions,
        especially if they occur in a filter predicate, can dominate query execution time.</p>
        
        <p>For the final group of queries, the JSON performance is chronically worse:</p>
        
        <table>
            <thead>
                <tr>
                    <th>Query</th>
                    <th>XML timing (ms)</th>
                    <th>JSON timing (ms)</th>
                    <th>Ratio (%)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>q7</td>
                    <td>1.0953</td>
                    <td>87.4869</td>
                    <td>7987%</td> 
                </tr>
                <tr>
                    <td>q13</td>
                    <td>0.3635</td>
                    <td>15.1646</td>
                    <td>4171%</td>
                </tr>
                <tr>
                    <td>q14</td>
                    <td>12.4252</td>
                    <td>138.0764</td>
                    <td>1111%</td>
                </tr>
            </tbody>
        </table>
        
        <p>These three queries all involve access to the <code>description</code> of an <code>item</code>, which in the XML representation
        is a mixed-content field (text with inline markup). As remarked earlier, this has been represented in JSON by expanding the
        node tree to a structure of arrays and singleton maps. As a result, a query like this one:</p>
        
        <p>Q14: <code>for $i in /site//item where contains ($i/description,"gold") return ($i/name, $i/description)</code></p>
        
        <p>becomes thoroughly contorted (and inefficient) in the JSON representation: it is necessary to write a recursive function
        that assembles the description (sans markup) as a string before executing the <code>contains()</code> function. Even then,
        the JSON query doesn't faithfully reproduce the original, because it outputs the description as a string, losing the internal
        markup.</p>
        
        <h2>Conclusions</h2>
        
        <p>First, if you've got mixed content (text with inline markup) then you probably don't want to be using JSON. If you must
        use JSON, use XML or HTML within character strings in cases where inline markup is needed.</p>
        
        <p>Secondly, for structured data it's a fairly even match; the differences aren't large enough to be critical for most
        applications. In Saxon, XML does slightly better on balance. This assumes, however, that for the XML case you are using 
        an efficient model like the Saxon TinyTree, rather than a general-purpose DOM.</p>
        
        <p>We found a few cases where the expressive power of XQuery 3.1 for querying JSON structures has gaps and omissions.
        Notably, searching for descendants in the tree is difficult; operations based on ordering of items within arrays are
        also tricky.</p>
            
    </div></content></entry><entry><title>SaxonJS with web components</title><link href="https://blog.saxonica.com/norm/2022/04/19-shoelace.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/04/19-shoelace.html</id><published>2022-04-19T18:43:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/04/19-shoelace.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>I haven’t worked with
<a href="https://en.wikipedia.org/wiki/Web_Components">web components</a> very much,
though they’ve been on my “must explore more” list for a while. A couple of days ago,
I stumbled across <a href="https://shoelace.style/">Shoelace</a>, “a forward-thinking
library of web components.”</p>

<p>“That’d just work in SaxonJS, right?”, I asked myself.</p>

<p>Yep. I updated the
<a href="https://github.com/Saxonica/helloWorldJS">helloWorldJS</a> repository
that I created a while back to demonstrate it.</p>

<p>The new work is in the <code>shoelace</code> branch.</p>

<p>There’s not much different, really.</p>

<ol>
<li>The HTML file includes the
Shoelace scripts and styling from its CDN. (A more robust application
would want local copies, but this is just a toy.)</li>
<li>Instead of using a <code>button</code> element, we use the Shoelace
web-component: <code>&lt;sl-button&gt;Click me&lt;/sl-button&gt;</code>.
</li>
<li>The match pattern for the onclick handler changes to
<code>match="sl-button"</code>.</li>
</ol>

<p>That’s pretty much all there is to it. Neat. I must try out some more web
components when I have a chance. In principle, the seem like a really good idea.</p>

</div></content></entry><entry><title>What should we do about Arrays?</title><link href="https://blog.saxonica.com/mike/2021/06/arrays.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2021/06/arrays.html</id><published>2021-06-27T15:34:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2021/06/arrays.html"><div xmlns="http://www.w3.org/1999/xhtml">
        
            
            <p>Arrays were added to the data model for XPath 3.1 (and XQuery 3.1): the main motivation 
                was the need for faithful representation of JSON data structures, while a secondary 
                consideration was the long-standing requirement for "sequences of sequences".
            </p>
            <p>Processing support for arrays in the current languages is rather limited. There's 
                a basic set of functions available, but not much else. Support in XSLT 3.0 is 
                particularly weak, because XSLT 3.0 was primarily designed to work with XPath 3.0 
                (which didn't have arrays), with 3.1 support added as something of an afterthought.
            </p>
            <p>This note surveys where the gaps are, and how they should be filled.
            </p>
            <p>Many of the complications in processing arrays arise because the members of an array 
                can be arbitrary sequences, not just single items. There were two reasons for this 
                design. One is simply orthogonality: the principle of no unnecessary restrictions. 
                The other was support for the JSON null value, which maps naturally to an empty 
                sequence in XDM, but only if an array is allowed have an empty sequence as one of its members.
            </p>
            
            <h2>Array Construction</h2>
            
            <p>XPath 3.1 offers two constructs for creating arrays: the "square" and "curly" 
                constructors. Neither is completely general. The "square" constructor (for 
                example <code>[$X, $Y, $Z]</code>) can construct an array with arbitrary values as its 
                members, but the size of the array needs to be known statically. The "curly" 
                constructor (for example <code>array{$X, $Y, $Z}</code>) can construct an array whose size 
                is decided dynamically, but the members of the array must be singleton items 
                (not arbitrary sequences). The WG failed to come up with a construct for creating 
                an array where both the size of the array and the size of each member are 
                determined dynamically. The only way to achieve this is with a fairly convoluted 
                use of functions such as <code>array:join()</code>.
            </p>
            <p>XSLT 3.0 has no mechanism for array construction. An <code>xsl:array</code> instruction has 
                been proposed, and is prototyped as <code>saxon:array</code> in current Saxon releases; 
                but the difficulty is in defining the detail of how it should 
                work. It makes sense for it to enclose a sequence constructor, so instructions 
                like <code>xsl:for-each</code> and <code>xsl:choose</code> can be used when building the content. 
                But sequence constructors deliver sequences of items, not sequences of sequences.
                So the current proposal for <a href="https://qt4cg.org/branch/master/xslt-40/Overview.html#array-construction">XSLT 4.0</a>
                envisages an <code>xsl:array-member</code> instruction that wraps a sequence as a zero-arity
                function. The problem with this is that the mechanism is transparent yet arbitrary;
                it looks like (and is) a kludge.
            </p>
            <h2>Array Processing</h2>
            
            <p>Similarly, there are limited options for processing of arrays. There's no 
                equivalent of the "for" clause in FLWOR expressions that binds a variable 
                to each member of an array in turn. The closest things on offer are the 
                <code>array:filter()</code> and <code>array:for-each()</code> higher order functions – which are 
                more useful in XQuery than in XSLT, because of the difficulty in XSLT 
                of writing an anonymous function that constructs new XML element nodes. 
                XSLT in particular relies heavily (in constructs such as <code>xsl:apply-templates</code>, 
                <code>xsl:for-each</code>, <code>xsl:iterate</code>, and <code>xsl:for-each-group</code>) on binding values implicitly 
                to the context item. But the context item is an item, not an arbitrary value, 
                so binding members of arrays to the context item isn't an option.
            </p>
            <p>Generalizing "." to represent an arbitrary value rather than a single item seems 
                an attractive idea, but it's very hard to do without breaking a lot of existing code.
            </p>
            <p>Iterating over an array and binding each member to a variable works well in XQuery,
            where adding a "for member" clause to FLWOR expressions works cleanly enough. But there's
            lots of other functionality for processing sequences that can't be translated easily
            into equivalent mechanisms for arrays, especially in XSLT.</p>
        
            <h2>Parcels</h2>
            
            <p>It seems that a solution for both array construction and array processing is to find 
                a way to pack an arbitrary sequence into a single item. We'll refer to a "sequence 
                packed into an item" as a parcel. We can then construct an array from a sequence 
                of parcels, and we can decompose an array into a sequence of parcels, allowing 
                both operations to be implemented using all the existing machinery for handling 
                sequences. 
            </p>
            <p>It seems that four operations are sufficient to fill the processing gap:
            </p>
            <ul><li>Wrap a sequence as a parcel</li>
            <li>Unwrap a parcel as a sequence</li>
            <li>Construct an array from a sequence of parcels</li>
            <li>Decompose an array into a sequence of parcels</li>
            </ul>
            <p>So four functions should do the job: <code>parcel(item()*) =&gt; P</code>, 
                <code>unparcel(P) =&gt; item()*</code>, <code>array:of(P*) as array(*)</code>, <code>array:members(array(*)) as P*</code>, 
                where <code>P</code> is the item type of a parcel. Of course, we can also add XSLT or XQuery syntactic 
                sugar on top of these building blocks.
            </p>
            <p>We now have to address the question: what kind of item is a parcel? Is it represented using something we 
                already know and love (like an array, or a zero-arity function) or is it something new? How should 
                the type of a parcel be represented in type signatures, and what operations (apart from the above four) 
                should be available on them?
            </p>
            <p>I'm beginning to come to the conclusion that the type safety that comes from treating a parcel as a 
                new kind of item justifies the extra complexity in the type system. If we reuse an existing 
                kind of item (for example, zero-arity functions), then there's always going to be confusion about 
                whether items of that type are to be treated as parcels or as their "ordinary selves".
            </p>
            <p>However, I'm reluctant to add yet another fundamental type. We can't keep adding fundamental 
                types, and new syntax, every time we need something new (cf my Balisage 2020 paper on adding 
                promises). Can't we make the type system more extensible?
            </p>
            <p>Pro tem, I suggest we build on the concept of "extension objects" defined in §25.1.3 of 
                the XSLT specification. These are intended as opaque objects that can be returned by 
                one extension function and supplied to another. This concept should really be defined 
                in XDM rather than in XSLT. We should add that an "extension object" may be an instance 
                of an "extension type", and that extension types are denoted in the ItemType syntax by a 
                QName (that is, the same syntax as atomic types), with the QName being made known to the 
                processor in some implementation-defined way. Then we reserve a namespace URI sys for 
                "built in extension types", and define sys:parcel as such a type.
            </p>
            
    </div></content></entry><entry><title>Saxon-JS 2.2</title><link href="https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html</id><published>2021-05-11T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Saxon-JS 2.2
has been published on
<a href="https://saxonica.com/saxon-js/">Saxonica.com</a> and to the
<a href="https://www.npmjs.com/package/saxon-js">npm registry</a>!</p>

<p>This is a maintenance release that fixes a few bugs. The big one, to my mind, is resolving
the “global object” bug in Node.js. Previous releases of Saxon-JS always
created a global object named “<code>SaxonJS</code>”. This isn’t best practice on
Node.js and interfered with some platforms like
<a href="https://en.wikipedia.org/wiki/Electron_(software_framework)">Electron</a>
and <a href="https://en.wikipedia.org/wiki/Webpack">Webpack</a>.</p>

<p>Starting with 2.2, on Node.js, the global object no longer gets created.
If you’ve consistently used</p>

<pre><code>const SaxonJS = require('saxon-js');</code></pre>

<p>to load Saxon-JS, you’ll be fine. If you’ve used some other name
for the object, make sure that you refer to Saxon-JS exclusively by
that name. For example:</p>

<pre><code>const <b>sjs</b> = require('saxon-js');
const six = <b>sjs</b>.XPath.evaluate("3+3");
console.log(`six = ${six}`)</code></pre>

<p>We fixed a few other bugs as detailed in the
<a href="https://www.saxonica.com/saxon-js/documentation/index.html#!changes">change history</a>.
Thanks to everyone who took the time to report them!
</p>

</div></content></entry><entry><title>Saxon-CS says Hello World</title><link href="https://blog.saxonica.com/mike/2021/03/saxon_cs_hello_world.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2021/03/saxon_cs_hello_world.html</id><published>2021-03-22T10:34:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2021/03/saxon_cs_hello_world.html"><div xmlns="http://www.w3.org/1999/xhtml">
        <p>The Saxon product on .NET has been living on borrowed time for a while.
        It's built by converting the Java bytecode of the Java product to the 
        equivalent .NET intermediate language, using the open-source IKVM converter
        produced by Jeroen Frijters. Jeroen after many years of devoted service
        decided to give up further development and maintenance of IKVM a few
        years ago, which didn't immediately matter because the product worked
        perfectly well. But then Microsoft in 2019 announced that future
        .NET developments would be based on .NET Core, and IKVM has never supported
        .NET Core, so we clearly had a problem.</p>
        <p>There's a team attempting to produce a fork of IKVM that supports
        the new .NET, but we've never felt we could put all our eggs in that basket.
        In any case, we also have performance problems with IKVM that we've never
        managed to resolve: some applications run 5 times slower than Java, and
        despite a lot of investigation, we've never worked out why.</p>
        <p>So we decided to try a new approach, namely Java-to-C# source code
        conversion. After a lot of work, we've now achieved successful compilation
        and execution of a subset of the the code, and for the first time this
        morning, Saxon-CS successfully ran the minimal "Hello World" query.</p>
        <p>We're a long way from having a product we can release, but we can now
        have confidence that this approach is going to be viable.</p>
        <p>How does the conversion work? We looked at some available tools,
        notably the product from Tangible Solutions, and this gave us many
        insights into what could be readily converted, and where the remaining
        difficulties lay; it also convinced us that we'd be better off writing
        our own converter.</p>
        <p>The basic workflow is:</p>
        <ol>
            <li>Using the open source JavaParser library, parse the Java code, generate
            an XML abstract syntax tree for each module, and annotate the syntax tree with type information
            where needed.</li>
            <li>Using XSLT code, do a cross-module analysis to determine which methods override each other,
            which have covariant return types, etc: information needed when generating the C# code.</li>
            <li>Perform an XSLT transformation on each module to generate C# code.</li>           
        </ol>
        <p>We can't convert everything automatically, so there's a range of strategies we use to
        deal with the remaining issues:</p>
        <ul>
            <li>Some constructs can simply be avoided. We have trouble, for example, converting
            Java method references like <code>Item::toString</code>, because it needs a fair bit of 
            context information to distinguish the various possible translations. But it's no great
            hardship to write the Java code a different way, for example as a lambda expression
            <code>item -&gt; item.toString()</code>. Another example is naming conflicts: C# doesn't
            allow you, for example, to have a variable with the same name as a method in the containing
            class. It's no hardship to rename the variables so the problem doesn't arise.</li>
            <li>We can use Java annotations to steer the conversion. For example, sometimes
            we want to generate C# code that's completely unrelated to the Java code. We can move
            this code into a method of its own, and then add an annotation <code>@CSharpReplaceMethodBody</code>
            which substitutes different code for the existing method body. The annotation is copied
            into the XML syntax tree by the JavaParser, and our converter can pick it up from there.</li>
            <li>We already have a preprocessor mechanism to mark chunks of code as being excluded from
            particular variants of the product (such as Saxon-HE or Saxon-PE). We can make further use
            of this mechanism. However, it's limited by the fact that the code, prior to preprocessing,
            must be valid Java so that it works in the IDE.</li>
        </ul>
        <p>The areas that have caused most trouble in conversion are:</p>
        <ul>
            <li>Inner classes. C# has no anonymous inner classes, and its named inner classes correspond
            only to Java's static inner classes. Guided by the way the Tangible converter handles these,
            we've found a way of translating them that handles most cases, and we've added Java annotations
            that provide the converter with extra information where additional complexities arise.</li>
            <li>Enumeration types. C#'s enumeration types are much more limited than the equivalent in
            Java, because enumeration constants can't have custom methods associated with them. We distinguish
            three kinds of enumeration classes: singleton enumerations (used to implement classes that will
            only have a single instance); simple enumerations with no custom behaviour, which can be translated
            to C# enumerations very directly, and more complex enumerations, that result in the generation
            of two separate C# classes, one to hold the enumeration constants, the other to accommodate the
            custom methods.</li>
            <li>Generics. C# is much stricter about generic types than Java, because the type information
            is carried through to run-time, whereas in Java it is used only for compile-time type checking,
            which can be subverted by use of casting. So the rule in C# is, either use generics properly,
            or don't use them at all. We anticipated some of these issues a year or two ago when we
            first started thinking about this project: see 
                <a href="/mike/2020/01/java-generics-revisited.html">Java Generics Revisited</a>.
            The result is that the classes representing XDM sequences and sequence iterators no longer use
            generics, which has saved a lot of hassle in this conversion. But there are still many
            problems, notably (a) the type inference needed to support Java's diamond operator (as in 
            <code>new ArrayList&lt;&gt;()</code>, where an explicit type parameter is needed in C#),
            and (b) the handling of covariant and contravariant wildcards (<code>? extends T</code>,
            <code>? super T</code>.)</li>
            <li>Iterators and enumerators. A <code>for-each</code> loop in Java (<code>for (X x : collection)</code>)
                relies on the <code>collection</code> operand implementing the <code>java.lang.Iterable</code>
                interface. To translate this into a C# for-each loop (<code>foreach (X x in collection)</code>)
                the <code>collection</code> needs to implement <code>IEnumerable</code>. So we convert
                all Iterables to IEnumerables, and that means we have to convert Iterators to Enumerators.
                Unfortunately Java's <code>Iterator</code> interface doesn't lend itself to static
                translation to a c# <code>IEnumerator</code>: in Java, the <code>hasNext()</code>
                method is stateless (so you can call it repeatedly), whereas C#'s <code>MoveNext</code>
                changes the current position (so you can't). We're fortunate that we only make
                modest use of Java iterators; in most of the code, we use Saxon's <code>SequenceIterator</code>
                interface in preferance, and this converts without trouble. We examined all the cases
                where Saxon explicitly uses <code>hasNext()</code> and <code>next()</code>, and made
                sure these followed the discipline of calling <code>hasNext()</code> exactly once
            before each call on <code>next()</code>; with this discipline, converting the calls to
            <code>MoveNext()</code> and <code>Current</code> works without problems.</li>
            <li>Lambda expressions and delegates. In Java, lambda expressions can be used where the
            expected type is a <i>functional interface</i>; a functional interface in other ways is just
            an ordinary interface, and you can have concrete classes that implement it. So for example
            the second argument of <code>NodeInfo.iterateAxis(axis, nodeTest)</code> is a <code>NodeTest</code>,
            for which we can supply either a lambda expression (such as <code>it -&gt; it instanceof XSLExpose</code>),
            or one of a whole range of implementation classes such as a <code>SchemaElementTest</code>,
            which tests whether an element belongs to an XSD-defined substitution group. In C#, lambda expressions
            can only be used when the expected type is a delegate, and if the expected type is a delegate,
            then (in effect) a lambda expression is the only thing you can supply. The way we've handled this
            is generally to make the main method (like <code>iterateAxis()</code> expect a non-delegate
            interface, and then to supply a proxy implementation of this interface that accepts a delegate.
            It's not a very satisfactory solution, but it works.</li>
            
        </ul>
        <p>One area where we could have had trouble, but avoided it, is in the use of the Java
        <code>CharSequence</code> class. I wrote about this issue last year at
            <a href="/mike/2020/07/string-charsequence-ikvm-and-net.html">String, 
                CharSequence, IKVM, and .NET</a>. As described in that article, we decided to eliminate
        our dependence on the <code>CharSequence</code> interface. For a great many internal uses of strings
        in Saxon, we now use a new interface <code>UnicodeString</code> which as the name implies is much
        more Unicode-friendly than Java's <code>String</code> and <code>CharSequence</code>. It also reduces
        memory usage, especially in the TinyTree. But there is a small overhead in the places where we
        have to convert strings to or from <code>UnicodeStrings</code>, which we can't hide entirely:
        it represents about 5% on the bottom line. But it does make all this code much easier to port
        between Java and C#.</p>
        
        <p>What about dependencies? So far we've just been tackling the Saxon-HE code base, and that has
        very few dependencies that have caused any difficulty. Most of the uses of standard Java library
        classes (maps, lists, input and output streams, and the like) are handled by the converter,
        simply translating calls into the nearest C# equivalent. In some cases such as <code>java.util.Properties</code>
        we've written en emulation of the Java interface (or the parts of it that we actually use). In other
        cases we've redirected calls to helper methods. For example we don't always have enough type
        information to know whether Java's <code>List.remove()</code> should be translated to
        <code>List.Remove()</code> or <code>List.RemoveAt()</code>; so instead we generate a call on
        a static helper method, which makes the decision at runtime based on the type of the
        supplied argument.</p>
        
        <p>The only external dependency we've picked up so far is for handling big decimal numbers.
        We're currently evaluating the <code>BigDecimal</code> library from Singulink, which appears
        to offer all the required functionality, though its philosophy is sufficiently different
        from the Java <code>BigDecimal</code> to make conversion non-trivial.</p>
        
        <p>One thing I should stress is that we haven't written a general purpose Java to C# converter.
            Our converter is designed to handle the Saxon codebase, and nothing else. Some of the
            conversion rules are specific to particular Saxon classes, and as a general principle,
            we only convert the subset of the language and of the class library that we actually need.
            Some of the conversion rules assume that the code is written to the coding conventions
            that we use in Saxon, but which might not be followed in other projects.</p>
        
        <p>So, Hello World to Saxon-CS. There's still a lot of work to do, but we've reached a significant
        milestone.</p>
        
    </div></content></entry><entry><title>The Zeno Chain: a new data structure for XDM sequences</title><link href="https://blog.saxonica.com/mike/2021/03/zeno_chains.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2021/03/zeno_chains.html</id><published>2021-03-18T15:34:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2021/03/zeno_chains.html"><div xmlns="http://www.w3.org/1999/xhtml">
        <p>This article presents the Zeno Chain, a new data structure used
        to underpin the implementation of XDM sequences in Saxon. It is also
        designed to be capable of supporting XDM arrays, and might also have
        potential for holding long character strings.</p>
        <p>The current implementation of the Zeno Chain is a mutable list,
        but the design lends itself easily to creating an immutable variant.
        It also makes it easy to construct an immutable list from a mutable
        one, making it efficient to construct a sequence with in-situ
        modification, and then "freeze" it once construction is complete.</p>
        <p>Saxon currently uses a variety of structures for holding sequences
        and arrays. This variety is a problem in itself. Choosing the right
        structure for a particular scenario involves somewhat hit-or-miss 
        decision making; it would be better to have a single "all-rounder"
        structure that performs well in a variety of situations.</p>
        <p>There are of course vast numbers of data structures for sequences
        available in the computer science literature. One promising one,
        for example, is the "finger tree" which supports a wide range of
        access patterns efficiently. But it also has drawbacks: any tree
        structure that requires a node for each item in a list is going
        to have a large memory overhead when storing a long sequence, and
        the use of a fine-grained structure like this tends to mean that
        there is little locality of reference for memory addressing, leading
        to poor CPU caching performance.</p>
        <p>The Zeno chain stores a sequence as a list of lists of items:
        that is, it is a tree with a constant depth of 2. In the Java
        implementation, both levels of list are instances of 
        <code>java.util.ArrayList</code>. The key to the performance of the
            structure is managing the number and size of the second-level
            lists, which I call <i>segments</i>.</p>
        <p>In a list that is constructed by appending individual items
            on the end (a common scenario), the length of a segment
            increases the closer it is to the start. For a list of 20,000
            items, there are ten segments whose sizes are (8192, 4096, 4096, 
            2048, 1024, 256, 128, 64, 64, 32). (Now you know why I called
            it a Zeno chain.) The exact numbers don't matter
            here: what is important is that the total number of segments
            increases only logarithmically with the length of the sequence,
            and that the segments on the right are short, which makes further
            append operations efficient.</p>
        <p>In a list constructed by prepending individual items, the
            distribution of lengths will be the other way round: shortest
            segments near the front. In the rare case where both append and
            prepend operations occur, both ends will have short segments,
            while longer segments will cluster around the middle.</p>
        <p>Here's a summary of the major operations performed on the sequence:</p>
        <ul>
            <li><b>Append an item:</b> if the list is empty, construct a single
            segment of length 1. Otherwise, if the last segment has length &lt; 32,
            append to it. If the last segment is already full, coalesce the last segment with the previous
            segment if the previous segment has sufficient room; if not, work
            up the list to the start to find adjacent segments that can be merged.
            A segment is considered to have sufficient room for such expansion if its resulting size
            would not exceed 2^(N+5) where N is the distance of the segment
            from the right-hand end of the sequence; it's this formula that ensures
            that longer segments accumulate at the start of the sequence. If all
            segments in the sequence are full — that is, if the
            segment sizes are decreasing powers of two — then add a new segment. 
            Append operations essentially take constant time; 97% of them only
            affect the final segment.</li>
            <li><b>Prepend an item:</b> simply append in reverse.</li>
            <li><b>Get the Nth item:</b> search the master list of segments examining
            the sizes of the segments until
            the right segment is found, then get the item by addressing into the
            Java <code>ArrayList</code>. This takes logarithmic time. The average
            access time will be slightly higher in a list built by prepending items,
            because the chance of finding the required item in the first couple of
            segments is much lower.</li>
            <li><b>Subsequence:</b> make a new Zeno chain containing whole or part copies
            of the segments from the original chain that are in the required range.</li>
            <li><b>Iteration:</b> Keep two index positions, the index position in the master
            list, and the index position in the current segment, and use these indexes
            to retrieve the next item by calling <code>ArrayList.get()</code> twice.</li>
            <li><b>Sequence concatenation: </b> This is quite a common operation in
            XSLT and XPath, as it's the basis of the "flattening" operations such as
            <code>xsl:for-each</code>, <code>xsl:apply-templates</code>, and
            FLWOR expressions. The most direct approach is simply to concatenate the two
            master lists, leaving the segments unchanged. This however can lead to 
            fragmentation of the sequence, so we perform a reorganization to
            reduce the number of short segments. Specifically, working from the
            right hand end, if any segment is found to be shorter than both its
            immediate neighbours, we combine it with the left-hand neighbour
            and reduce the number of segments by one. This has the effect of reducing
            the incidence of short segments in the middle of the chain.</li>
            <li><b>Insertion, removal, and replacement: </b> these operations
            are comparatively rare. With the immutable version of the structure,
            an alteration affecting one of the larger segments will require copying
            of everything else in that segment. This isn't ideal: but it's better
            than copying the entire sequence, which is what often happens today.
            And the use of the Java <code>ArrayList</code> at least means that the
            copying is very fast.</li>
        </ul>
        <p>It's important to note that most operations on sequences don't actually
            result in a new sequence being constructed. Calling <code>tail()</code>,
            for example, doesn't copy any data: it delivers an iterator over a portion
            of the original sequence. The sequence only gets materialized if, for example
            the result is stored in a variable (and even then, not always).</p>
        <p>Saxon's default implementation for a sequence is simply a Java List.
            Appending an item to a list generally copies the whole list. Where Saxon
            can detect that this is going to be inefficient, it instead uses a structure
            called a Chain: this is effectively a tree of segments. But there's little
            serious attempt to manage the depth of the tree or the size of the segments,
            and the results in some cases can be rather poor.The Zeno chain offers
            a signficant improvement; it also looks as if it can be used for arrays
            as well as sequences.</p>
        <p>For managing long strings, I invented a similar structure, which I then
            discovered already existed in the literature and is known as a Rope:
            a Rope represents a string as a tree of substrings. The literature on
            Ropes describes how to keep the tree balanced, but it has nothing to say
            about how to decide how many substrings to hold, and how long to make them.
            The Zeno chain might turn out to provide an answer to that question.

        </p>
    </div></content></entry><entry><title>Saxon-JS 2.0.3</title><link href="https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html</id><published>2021-01-08T15:41:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Happy New Year!</p>

<p>As of a few minutes ago (at time of publication!), Saxon-JS 2.0.3
has been published to the
<a href="https://www.npmjs.com/package/saxon-js">npm registry</a>.
This release contains no changes in functionality (this is not the
release you’ve been waiting for, we’re still working on that one).</p>

<p>The previous version has a published dependency on
<a href="https://www.npmjs.com/package/axios">axios</a> version 
0.19.2 which is, apparently, the subject of a security vulnerability
(or so <code>npm install</code> asserted this morning).</p>

<p>This tiny release simply updates the dependency to a patched
version of axios.</p>

<p>Axios is an HTTP library that is only used by the NodeJS version of
Saxon-JS. When Saxon-JS is running in the browser, it uses the
browser’s APIs, so this update should have no consequences for the
browser version at all.</p>

</div></content></entry><entry><title>Arrow Expressions</title><link href="https://blog.saxonica.com/mike/2020/11/19-arrow-expressions.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2020/11/19-arrow-expressions.html</id><published>2020-11-19T10:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2020/11/19-arrow-expressions.html"><div xmlns="http://www.w3.org/1999/xhtml">
    <h2>Arrow Expressions</h2>
    <p>When I proposed the arrow operator to the XQuery/XSLT working groups, I thought of it as minor syntactic sugar.
    It's just a convenience: instead of <code>substring-before(substring-after(X, '['), ']')</code> you can write
    <code>X =&gt; substring-after('[') =&gt; substring-before(']')</code> which helps you to avoid going cross-eyed.
    If you're the kind of person who can play the piano with your hands crossed over, you probably don't need it,
    but for the rest of us, it makes life just a tiny bit easier.</p>
    <p>So I was a bit surprised at XML Prague 2020 that Juri Leino managed to construct an entire
            presentation around the arrow operator 
            (<a href="https://speakerdeck.com/minuso/shooting-arrows-fast-and-accurately">Shooting Arrows Fast and Accurately</a>).
          Not only that, he also developed a whole library of functions, called XBow, to increase their power.</p>
    <p>Now, XBow actually reveals a bit of a weakness in the construct: you can construct a pipeline of functions,
          but you can't include arbitrary expressions in the pipeline unless each of the expressions is made available
          via a function. Moreover,
          the value output by one step in the pipeline can only be used as the first argument in the next function: you
          can do <code>X =&gt; concat('$')</code> to add a "$" at the end of a string, but there's no simple way of adding
          a "$" at the front, except by defining a new <code>prepend</code> function that does this for you (or hoping
            that XBow will have anticipated your requirement).</p>
    <p>Now, of course you can do <code>X ! concat('$', .)</code>. But that doesn't always fit the bill. Firstly,
          it only works when you're processing single items (or mapping a sequence to multiple items). Secondly,
          (to use the current jargon) the optics are wrong: it breaks the pipeline visually.</p>
    <p>So my first suggestion is that we allow inline expressions to appear in a pipeline. Something like this:
          <code>X =&gt; {~ + 1}</code>, or <code>X =&gt; {concat('$', ~)}</code>. 
            I'm using '~' here as a variable to refer to the
          implicit argument, that is, the value passed down the pipeline. I would have used '_', as Scala does, but unfortunately
          '_' is a legal element name so it already has a meaning. And '~' seems to work quite nicely.</p>
    <p>The next thing that's been requested is implicit mapping, so you can use something like arrow notation
          to do <code>X ! substring-after(., '$') ! number(.) =&gt; sum()</code>. (Actually, the main obstacle in getting
          the arrow operator accepted by the XQuery Working Group was that some people wanted it to have this meaning.)</p>
    <p>For that I propose we use a "thin arrow": <code>X -&gt; substring-after('$') -&gt; number() =&gt; sum()</code>.
          The effect of the thin arrow is that instead of passing the value of the LHS to the function on the RHS
          <i>en bloc</i>, we pass it one item at a time. Of course, if the value on the LHS is a single item, then
          it doesn't matter which kind of arrow we use, both have the same effect.</p>
    <p>If you're a fan of map-reduce terminology, then you'll recognize this instantly as a map-reduce
          pipeline. The <code>-&gt;</code> operations are doing a mapping, and the final <code>=&gt;</code> does a reduce.
            If you're more into functional thinking, you probably think of it more in terms of function composition.</p>
    <p>Of course thin arrows can also be used with arbitrary expressions, just like thick arrows:
          <code>(0 to 3) -&gt; {~ + 1} -&gt; format-integer('a') =&gt; string-join('.')</code> returns 
            <code>"a.b.c.d"</code>.</p>
    <p>And now I'd like to pull one more rabbit out of the hat. What if I want a function that applies the
            above pipeline to any input sequence. I could write <code>function($x){$x -&gt; {~ + 1} -&gt; 
              format-integer('a') =&gt; string-join('.')}</code> but that seems clunky. I'm looking for a nice way
          to supply functions as arguments to higher-order functions like sort, where other languages have
          shown that a concise notation for anonymous functions (like <code>a -&gt; a+1</code> in Javascript) can
          make code a lot simpler, less verbose, more readable.</p>
    <p>So my proposal is this: just remove the left-hand expression, so you have something starting with
          <code>-&gt;</code> or <code>=&gt;</code>, and use this as an anonymous arity-1 function.</p>
    <p>So you can now do: <code>//employee =&gt; sort((), -&gt;{~/@salary})</code> to sort employees
            by salary, or <code>//employee =&gt; sort((), -&gt;{~/@salary}-&gt;substring-after('$')-&gt;number())</code> 
          if you need to do a bit more processing.</p>
    <p>As another little refinement, in the case of <code>-&gt;</code>, the implicit argument is
          always a single item, so we can bind it to the context item. So <code>-&gt;{~/@salary}</code>
          can be simplified to <code>-&gt;{@salary}</code>. Basically, within curly braces on the RHS of <code>-&gt;</code>,
          <code>.</code> and <code>~</code> mean the same thing.</p>
    <p>I believe that all these constructs can be added to the grammar without introducing ambiguity
          or backwards incompatibility, but I haven't proved it conclusively yet.</p>
    <h3>Postscript</h3>
    <p>The <code>~</code> construct seems to be the missing ingredient to enabling pipelines in XSLT.
          Consider:</p>
    <p><pre>
&lt;xsl:pipeline&gt;
  &lt;xsl:apply-templates select="/" mode="m1"/&gt;
  &lt;xsl:apply-templates select="~" mode="m2"/&gt;
  &lt;xsl:for-each select="~"&gt;
    &lt;e&gt;&lt;xsl:copy-of select="."/&gt;&lt;e&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:pipeline&gt;             
            </pre></p>
    <p>Here "~" is acting as an implicit variable to pass the result of one instruction to be the input for
          the next: basically eliminating the clunky <code>xsl:variable</code> declarations needed to do this today.
          The instructions that form the children of the <code>xsl:pipeline</code> element are effectively
          connected to each other with an implicit <code>=&gt;</code> operator.</p>
  </div></content></entry><entry><title>helloWorld.Saxon-JS for Node.js</title><link href="https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html</id><published>2020-11-15T17:53:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>You may already have seen my
<a href="../10/27-helloWorld.html">helloWorld.Saxon-JS</a> posting. That
was about getting Saxon-JS working in your browser. This post is about
getting Saxon-JS working in Node.js.</p>

<p>I’m still tinkering with some personal projects and I’ve decided
that for one of them, I’m going to experiment with using Node.js. The
app is going to do its thing and then eventually I’m going to want to
build a web page to show the results.</p>

<p>I’m sure there are ways to do this in Node.js, but this is pretty
much the first ever thing I’ve built in node, so I don’t know what
they are. What I do know is that I’ve got a wodge of JSON and I want
to turn it into a web page.</p>

<p>XSLT to the rescue. And XSLT on the server side this time.</p>

<p>As before, I was able to follow <a href="https://www.saxonica.com/saxon-js/documentation/">the
documentation</a> and get it up and running. But once again, it
involved a lot more head scratching (and re-reading the <a href="https://www.saxonica.com/saxon-js/documentation/index.html#!api/transform">SaxonJS.transform
API page</a>) than I would care to admit. This time, I think the main
difficulty was my inexperience with node more than anything else. </p>

<p>What I would have liked <em>this time</em> was a simple Node.js
project that pulled all the pieces together so that I could build it
and see it working, and then begin to hack on it.</p>

<p>So I built one:
<a href="https://github.com/Saxonica/helloWorldNodeJS">https://github.com/Saxonica/helloWorldNodeJS</a>.
</p>

<p>There’s really nothing to show, it’s about getting it to run locally, but I
think the TL;DR is pretty straightforward.</p>

</div></content></entry><entry><title>Draft Proposals for XSLT/XPath/XQuery 4.0</title><link href="https://blog.saxonica.com/mike/2020/11/14-qt40-proposal-comments.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/mike/2020/11/14-qt40-proposal-comments.html</id><published>2020-11-14T19:19:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/mike/2020/11/14-qt40-proposal-comments.html"><div xmlns="http://www.w3.org/1999/xhtml">

      <h2>Draft Proposals for XSLT/XPath/XQuery 4.0</h2>

    
    <p>I've been working on translating the ideas in my XML Prague 2020 paper, 
      entitled <a href="https://www.saxonica.com/papers/xmlprague-2020mhk.pdf">a Proposal for XSLT 4.0</a> into concrete specifications, and my first attempt at this can be found
    here:</p>
    
    <p>
      I'm hoping to gather together a community group of some kind to take this forward; meanwhile I've published a very preliminary set of drafts:
      </p>
    <ul>
      <li><a href="https://www.saxonica.com/qt4specs/XT/Overview-diff.html">XSLT</a></li>
      <li><a href="https://www.saxonica.com/qt4specs/FO/Overview-diff.html">Functions and Operators</a></li>
      <li><a href="https://www.saxonica.com/qt4specs/XP/xpath-40-diff.html">XPath</a></li>
      <li><a href="https://www.saxonica.com/qt4specs/XQ/xquery-40-diff.html">XQuery</a></li>
      </ul>

    
    <p>I put these ideas up yesterday on the XML community Slack channel and got some great feedback.
    Unfortunately Slack isn't really a good vehicle for managing the response to this feedback. I'm
    going to organise some GitHub space for a more structured discussion, but meanwhile, here
    are my reactions to the initial comments:</p>
    
    <h3>Phil Fearon:</h3>
    <p>There’s a lot to digest here so hope to provide feedback after I’ve read this more thoroughly.
    One suggestion (inspired by ReactJS/JSX) is to provide some syntactical sugar for <code>xsl:call-template</code>. 
    So a call to a named template appears more like a literal result element (perhaps with a special namespace), 
    with attributes that correspond to template params. This could also allow the child items of the special-LRE 
    to be passed to the named template, accessed via a special $children param.
    </p>
    <p><i>Yes, I've been wanting to do something like this for years, and it's really not difficult, so I've
    added it. If EX is listed in <code>extension-element-prefixes</code>, and if there's a named template
      <code>name="ex:action"</code>, then <code>&lt;ex:action a="expr" b="expr"/&gt;</code> is interpreted
    as an <code>xsl:call-template</code> with <code>xsl:wth-param</code> children for parameters <code>a</code> and
    <code>b</code>.</i></p>
    
    <h3>Liam Quin</h3>
    <p>first quick note, best NOT to have them say W3C Recommendation on them as this may cause confusion.</p>
    <p><i>Yes, sorry about that, still working my way around the stylesheets that generate the boilerplate text...</i></p>
    
    <p>2d, cam xsl:text have a select attribute? i don't think value-of can be deprecated :disappointed: 
      but xsl:text select= would be consistent &amp; may help.</p>
    
    <p><i>It's one of these things that one would like to simplify, but we can only add things not remove them,
    so that's not easy.</i></p>
    <p>" the tunnel parameters that are implicitly passed in a template call may have names that duplicate 
      the names of non-tunnel parameters that are explicitly passed on the same call." is a major source 
      of difficult debugging if you forget tunnel=yes. Maybe the answer is just a warning from impl'ns.
    </p>
    
    <p><i>Yes. How to solve this without breaking compatibility? Perhaps a dynamic error if you declare a non-tunnel
    parameter, and at run-time there's a tunnel parameter with that name, but no non-tunnel parameter, or vice versa?
    Or, as you say, just rely on warnings. I agree it's a very common mistake that's hard to debug.</i></p>
    <p>The "at $pos" of XQuery is super useful. position() is tricksy.Maybe for-each at="name" ?</p>
    <p><i>In 3.0 we experimented with replacing some of the context functions with explicit variable bindings
    and it got a bit messy, but I think it's a shame we didn't persevere. The toughest one is <code>last()</code>,
    it would be awfully nice if we knew statically whether <code>last()</code> was going to be needed or not,
    but again, hard to fix without breaking code.</i></p>
    
    <p>prefix binding didn't make the cut for XPath?</p>
    <p><i>I did a design for this and didn't like it enough to put it in. I'll try again.</i></p>
    <p>item-at() seems not much easier than $xxx ! let $p := position() return $yyy[$p]</p>
    <p><i>I'm toying now with an alternative to item-at() that's much more powerful: slice(sequence, positions)
      so you can do <code>slice($s, 5)</code> or <code>slice($s, 5 to 10)</code> or 
      <code>slice($s, -1)</code> or <code>slice($s, 1 by 3 to count($s))</code> or
      <code>slice($s, -2 by -1 to -count($s))</code>. Here <code>A by B to C</code> is an extension
    of the current range expression where <code>A to B</code> means <code>A by 1 to B</code>.</i></p>
    <p>replace-with() seems like perl's e flag (JS has one too) but alas  no polymorphism so can't 
    write replace(., $expr, myfunc#1m 'e')</p>
    However,  what about adding a map or an array of  matching subgroups? ".{$2 || $1 * 2 || $2}"
    <p><i>Yes, I think it's a really useful capability, but I think it's cleaner to make it a separate function.
    Have to think about how subgroups might work.</i></p>
    
    <h3>Reece H. Dunn </h3>
    <p>I like the enum(...) syntax in addition to the union(...) syntax.</p>
    
    
    <p>I like the extension of element and attribute type tests to be full name tests. 
    The ability to define types for path expressions like (ol|ul) is missing, though.</p>
    
    <p><i>Yes, I'm in two minds whether union(X, Y, Z) should be restricted to a union of atomic types,
    or whether it should allow a union of any types including node types. Orthogonality suggests the latter,
    but I was too timid to propose that.</i></p>
    
    
    <p>For named item types, is it possible to make them available as part of the in-scope schema types 
    (renamed to in-scope types that would include the schema and named types?), so you could say 
    person-name instead of item-type(person-name). -- Having to qualify the named item types everywhere 
    could get too verbose, especially if the name is short. _NOTE:_ This is done for MarkLogic types 
    where you can refer to map:map, cts:query, etc.</p>
    
    <p><i>Interesting idea. There's obviously a need to resolve conflicts but that's not a stopper.
    I think I was more concerned with the idea that if it's a QName then it must be atomic, and the
    messy fact that the sets of schema types and item types overlap, and the overlap contains all atomic types
    and some but not all union types.</i></p>
    
    <h3>Liam Quin</h3> 
    <p>hmm, xsl:sequence could do with an "as" attribute.</p>
    <p><i>Not convinced. You start wanting to put it anywhere e.g. on xsl:if or xsl:apply-templates.</i></p>
    
    
    
    <h3>Reece H. Dunn</h3>
    <p>In https://www.saxonica.com/qt4specs/XP/xpath-40-diff.html#id-itemtype-subtype, 
    rule 2(d) is missing the reference to the EnumerationType symbol ("A is an ," instead of "A is an EnumerationType,").</p>
    
    <p><i>Stylesheet trouble. The XSLT and XPath spec stylesheets have diverged, the XSLT spec allows 
      <code>&lt;termref def="some-term"/&gt;</code> and picks up the term from the definition, but 
      the XPath spec requires <code>&lt;termref def="some-term"&gt;term&lt;/termref&gt;</code>. I need to bring them
    back into line. Applies to your subsequent comments also.</i></p>
    
    
    <h3>Martin Honnen</h3>
    <p>I like the separator attribute on xsl:apply-templates and xsl:for-each. 
    I wonder whether it would make sense to add it to xsl:for-each-group as well.</p>
    
    <p><i>Yes. Also xsl:for-each-member. I'm not sure whether it should be an AVT or a general expression:
    with a general expression you could insert <code>br</code> or <code>hr</code> separators, especially if we have element constructor
    functions in XPath (<code>separator="build:element('hr')"</code>)</i> </p>
    
 
    <h3>Liam Quin</h3>  9 hours ago
    <p>i've been wondering abut the possibility of an xsl:uri-resolver for some time. </p>
    <p><i>Not sure what it would do?</i></p>
    <p>Also  about xsl:mode elements being able to contain xsl:template elements.</p>
    <p><i>Yes, I've wanted that for a long time. To be honest, it's not in 3.0 because I couldn't convince Sharon.</i></p>
    
    <h3>Reece H. Dunn</h3> 
    <p>The changes for XPath/XQuery look good. I see you changed the syntax for the context item and lambda syntaxes 
    to a unified syntax. I like that the concise and full syntaxes are now consistent.</p>
    
    
    <p>Given that . is allowed in a ParamList, does that mean I can now define a function that works on the path context item? For example:
    declare function local:f(.) { xs:integer(.) + 2 };
    //values/local:f()</p>
    
    <p><i>Actually, allowing "." here was an oversight caused by my changing the way the grammar rules worked.
    But there might be some benefit it keeping it.</i></p>
    
    <p>... does that mean that the context-dependent functions in F&amp;O should be defined using that syntax. For example:
    fn:data(.) as xs:anyAtomicType*</p>
    
    <p><i>I hadn't thought of baking the "implicit . as parameter" convention into the language, but it might make sense
    if it can be done.</i></p>
    
    <h3>Liam Quin</h3> 
    <p>in XQuery i don't understand "The for evaluation of the function body is absent, 
    unless the signature uses the "." notation, in which case it is evaluated with a singleton 
    focus bound to the supplied argument value."</p>
    <p><i>Markup trouble again.</i></p>
    
 
    <h3>Martin Honnen</h3>  9 hours ago
    <p>If xsl:for-each has a separator attribute, wouldn't xsl:for-each-member benefit from it as well?</p>
    <p><i>Yes, see above.</i></p>
    
    <h3>Reece H. Dunn</h3>  9 hours ago
    <p>For the schema import in XQuery, would it make sense to have:
    [22]    	SchemaPrefix 	   ::=    	("namespace" NCName "=") | ("default" ("element" | "type") "namespace")
    now that the element and type namespaces are separate, similar to how DefaultNamespaceDecl has changed.</p>
    
    <p><i>I thought about this and decided not. If you want finer control, use multiple declarations.</i></p>
    

    <p>For parameter lists and context items, would it be more useful to have the context item as an optional first parameter? That would mirror the proposed variadic argument syntax (defined for arguments at the end of the parameter list), and would allow arguments to be passed to the function, such as:
    declare function local:add(., $n) { xs:integer(.) + $n };
    //values/local:add(2)</p>
    
    <p><i>I quite like that in principle. Needs more thought.</i></p>
    
    Reece H. Dunn  9 hours ago
    <p>Is there any description of the arity of context item based functions? -- There should be a note or something similar to say that the context item for a function definition or inline function expression does not count to its arity, so function () and function (.) both have an arity of 0.
    </p>
    
    <p><i>I was thinking of them simply as arity-1 functions, suitable for callbacks in things like fn:filter and fn:sort.
    You're opening up new possibilities which I need to ponder.</i></p>
    <h3>line0 </h3> 
    <p>Great to see the spec coming to light!</p>
    <p>I proposed to add two new signatures to for-each</p>
    <p>for-each(item()*, function (item(), xs:positiveInteger) as item()*) as item()*</p>
    <p>for-each(item()*, function (item(), xs:positiveInteger, item()*) as item()*) as item()*</p>
    
    <p><i>I've proposed that the function coercion rules should allow you to supply an arity-1 function where
    an arity-2 function appears in the signature; so we can extend fn:for-each to take a <code>function(item, integer)</code>
    as the predicate callback, and you can still supply <code>function(item)</code> if you don't care about the position.</i></p>
    
    <p>which would bring for-each on par with FLOWR expressions ( for window and for … in … at ).</p>
    <p><i>It would be great to see windowing done with higher-order functions, but it's a significant piece of design
    and not my top priority - even though it would bring XSLT up to the level of XQuery for this kind of functionality.</i></p>
    
    
    
    <h3>Martin Honnen </h3> 
    <p>For fn:transform, Saxon has already added the option source-location as that is needed 
    to use fn:transform with streaming; I think it makes sense to integrate that option into the fn:transform specification of the FO 4 draft.
    </p>
    <p><i>Good point.</i></p>
    
  </div></content></entry></feed>