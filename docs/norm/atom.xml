<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xml:lang="EN-us"><title>Saxon Chronicles</title><subtitle>(in a Norman style)</subtitle><link href="https://blog.saxonica.com/norm/" rel="alternate" type="text/html"/><link href="https://blog.saxonica.com/atom/norm.xml" rel="self"/><id>https://blog.saxonica.com/norm/atom.xml</id><updated>2024-10-17T14:22:02.635844Z</updated><author><name>Norm Tovey-Walsh</name></author><entry><title>Oops, we did it again</title><link href="https://blog.saxonica.com/norm/2024/10/17-oops.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2024/10/17-oops.html</id><published>2024-10-17T15:01:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2024/10/17-oops.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As some of you have noticed, the SaxonJS
“<a href="../../2023/10/06-no-longer-supported.html">no longer supported</a>” bug
returned a few days ago. I’d have sworn that I removed that warning when we shipped
SaxonJS 2.6. But I’d also have sworn we would get 3.0 out before now. Maybe I’m
not very good at swearing.</p>

<p>That warning <em>has been</em> removed from
<a href="../../../announcements/2024/10/saxonjs-2.7.html">SaxonJS 2.7</a>, so
this issue won’t surface again next October.</p>

<p>Apologies for not getting a maintenance release out sooner. We really should
have. Focus has been on SaxonJS 3.0, which is still coming along nicely, but
there were a number of bug fixes in SaxonJS 2.x that we could have shipped
months ago.</p>

<p>My expectation is that we’ll ship some sort of beta test version of SaxonJS
3.0 “real soon now” and Saxon 12.6 to fix
<a href="https://saxonica.plan.io/issues/6487">the SEF bug</a> in 12.5 shortly
before or after that.
</p>

</div></content></entry><entry><title>Announcing SaxonJS 2.7!</title><link href="https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html</id><published>2024-10-17T15:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/10/saxonjs-2.7.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS 2.7!</h1>

<p>The SaxonJS 2.7 maintenance release has been published. This is a
maintenance release for NodeJS and the browser. It fixes a number of bugs.
(Including <a href="/norm/2023/10/06-no-longer-supported.html">that one</a>
about the spurious warning message. Again.)</p>

<p>Highlights include:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/4991">#4991</a>: Support JSON indentation in xml-to-json</li>
<li><a href="https://saxonica.plan.io/issues/5540">#5540</a>: Namespace context is reset before each XSLT transformation</li>
<li><a href="https://saxonica.plan.io/issues/5743">#5743</a>: Text nodes are no longer lost in xsl:catch instruction</li>
<li><a href="https://saxonica.plan.io/issues/6234">#6234</a>: Corrected the behavior of a map called as a function</li>
<li><a href="https://saxonica.plan.io/issues/6318">#6318</a>: Fixed an error in parsing regular expressions</li>
<li><a href="https://saxonica.plan.io/issues/6352">#6352</a>: Resolved a performance issue introduced in SaxonJS 2.6</li>
<li><a href="https://saxonica.plan.io/issues/6393">#6393</a>: Fixed a string/number comparison bug</li>
<li><a href="https://saxonica.plan.io/issues/6418">#6418</a>: Improve behavior when attempting to use IXSL extensions on Node.js</li>
<li><a href="https://saxonica.plan.io/issues/6516">#6516</a>: Fixed some XPath parsing errors related to uncommon expressions (like <code>/[x]</code>)</li>
</ul>

<p>For a complete list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon-js/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_10&amp;op%5Bcf_10%5D=%3D&amp;v%5Bcf_10%5D%5B%5D=97&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxonica support site.</p>

<p>SaxonJS 2.7 was released on 17 October 2024. This release has been
uploaded to the usual locations on the Saxonica website and the NPM
repository.
For more details, please consult
<a href="https://www.saxonica.com/saxon-js/documentation2/index.html">the documentation</a>.
</p>

<div class="note">
<p>Note: Saxon 12.5 won’t create SEF files that can be used with SaxonJS 2.x.
This is a <a href="https://saxonica.plan.io/issues/6487">known bug</a> that will
be fixed in Saxon 12.6. Saxon 12.4 and earlier versions will make SEF files that
SaxonJS 2.x can use.</p>
</div>

<p>If you encounter any issues with SaxonJS 2.7, please
<a href="https://saxonica.plan.io/projects/saxon-js/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Packaging SaxonJS for the browser</title><link href="https://blog.saxonica.com/norm/2024/08/16-packaging.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2024/08/16-packaging.html</id><published>2024-08-16T15:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2024/08/16-packaging.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Over the years, there have been several requests to improve the way that
SaxonJS is packaged for the browser. In the run up towards SaxonJS 3.0 (real
soon now, I promise), I’ve spent a few hours trying to see if that’s possible.</p>

<p>For SaxonJS on Node.js, things seem to be working the way users expect. You
can install SaxonJS, and <em>xslt3.js</em>, the command-line XSLT processor,
with <code>npm install</code>. Then you can use them as you would other Node.js
modules and applications.</p>

<p>For the browser, things are a little less clear.</p>

<p>I’ll start out by observing that SaxonJS is a large(ish) collection of mostly
plain JavaScript files. There are a mixture of techniques used, as you might
expect from a code base that stretches back seven or eight years (roughly ∞ in
JavaScript years). This code is compiled by the <a href="https://developers.google.com/closure/compiler">Closure Compiler</a> to
produce the release artifacts.</p>

<div class="aside">
<p><em>Aside:</em> Producing TypeScript instead of JavaScript is almost certainly
impractical. And
the answer to the question, “can you make it an ESM module?” appears to be “no”. But
maybe I’m wrong?</p>
</div>

<p>Almost anything is <em>possible</em> in software,
but there some things are probably <em>impractical</em> because of how SaxonJS
is built.
</p>

<p>What I’ve come to realize after several hours is that I
don’t actually understand what problem I’m trying to solve. That usually makes
problems harder.</p>

<p>For example, it would be easy to package the browser versions of the SaxonJS
libraries into the <code>saxon-js</code> <em>npm</em> package. That would allow
you to use <code>npm install</code> to install it. Once installed, you could
refer to it in HTML like this:</p>

<pre><code>&lt;script src="node_modules/saxon-js/SaxonJS3.rt.js"&gt;&lt;/script&gt;</code></pre>

<p>That’s a non-zero usability improvement over downloading the browser release
yourself and adding it to your project, but it’s an <em>awfully small</em>
improvement. So small, that I conjecture that the request to “put it in the npm
package” means more than that. But I don’t know what more.</p>

<p>Another request that’s come up a couple of times is whether we should provide
a version that’s been packaged up with <em>webpack</em>. Well. Okay. I spent
a bit of time on that and eventually I managed to get</p>

<pre><code>npx webpack --config webpack.config.js</code></pre>

<p>to take <code>src/SaxonJS3.js</code>, chew on it for a while, and produce
<code>dist/SaxonJS3.js</code>. That was a little, uh, underwhelming. I started
with a JavaScript library that I could load in the browser and ended with…a
different one, I guess?</p>

<p>Then there are suggestions that instead of <em>webpack</em> I should be
trying <em>vite</em> or <em>bun</em> or something else and do I also need
<em>browserify</em>? I don’t know.
I’m about to give up, at least in the short term, but before I do, I thought
I’d see if anyone out there can tell me what I’m missing.</p>

<p>If you would like to see SaxonJS for the browser packaged up in some
different way, can you tell me how? And why? A small test case would be ideal:
something that isn’t too complicated, that doesn’t work with SaxonJS as it’s
distributed today, that would work if we packaged it in some other way.</p>

</div></content></entry><entry><title>Announcing Saxon 12.5!</title><link href="https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html</id><published>2024-07-02T11:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/07/saxon-12.5.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.5!</h1>

<p>The Saxon 12.5 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since previous Saxon 12.4 releases.
</p>

<p>Saxon 12.5 was released on 1 July 2024.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.5 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=96&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.5&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.5">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is available from our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=96&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>

<li><a href="https://saxonica.plan.io/issues/6450">6450</a>
    CollectionFinder parsesd ALLOWED_PROTOCOLS incorrectly</li>
<li><a href="https://saxonica.plan.io/issues/6449">6449</a>
    SaxonCS failure when using collection function to pull a collection catalog file over HTTP(S)</li>
<li><a href="https://saxonica.plan.io/issues/6448">6448</a>
    Saxon-HE 12.4J has wrong column number in trace, unlike Saxon-EE</li>
<li><a href="https://saxonica.plan.io/issues/6446">6446</a>
    Improved performance of XQuery group by some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/6435">6435</a>
    Resolve concurrency issue in the use of accumulators behind the scenes in xsl:for-each</li>
<li><a href="https://saxonica.plan.io/issues/6428">6428</a>
    Output of xsl:on-non-empty changes when using TraceListener</li>
<li><a href="https://saxonica.plan.io/issues/6426">6426</a>
    fn:matches surprisingly returns false for fn:matches("AB", "^(.*)+B")</li>
<li><a href="https://saxonica.plan.io/issues/6420">6420</a>
    -Tout filename not used when set on command line</li>
<li><a href="https://saxonica.plan.io/issues/6419">6419</a>
    Union of nodes in a Template Match produces wrong output in Trace</li>
<li><a href="https://saxonica.plan.io/issues/6415">6415</a>
    Improved results for trace of an unreferenced XSLT variables</li>
<li><a href="https://saxonica.plan.io/issues/6407">6407</a>
    Tree Model option -tree seems to be ignored for initial source documents</li>
<li><a href="https://saxonica.plan.io/issues/6406">6406</a>
    A collection cannot contain the same document more than once</li>
<li><a href="https://saxonica.plan.io/issues/6405">6405</a>
    Improve saxon:column-number() for text nodes not inside xsl:text</li>
<li><a href="https://saxonica.plan.io/issues/6394">6394</a>
    Resolve "Duplicate definition of global variable" exception when using compileLibrary on modules which import a common module</li>
<li><a href="https://saxonica.plan.io/issues/6386">6386</a>
    Resolve inadvertant backwards incompatibility in some uses of Configuration#setFeature</li>
<li><a href="https://saxonica.plan.io/issues/6381">6381</a>
    set_unprefixed_element_matching_policy(1) doesn't seem to work</li>
<li><a href="https://saxonica.plan.io/issues/6380">6380</a>
    Internal error when match pattern invoked by xsl:next-match refers to global variable</li>
<li><a href="https://saxonica.plan.io/issues/6378">6378</a>
    Resolved problem with tracing a variable declared abstract</li>
<li><a href="https://saxonica.plan.io/issues/6377">6377</a>
    Resolved exception that could be thrown by format-time in some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/6370">6370</a>
    XSD based validation finds a validation throws NullPointerException when trying to generate a validation report</li>
<li><a href="https://saxonica.plan.io/issues/6365">6365</a>
    Fixed bug where Gizmo could fail if no license was provided</li>
<li><a href="https://saxonica.plan.io/issues/6363">6363</a>
    Incorrect result comparing untypedAtomic value to NaN</li>
<li><a href="https://saxonica.plan.io/issues/6348">6348</a>
    Fixed multi-threading bug related to xsl:result-document operating asynchronously </li>
<li><a href="https://saxonica.plan.io/issues/6340">6340</a>
    Fixed exception that sometimes arose when using saxon:capture="yes" in an accumlator rule</li>
<li><a href="https://saxonica.plan.io/issues/6339">6339</a>
    Describe fix and workaround for ArrayIndexOutOfBoundsException in saxon:transform() </li>
<li><a href="https://saxonica.plan.io/issues/6313">6313</a>
    Static type error from fn:remove()</li>
<li><a href="https://saxonica.plan.io/issues/6302">6302</a>
    Improved trace output when the transform function is used</li>
<li><a href="https://saxonica.plan.io/issues/6286">6286</a>
    Resolved problem where $connection?close() could throw an error</li>
<li><a href="https://saxonica.plan.io/issues/6279">6279</a>
    Incorrect optimization of generate-id() comparisons</li>
<li><a href="https://saxonica.plan.io/issues/6256">6256</a>
    function-name returns an empty sequence for node-name#0, string#0 and more?</li>
<li><a href="https://saxonica.plan.io/issues/6183">6183</a>
    Improved documentation for debugging errors when using "fallback=no" on UCA collation</li>
</ul>

<h3>Issues in SaxonC</h3>

<p>Memory management in SaxonC, PHP, and Python has been greatly improved. This resolved
a number of issues (<a href="https://saxonica.plan.io/issues/6338">6338</a>,
<a href="https://saxonica.plan.io/issues/6349">6349</a>,
<a href="https://saxonica.plan.io/issues/6357">6357</a>,
<a href="https://saxonica.plan.io/issues/6396">6396</a>, and
<a href="https://saxonica.plan.io/issues/6397">6397</a>). In addition, the following
issues were resolved. (For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.5&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.)</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6439">6439</a>
    Fixed bug in Python extension that could cause an AttributeError on PyXdmFunctionItem</li>
<li><a href="https://saxonica.plan.io/issues/6402">6402</a>
    Added <code>clearXslMessages</code> to clear accumulated xsl:message messages</li>
<li><a href="https://saxonica.plan.io/issues/6401">6401</a>
    Resolved bug when setting a filename on an executable in Python</li>
<li><a href="https://saxonica.plan.io/issues/6372">6372</a>
    Updated build to include all character sets (will enable Windows-1252 encoded XML files to be parsed on Linux)</li>
<li><a href="https://saxonica.plan.io/issues/6360">6360</a>
    Fixed bug where setOutputFile did not work with transformToFile()</li>
<li><a href="https://saxonica.plan.io/issues/6356">6356</a>
    Fixed argument count error in executable in PHP</li>
<li><a href="https://saxonica.plan.io/issues/6351">6351</a>
    Added methods for getting the line and column number of a node</li>
<li><a href="https://saxonica.plan.io/issues/6342">6342</a>
    Fixed bug where in compileFromAssociatedFile PHP might fail</li>
<li><a href="https://saxonica.plan.io/issues/6341">6341</a>
    Support try/catch in PHP for underlying parse errors</li>
<li><a href="https://saxonica.plan.io/issues/6336">6336</a>
    Fixed bug when passing array values as parameters in Python</li>
<li><a href="https://saxonica.plan.io/issues/6327">6327</a>
    Fixed bug where an empty XdmValue in Python might throw a TypeError</li>
<li><a href="https://saxonica.plan.io/issues/6297">6297</a>
    Fixed build issue on CentOS 7</li>
<li><a href="https://saxonica.plan.io/issues/6276">6276</a>
    Fixed bug where proc.version did not include the patch version</li>
</ul>

<p>If you encounter any issues with Saxon 12.5, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing SaxonC 12.4.2!</title><link href="https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html</id><published>2024-01-26T10:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2024/01/saxonc-12.4.2.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonC 12.4.2!</h1>

<p>A SaxonC 12.4.2 maintenance release has been published. This
release fixes several issues:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6197">6197</a> A segmentation fault in the PHP extension</li>
<li><a href="https://saxonica.plan.io/issues/6273">6273</a> A change in the way whitespace is handled in filenames</li>
<li><a href="https://saxonica.plan.io/issues/6274">6274</a> An problem with the “encoding” keyword in the python saxon processor</li>
<li><a href="https://saxonica.plan.io/issues/6277">6277</a> A build configuration issue for the SaxonC HE Python processor</li>
<li><a href="https://saxonica.plan.io/issues/6288">6288</a> A build issue for the SaxonC PHP extension</li>
<li><a href="https://saxonica.plan.io/issues/6294">6294</a> A segmentation fault parsing JSON</li>
<li><a href="https://saxonica.plan.io/issues/6301">6301</a> A compile error related to memory allocation with some C++ compilers</li>
<!--
<li><a href="https://saxonica.plan.io/issues/6304">6304</a> An issue when using multiple threads from the Python processor</li>
-->
<li><a href="https://saxonica.plan.io/issues/6306">6306</a> Unreleased memory in the Python processor</li>
<li><a href="https://saxonica.plan.io/issues/6324">6324</a>  A segmentation fault in the Python extension</li>
</ul>

<p>Some efforts have also been made to improve the way dynamic
libraries are referenced when using the C/C++ APIs directly. These
changes are reflected in the builds and in the scripts that compile
the “command” and “samples” applications.</p>

<p>In brief: on macOS, the dynamic library can be accessed through
<code>@rpath</code> and on Linux, the dynamic library can be placed in a standard
location or accessed with the <code>LD_LIBRARY_PATH</code> environment variable.
On Windows, apparently the standard practice is to place the DLL in the same
directory as the executable.</p>

<p>For a more complete list of what’s new in 12.4, please see the original
<a href="../../2023/11/saxon-12.4.html">release announcement</a> and the
<a href="https://www.saxonica.com/saxon-c/release-notes.xml">SaxonC release notes</a>
on the main website.</p>

</div></content></entry><entry><title>Announcing SaxonC 12.4.1!</title><link href="https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html</id><published>2023-12-01T14:50:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/12/saxonc-12.4.1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonC 12.4.1!</h1>

<p>A SaxonC 12.4.1 maintenance release has been published. This
release fixes <a href="https://saxonica.plan.io/issues/6268">a build
error</a> on the Windows platform and includes one additional
patch.</p>

<p>I’m an ardent believer in build automation and reproducibility
through scripting. We’ve made a lot of progress in this area, but
Windows is still a bit “hands on.” Problem is, it was my hands and I
messed up.</p>

<p>A while back, we considered upgrading to a newer version of
GraalVM. In the course of testing that, I upgraded the version on the
Windows build machine. But ultimately, we decided not to make that
upgrade.</p>

<p>Despite having an explicit note in my release checklist:</p>

<ul>
<li>☑ Check the version of GraalVM</li>
</ul>

<p>I missed it on the Windows box. A lot of good detective work went
into trying to figure out what was going on, but in the end, just
building with the “right” version of GraalVM fixed it. Apologies to
the team and everyone else for that.</p>

<p>The 12.4.1 release also includes a
<a href="https://saxonica.plan.io/issues/6182">partial fix</a> for
issues relating to UTF-8 string-based C API functions. Unfortunately,
a more complete fix was deemed too risky for what was otherwise an
“emergency” release. That fix will have to wait for next time.</p>

<p>For a more complete list of what’s new in 12.4, please see the original
<a href="../11/saxon-12.4.html">release announcement</a>.</p>

</div></content></entry><entry><title>Announcing Saxon 12.4!</title><link href="https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html</id><published>2023-11-29T18:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/11/saxon-12.4.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.4!</h1>

<p>The Saxon 12.4 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.3 release.
(Note: A <em>12.4.1</em> maintenance release of SaxonC
<a href="../12/saxonc-12.4.1.html">was published</a> on 1 December 2023.)
</p>

<p>Saxon 12.4 was released on 29 November 2023.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.4 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=95&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.4&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.4">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is available from our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=95&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5792">5792</a>
    ICU spellout numbering</li>
<li><a href="https://saxonica.plan.io/issues/5896">5896</a>
    Intermittent failure in multi-threading with XSLT</li>
<li><a href="https://saxonica.plan.io/issues/5914">5914</a>
    Performance regression in SaxonJ 12, searching for context properties</li>
<li><a href="https://saxonica.plan.io/issues/5949">5949</a>
    A resource loaded via the resolver vs one loaded "directly" is a different source with different options</li>
<li><a href="https://saxonica.plan.io/issues/6049">6049</a>
    Does XQueryEvaluator for SaxonCS lack the API to set an ErrorReporter?</li>
<li><a href="https://saxonica.plan.io/issues/6082">6082</a>
    Saxon 12 XQuery: Issue with compile-time error checking</li>
<li><a href="https://saxonica.plan.io/issues/6090">6090</a>
    Performance regression SaxonCS 12</li>
<li><a href="https://saxonica.plan.io/issues/6094">6094</a>
    saxon:eval and saxon:expression no longer available with Saxon 12</li>
<li><a href="https://saxonica.plan.io/issues/6116">6116</a>
    UncheckedXPathException and missing error codes in output with Saxon-HE 12J</li>
<li><a href="https://saxonica.plan.io/issues/6117">6117</a>
    Transformation using memo functions fails if the source is an XdmDocument.asSource()</li>
<li><a href="https://saxonica.plan.io/issues/6128">6128</a>
    Unwanted diagnostic output when validating notations</li>
<li><a href="https://saxonica.plan.io/issues/6130">6130</a>
    No error is reported for <code>schema-element(*:foo)</code></li>
<li><a href="https://saxonica.plan.io/issues/6131">6131</a>
    Unexpected function call triggers cardinality check and error</li>
<li><a href="https://saxonica.plan.io/issues/6146">6146</a>
    Relative URI resolution in XQuery vs XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6147">6147</a>
    Incorrect fingerprint for XML_SPACE_TYPE</li>
<li><a href="https://saxonica.plan.io/issues/6148">6148</a>
    xsi:type and xsi:schemaLocation on same element</li>
<li><a href="https://saxonica.plan.io/issues/6149">6149</a>
    $connection?close() throws NullPointerException</li>
<li><a href="https://saxonica.plan.io/issues/6153">6153</a>
    XSD blockDefault effect on complex types</li>
<li><a href="https://saxonica.plan.io/issues/6157">6157</a>
    xsl:array instruction does not perform fallback processing</li>
<li><a href="https://saxonica.plan.io/issues/6158">6158</a>
    Errors in xsl:fallback not detected</li>
<li><a href="https://saxonica.plan.io/issues/6159">6159</a>
    sql:query() throws NullPointerException when retrieving a column with null value</li>
<li><a href="https://saxonica.plan.io/issues/6160">6160</a>
    Key type in a MapTest cannot be a union type</li>
<li><a href="https://saxonica.plan.io/issues/6161">6161</a>
    ReportingSingletonIterator.next throws NullPointerException - race condition</li>
<li><a href="https://saxonica.plan.io/issues/6165">6165</a>
    Spurious template rule ambiguity reported</li>
<li><a href="https://saxonica.plan.io/issues/6166">6166</a>
    Public fields in a Java instance object cannot be accessed from XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6167">6167</a>
    Enclosing modes do not work with JIT enabled</li>
<li><a href="https://saxonica.plan.io/issues/6168">6168</a>
    mode="#all" failures with JIT enabled</li>
<li><a href="https://saxonica.plan.io/issues/6176">6176</a>
    Failure to test for UncheckedXPathException</li>
<li><a href="https://saxonica.plan.io/issues/6186">6186</a>
    IndexOutOfBounds exception during stylesheet compilation when package is overridden</li>
<li><a href="https://saxonica.plan.io/issues/6196">6196</a>
    Functions of wrong arity: arguments → parameters</li>
<li><a href="https://saxonica.plan.io/issues/6198">6198</a>
    SCM export fails for a schema containing namespace prefixes in an XPath expression</li>
<li><a href="https://saxonica.plan.io/issues/6199">6199</a>
    SCM export/import sometimes fails for an <code>xs:alternative</code></li>
<li><a href="https://saxonica.plan.io/issues/6201">6201</a>
    configuration file: option for unparsed text URI Resolver</li>
<li><a href="https://saxonica.plan.io/issues/6202">6202</a>
    Invalid attribute names in configuration files are ignored</li>
<li><a href="https://saxonica.plan.io/issues/6207">6207</a>
    Filter expression not working properly</li>
<li><a href="https://saxonica.plan.io/issues/6210">6210</a>
    Format of numbers generated by fn:json-to-xml</li>
<li><a href="https://saxonica.plan.io/issues/6211">6211</a>
    Saxon return wrong error position in XPath expression</li>
<li><a href="https://saxonica.plan.io/issues/6212">6212</a>
    Serializer tries to guess doctype from content and fails at it.</li>
<li><a href="https://saxonica.plan.io/issues/6215">6215</a>
    SQL extension: returning the results of a join query</li>
<li><a href="https://saxonica.plan.io/issues/6217">6217</a>
    Sliding windows: finished windows not output if windows that started earlier are unfinished</li>
<li><a href="https://saxonica.plan.io/issues/6221">6221</a>
    Static error in XPath expression supplied to xsl:evaluate</li>
<li><a href="https://saxonica.plan.io/issues/6225">6225</a>
    Significant performance problem for case insensitive regex matching under high concurrency</li>
<li><a href="https://saxonica.plan.io/issues/6226">6226</a>
    Race condition initialising UnicodeBlocks class</li>
<li><a href="https://saxonica.plan.io/issues/6230">6230</a>
    fn:transform doesn't use the resource resolver from the XPathContext</li>
<li><a href="https://saxonica.plan.io/issues/6231">6231</a>
    Saxon does not recognise function annotations written using Q{uri}local syntax</li>
<li><a href="https://saxonica.plan.io/issues/6232">6232</a>
    Error message: "An empty sequence is not allowed as the result of a call to map"</li>
<li><a href="https://saxonica.plan.io/issues/6236">6236</a>
    Expected XPathException but got AssertionError 'No current component'</li>
<li><a href="https://saxonica.plan.io/issues/6237">6237</a>
    HTTP redirection expects an absolute URI in the location field</li>
<li><a href="https://saxonica.plan.io/issues/6238">6238</a>
    XPath error information is lost in XSLT</li>
<li><a href="https://saxonica.plan.io/issues/6239">6239</a>
    Function conversion rules: xs:anyURI to xs:string conversion</li>
<li><a href="https://saxonica.plan.io/issues/6249">6249</a>
    <code>xsl:evaluate/@context-item</code> expression is present, but evaluates to empty sequence</li>
<li><a href="https://saxonica.plan.io/issues/6253">6253</a>
    Atomized item type for an array (test CastableAs667)</li>
<li><a href="https://saxonica.plan.io/issues/6256">6256</a>
    function-name returns an empty sequence for node-name#0, string#0 and more?</li>
<li><a href="https://saxonica.plan.io/issues/6257">6257</a>
    Gizmo quits after certain errors</li>
<li><a href="https://saxonica.plan.io/issues/6258">6258</a>
    Repeated failures from unparsed-text() / unparsed-text-available()</li>
<li><a href="https://saxonica.plan.io/issues/6260">6260</a>
    Operator || and fn:concat are not exactly equivalent</li>
<li><a href="https://saxonica.plan.io/issues/6265">6265</a>
    NPE in net.sf.saxon.functions.Contains</li>
</ul>

<h3>Issues in SaxonC</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.4&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6241">6241</a>:
    Python 3.12 wheels</li>
<li><a href="https://saxonica.plan.io/issues/6195">6195</a>:
    Sources node objects not deleted in the C++ Schema validation samples</li>
<li><a href="https://saxonica.plan.io/issues/6174">6174</a>:
    ICU localization is currently not supported</li>
<li><a href="https://saxonica.plan.io/issues/6162">6162</a>:
    SaxonC does not accept multiple catalog files</li>
<li><a href="https://saxonica.plan.io/issues/6144">6144</a>:
    PyXPathProcessor object has no attribute <code>thisxqptr</code></li>
<li><a href="https://saxonica.plan.io/issues/6143">6143</a>:
    White space in file path causing an error</li>
<li><a href="https://saxonica.plan.io/issues/6118">6118</a>:
    parseJson API current not supported in SaxonC</li>
<li><a href="https://saxonica.plan.io/issues/6109">6109</a>:
    Give SaxonC XPath API a counterpart to SaxonJ setUnprefixedElementMatchingPolicy</li>
<li><a href="https://saxonica.plan.io/issues/6099">6099</a>:
    Import xslt package currently not available</li>
</ul>

<p>If you encounter any issues with Saxon 12.4, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing SaxonJS 2.6!</title><link href="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html</id><published>2023-10-13T15:45:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/10/saxonjs-2.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing SaxonJS 2.6!</h1>

<p>The SaxonJS 2.6 maintenance release has been published. This is a
maintenance release for NodeJS and the browser. It fixes more than a
dozen bugs (including <a href="/norm/2023/10/06-no-longer-supported.html">that one</a>
about the spurious warning message). Highlights include:</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5597">#5597</a>: ixsl:schedule-action fails without xsl:call-template</li>
<li><a href="https://saxonica.plan.io/issues/5714">#5714</a>: Update documentation to mention the backtick escaping mechanism</li>
<li><a href="https://saxonica.plan.io/issues/5739">#5739</a>: Space in string in text template not output as element content</li>
<li><a href="https://saxonica.plan.io/issues/5761">#5761</a>: fn:transform called from XPath with simplified stylesheet gives an error</li>
<li><a href="https://saxonica.plan.io/issues/5855">#5855</a>: map:merge with duplicates=combine gives wrong answer</li>
<li><a href="https://saxonica.plan.io/issues/5925">#5925</a>: Dynamic function lookup runs very slowly</li>
<li><a href="https://saxonica.plan.io/issues/5974">#5974</a>: SaxonJS documentation does not address namespaces</li>
<li><a href="https://saxonica.plan.io/issues/6037">#6037</a>: ixsl:schedule-action return objects</li>
<li><a href="https://saxonica.plan.io/issues/6107">#6107</a>: Can't use namespaced attributes on the root element of the body of a SaxonJS http-request</li>
<li><a href="https://saxonica.plan.io/issues/6134">#6134</a>: Partial function application call to function in ixsl namespace fails</li>
<li><a href="https://saxonica.plan.io/issues/6216">#6216</a>: base-uri() value empty for documents async-loaded with ixsl:schedule-action/@http-request</li>
<li><a href="https://saxonica.plan.io/issues/6219">#6219</a>: base-uri(ixsl:page()) returns empty value</li>
</ul>

<p>For a complete list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon-js/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=cf_10&amp;op%5Bcf_10%5D=%3D&amp;v%5Bcf_10%5D%5B%5D=94&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxonica support site.</p>

<p>SaxonJS 2.6 was released on 13 October 2023. This release has been
uploaded to the usual locations on the Saxonica website and the NPM
repository.
For more details, please consult
<a href="https://www.saxonica.com/saxon-js/documentation2/index.html">the documentation</a>.
</p>

<p>If you encounter any issues with SaxonJS 2.6, please
<a href="https://saxonica.plan.io/projects/saxon-js/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>SaxonJS 2.5 ** NO LONGER SUPPORTED **</title><link href="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html</id><published>2023-10-06T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/06-no-longer-supported.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p><a href="https://en.wikipedia.org/wiki/TL;DR">TL;DR</a>, you can
ignore the message.</p>

<p>Several folks have noticed that, since about yesterday, if you run
the SaxonJS 2.5 <code>xslt3</code> Node.js command line processor, it
prints a scary “no longer supported” message.</p>

<p>Sorry. Our bad. The message is only informative and has no effect
on the performance of the processor.</p>

<p>We support SaxonJS releases for at least a year and a while back
(far enough back that I can’t easily determine when from the
repository history), we confidently assumed that we’d always do a
release at least once a year. So when you got that message, it was to
encourage you to upgrade.</p>

<p>Except this year, we published a whole bunch of other releases,
embarked on SaxonJS 3.0, shifted our web infrastructure around, and
did a bunch of other things. What we didn’t do was publish SaxonJS 3.0
within a year, and because we were heads-down on that, we didn’t
notice that we hadn’t published a SaxonJS 2.6 release within a year
either.</p>

<p>(It’s all a little embarrassing.)</p>

<p>We’ve fixed a handful of bugs in SaxonJS 2.5 since we shipped it,
and we’ve identified a slightly larger handful that we’d like to
consider fixing before we ship a SaxonJS 2.6 release. But we will ship
it, as quickly as practical.</p>

</div></content></entry><entry><title>Looking forward</title><link href="https://blog.saxonica.com/norm/2023/10/02-saxonica.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/10/02-saxonica.html</id><published>2023-10-02T09:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/10/02-saxonica.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As <a href="/mike/2023/10/eot.html">Mike says</a>, today is a big
day. It is an honour to be able to announce that I am taking on a new
role as CEO of Saxonica.</p>

<p>Let me start by offering huge congratulations and thanks to Mike and
Penny Kay, whose talent, commitment, and hard work have made Saxonica
into the successful company it is today.</p>

<p>I’m happy (and somewhat relieved!) to say that the Saxonica team
will continue to benefit from Mike’s experience for the foreseeable
future, as he moves to a new role as Director of Innovation. Working
part-time, Mike will continue to support customers and colleagues
alike, as well as ensuring that his in-depth knowledge of our code
base continues to be passed on to the rest of the Saxonica engineering
team, myself included!</p>

<p>Before I had the opportunity to join the company in 2020, I was
already an enthusiastic part of Saxonica’s user base. I know how
important our products are to our users; I <em>am</em> one of our users!</p>

<p>Working with this team of talented people to develop software that
makes a real contribution to the XML community has been a privilege.
Becoming Saxonica’s CEO is an even greater one. I am committed to
seeing Saxonica grow and prosper into the next decades, continuing the
reputation for excellence, innovation, and community-mindedness that
Mike has worked so hard to establish.</p>

</div></content></entry><entry><title>XML Resolver 6.x SNAPSHOT</title><link href="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html</id><published>2023-09-14T14:55:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/09/14-xmlresolver.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Under the hood, Saxon uses a “resolver” whenever it
attempts to load a document (a source document, stylesheet module,
unparsed text document, etc.). For the past few releases, the Java,
C#, and C products have been using resolvers based on the
<a href="https://xmlresolver.org/">XML Resolver APIs</a>.</p>

<p>I’ve been working on some improvements to those APIs. It’s likely
that the next releases of Saxon will be ship with XML Resolver
6.x.</p>

<p>If you’d like to
<a href="https://xmlresolver.org/6x-snapshot/">preview the planned changes</a>
and provide feedback about how they work in your applications, that’d
be grand.</p>

</div></content></entry><entry><title>New infrastructure…</title><link href="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/31-infrastructure.html</id><published>2023-08-31T13:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/31-infrastructure.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>New infrastructure…</h1>

<p>Just FYI, we’ve moved some things around. Some of our web
infrastructure, the way
<a href="https://www.saxonica.com/">www.saxonica.com</a>
and
<a href="https://dev.saxonica.com/">dev.saxonica.com</a>
are served, for example, has changed.
Plus we have some new infrastructure for
<a href="https://downloads.saxonica.com/">downloads</a>
and 
<a href="https://maven.saxonica.com/">Maven</a>.
</p>

<p>You aren’t supposed to notice. Or, at least, it isn’t supposed to
be broken. There are redirects in place for things we know moved and
a few very old things have fallen by the wayside.</p>

<p>If you see something that you think is broken, please tell us!</p>

</div></content></entry><entry><title>Announcing Saxon 11.6!</title><link href="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html</id><published>2023-08-24T13:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/08/saxon-11.6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 11.6!</h1>

<p>The Saxon 11.6 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes
almost 40 issues reported since the 11.5 release.</p>

<p>Saxon 11.6 was released on 24 August 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub,
Maven, and NuGet. SaxonCS 11.6 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=93&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">issue tracker</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/11.6">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation11">the documentation</a>.
</p>

<p>If you encounter any issues with Saxon 11.6, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>ICU4J and SaxonJ EE</title><link href="https://blog.saxonica.com/norm/2023/08/24-icu4j.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/24-icu4j.html</id><published>2023-08-24T12:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/24-icu4j.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>ICU4J and SaxonJ EE</h1>

<p>We’ve recently discovered a small discrepancy in how we manage the
dependencies between <a href="https://unicode-org.github.io/icu/userguide/icu4j/">ICU4J</a>
and SaxonJ EE.</p>

<p>If you download the EE release from our website, you get a
distribution that includes SaxonJ EE, XML Resolver, ICU4J, and JLine
(used by Gizmo). The manifest in the SaxonJ EE jar file puts those
additional dependencies on your classpath automatically.</p>

<p>If you get the EE release from our Maven repository, ICU4J is an
<em>optional</em> dependency. So Maven won’t automatically put it on
your classpath. That’s the discrepancy.</p>

<p>Saxon EE will function without ICU4J, so it is technically
optional. I’m unsure which would be better: making it optional in both
places or non-optional in both places. Having it different certainly
seems like the worst choice and we should fix it.</p>

<p>In the short term, if you’re using Saxon EE and you want the
collations supported by ICU4J, make sure you’re also arranging for
ICU4J to be on your classpath.</p>

<p>We discovered this in the course of examining issue
<a href="https://saxonica.plan.io/issues/6183">#6183</a>. For slightly
complicated reasons involving our type hierarchy, if ICU4J is missing,
you can get an error message that suggests you’re running Saxon HE
even when you’re running EE. We’ll fix that too.
</p>

</div></content></entry><entry><title>XML doclet</title><link href="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html</id><published>2023-08-16T10:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/08/16-xmldoclet.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Historically, we’ve used a customized version of
<a href="https://jeldoclet.sourceforge.net/">JELDoclet</a> to generate
XML from Javadoc. We use the XML to construct parts of our website.
The Javadoc APIs used by JELDoclet (and all of the other
Javadoc-to-XML doclets that I could lay my hands on) have been deprecated as of
Java 9 and will eventually be removed from the JDK.</p>

<p>On a whim last weekend, I took a stab at simply rebuilding an XML
doclet on top of the new Javadoc APIs. You can find the results of that
effort in the <a href="https://github.com/Saxonica/xmldoclet">xmldoclet</a> repository.
</p>

<p>It’s only version 0.1.0, but I think it’s broadly functional. It
handles all of the sources I’ve thrown at it, including the Saxon Java
products which are fairly large and complex. If you try it out and
discover that it produces output that seems incomplete or incorrect, please
<a href="https://github.com/Saxonica/xmldoclet/issues">open an issue</a>.</p>

<p>I can’t say I’m especially fond of the Javadoc APIs. In particular,
although you need to know what imports a class has in order to
correctly resolve the names of types, the public APIs provide no
access to that information. In the end, I applied an old maxim:</p>

<blockquote>
  <p><em>If brute force doesn’t work, you’re not applying enough brute force.</em></p>
</blockquote>

<p>I simply included the Java parser that we use for the transpiler and 
parse the sources myself.</p>

<p>Comments most welcome…</p>

</div></content></entry><entry><title>Announcing Saxon 12.3!</title><link href="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html</id><published>2023-07-04T17:50:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/07/saxon-12.3.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.3!</h1>

<p>The Saxon 12.3 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.2 release.</p>

<p>Saxon 12.3 was released on
<span title="Happy Independence Day to all our readers in the United States!">4 July 2023</span>.
This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.3 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86-64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.3">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=92&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/6003">6003</a>:
    Inline function expression evaluated using xsl:evaluate</li>
<li><a href="https://saxonica.plan.io/issues/6018">6018</a>:
    UnicodeString - indexWhere does not start from the expected position</li>
<li><a href="https://saxonica.plan.io/issues/6022">6022</a>:
    Eager evaluation prematurely throws exception in analyze-string/non-matching-string.</li>
<li><a href="https://saxonica.plan.io/issues/6024">6024</a>:
    java.lang.NoClassDefFoundError: org/jdom2/Document</li>
<li><a href="https://saxonica.plan.io/issues/6033">6033</a>:
    Invalid warning about field in xs:key</li>
<li><a href="https://saxonica.plan.io/issues/6034">6034</a>:
    Problems with saxon:slice()</li>
<li><a href="https://saxonica.plan.io/issues/6036">6036</a>:
    Undeclaration of default namespace is not reported to a SAXResult</li>
<li><a href="https://saxonica.plan.io/issues/6040">6040</a>:
    Invalid warning displayed when map:contains() is used</li>
<li><a href="https://saxonica.plan.io/issues/6054">6054</a>:
    NamedNodeMap.getNamedItem throw UnsupportedOperationException</li>
<li><a href="https://saxonica.plan.io/issues/6059">6059</a>:
    Bug on "-" castable to xs:duration</li>
<li><a href="https://saxonica.plan.io/issues/6061">6061</a>:
    Crash in SaxonCS using ";n" in regex flags</li>
<li><a href="https://saxonica.plan.io/issues/6063">6063</a>:
    Incorrect attribute indentation</li>
<li><a href="https://saxonica.plan.io/issues/6067">6067</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6076">6076</a>:
    Fixed NPE in Saxon HE 12.2</li>
<li><a href="https://saxonica.plan.io/issues/6085">6085</a>:
    Fixed an incomplete path in error messages in a validation report</li>
<li><a href="https://saxonica.plan.io/issues/6086">6086</a>:
    Updated the validation-reports.xsd</li>
<li><a href="https://saxonica.plan.io/issues/6091">6091</a>:
    Fixed an NPE in ContextStackIterator.getMajorCaller</li>
<li><a href="https://saxonica.plan.io/issues/6092">6092</a>:
    Fixed a bug in defaultOpenContent/@appliesToEmpty in XML Schema support</li>
<li><a href="https://saxonica.plan.io/issues/6093">6093</a>:
    Fixed a bug in a predicate with last()</li>
<li><a href="https://saxonica.plan.io/issues/6095">6095</a>:
    Fixed an index out-of-bounds exception when using an accumulator-rule match with variables</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.3&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/6017">6017</a>:
    Interrupted by signal 11: SIGSEGV when PyDocumentBuilder.set_schema_validator is set to None</li>
<li><a href="https://saxonica.plan.io/issues/6023">6023</a>:
    Thread 1 "python3" received signal SIGSEGV, Segmentation fault</li>
<li><a href="https://saxonica.plan.io/issues/6025">6025</a>:
    Python Saxon not releasing memory</li>
<li><a href="https://saxonica.plan.io/issues/6053">6053</a>:
    PydmNode object gets deleted before reuse</li>
<li><a href="https://saxonica.plan.io/issues/6075">6075</a>:
    Unable to read unicodeBlocks.xml file</li>
<li><a href="https://saxonica.plan.io/issues/6077">6077</a>:
    Axis Iterator required on the XdmNode</li>
<li><a href="https://saxonica.plan.io/issues/6078">6078</a>:
    Undefined reference to <code>dlopen@GLIBC_2.34</code></li>
<li><a href="https://saxonica.plan.io/issues/6084">6084</a>:
    Exception: Initial template parameters can only be of type PyXdmValue</li>
<li><a href="https://saxonica.plan.io/issues/6098">6098</a>:
    SaxonApiException::getSystemId() throws NullPointerException</li>
</ul>

<p>If you encounter any issues with Saxon 12.3, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing Saxon 12.2!</title><link href="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html</id><published>2023-05-02T13:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/05/saxon-12.2.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.2!</h1>

<p>The Saxon 12.2 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the Saxon 12.1 release.</p>

<p>Saxon 12.2 was released on 2 May 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.2 is built with .NET 6. This
release includes SaxonC and Python releases for the ARM 64
architecture as well as X86 64 architecture.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.2">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=91&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5997">5997</a>:
    XSLT version for fn:transform</li>
<li><a href="https://saxonica.plan.io/issues/5996">5996</a>:
    Union types extension is available in Saxon-PE</li>
<li><a href="https://saxonica.plan.io/issues/5995">5995</a>:
    JavaDoc for XPathCompiler.setLanguageVersion should mention 4.0 is accepted</li>
<li><a href="https://saxonica.plan.io/issues/5978">5978</a>:
    StackOverflow during multithreaded schema processing</li>
<li><a href="https://saxonica.plan.io/issues/5970">5970</a>:
    DirectResourceResolver - unresolved XML classpath resources</li>
<li><a href="https://saxonica.plan.io/issues/5957">5957</a>:
    Disabling DTD validation</li>
<li><a href="https://saxonica.plan.io/issues/5953">5953</a>:
    JAXP ValidatorHandler throws an exception if the document is invalid</li>
<li><a href="https://saxonica.plan.io/issues/5952">5952</a>:
    unparsed-text-available throws an un-catchable IllegalCharsetNameException</li>
<li><a href="https://saxonica.plan.io/issues/5939">5939</a>:
    Using -u and a file: URI as the source argument for a query doesn't work</li>
<li><a href="https://saxonica.plan.io/issues/5937">5937</a>:
    Extension function gives NullPointerException in 12.1 when returning empty sequence</li>
<li><a href="https://saxonica.plan.io/issues/5931">5931</a>:
    Remove outdated xml-apis from the Maven artifacts</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.2&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5983">5983</a>:
    Saxon.C.API/SaxonApiException.cpp calculates wrong strlen</li>
<li><a href="https://saxonica.plan.io/issues/5954">5954</a>:
    The XPath 4.0 function parse-html not available</li>
<li><a href="https://saxonica.plan.io/issues/5944">5944</a>:
    set_cwd on PySchemaValidator seems to be ignored under some circumstances</li>
<li><a href="https://saxonica.plan.io/issues/5941">5941</a>:
    SaxonC EE 12.1 Validate command line tool seems broken; doesn't give any output</li>
<li><a href="https://saxonica.plan.io/issues/5938">5938</a>:
    Trying to compile XSLT from file after setting allowedProtocols raises an NPE</li>
<li><a href="https://saxonica.plan.io/issues/5936">5936</a>:
    Fix exception reporting for Python on Windows</li>
<li><a href="https://saxonica.plan.io/issues/5934">5934</a>:
    Python wheels don’t work in a virtual environment on Windows</li>
</ul>

<p>If you encounter any issues with Saxon 12.2, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Announcing Saxon 12.1!</title><link href="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html</id><published>2023-03-21T15:20:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/announcements/2023/03/saxon-12.1.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Announcing Saxon 12.1!</h1>

<p>The Saxon 12.1 maintenance release has been published. This is a
maintenance release for Java, C#, C/C++, PHP, and Python that fixes a
number of issues reported since the first Saxon 12.0 release,
in particular it now runs on Java 8.</p>

<p>Saxon 12.1 was released on 21 March 2023. This release has been
uploaded to the usual locations on the Saxonica website, GitHub, and
Maven, PyPi, and NuGet. SaxonCS 12.1 is built with .NET 6.</p>

<p>For a list of the issues resolved in this release, please visit the issue trackers
for
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonJ and SaxonCS</a> or
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">SaxonC</a>
on the Saxon support site.
</p>

<p>Download products:</p>

<ul>
<li>Binaries for PE and EE are available from our
<a href="http://www.saxonica.com/download/download_page.xml">download pages</a>.
</li>
<li>SaxonJ-HE is available on the
<a href="https://central.sonatype.com/artifact/net.sf.saxon/Saxon-HE/12.1">Maven Central
repository</a>.
</li>
<li>SaxonJ-HE, PE, and EE can also be found on our
<a href="https://dev.saxonica.com/maven/">experimental Maven repository</a>.
</li>
<li>Python wheels for SaxonC (HE, PE, and EE) are available from
<a href="https://pypi.org/user/saxonica/">PyPI</a>.
</li>
<li>SaxonCS is available on
<a href="https://www.nuget.org/packages/SaxonCS">NuGet</a></li>
<li>Saxon-HE is no longer distributed on SourceForge. It is now available from
our open source
<a href="https://github.com/Saxonica/Saxon-HE/">GitHub repository</a>.
The GitHub repository also provides source code for those who need it.
</li>
</ul>

<p>For more details, please consult
<a href="https://www.saxonica.com/documentation12">the documentation</a>.
</p>

<h2>Partial list of issues resolved</h2>

<p>This section is a subset of the complete list of resolved issues.
It’s curated to bring attention to the bugs that seem most likely to
impact customers. 
</p>

<h3>Issues in SaxonJ and SaxonCS</h3>

<p>For a full list, see
<a href="https://saxonica.plan.io/projects/saxon/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_6&amp;op%5Bcf_6%5D=%3D&amp;v%5Bcf_6%5D%5B%5D=90&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.</p>

<ul>
<li><a href="https://saxonica.plan.io/issues/5624">5624</a>:
    SaxonCS validate problem</li>
<li><a href="https://saxonica.plan.io/issues/5801">5801</a>:
    Dependency on axiom pom causes maven-dependency-plugin error</li>
<li><a href="https://saxonica.plan.io/issues/5805">5805</a>:
    Set locator to XmlProcessingIncident</li>
<li><a href="https://saxonica.plan.io/issues/5809">5809</a>:
    NPE on failure to load user-supplied collation class</li>
<li><a href="https://saxonica.plan.io/issues/5823">5823</a>:
    The implemented fn:slice function signature differs from the Saxonica docs and the specification</li>
<li><a href="https://saxonica.plan.io/issues/5824">5824</a>:
    SaxonJ 12.0 does not run with Java 8</li>
<li><a href="https://saxonica.plan.io/issues/5839">5839</a>:
    SaxonCS query problem</li>
<li><a href="https://saxonica.plan.io/issues/5852">5852</a>:
    XML Transformer generates invalid XHTML</li>
<li><a href="https://saxonica.plan.io/issues/5880">5880</a>:
    XQuery error with -p:on command line option</li>
<li><a href="https://saxonica.plan.io/issues/5884">5884</a>:
    SaxonCS 12 doesn't find elements in HTML DOM based on [@class = 'foo'] predicate</li>
<li><a href="https://saxonica.plan.io/issues/5906">5906</a>:
    C# context item absent</li>
<li><a href="https://saxonica.plan.io/issues/5908">5908</a>:
    saxon:for-each-member was dropped in Saxon 11</li>
<li><a href="https://saxonica.plan.io/issues/5910">5910</a>:
    Double reporting of template execution in timing profile</li>
<li><a href="https://saxonica.plan.io/issues/5911">5911</a>:
    SaxonCS crashes when package version number is wrong</li>
<li><a href="https://saxonica.plan.io/issues/5913">5913</a>:
    Tail recursion overwrites value of variable</li>
<li><a href="https://saxonica.plan.io/issues/5920">5920</a>:
    Java reflexive API fails to run, throws ClassNotFoundException</li>
</ul>

<h3>Issues in SaxonC</h3>

For a full list, see
<a href="https://saxonica.plan.io/projects/saxon-c/issues?utf8=%E2%9C%93&amp;set_filter=1&amp;sort=id%3Adesc&amp;f%5B%5D=status_id&amp;op%5Bstatus_id%5D=c&amp;f%5B%5D=cf_3&amp;op%5Bcf_3%5D=%7E&amp;v%5Bcf_3%5D%5B%5D=12.1&amp;f%5B%5D=&amp;c%5B%5D=tracker&amp;c%5B%5D=status&amp;c%5B%5D=priority&amp;c%5B%5D=subject&amp;c%5B%5D=assigned_to&amp;c%5B%5D=updated_on&amp;group_by=&amp;t%5B%5D=">the issue tracker</a>.

<ul>
<li><a href="https://saxonica.plan.io/issues/5849">5849</a>:
    transform_to_file() in PyXslt30Processor not working.</li>
<li><a href="https://saxonica.plan.io/issues/5850">5850</a>:
    Error when compiling XSLT that uses "i" flag in regular expressions.</li>
<li><a href="https://saxonica.plan.io/issues/5856">5856</a>:
    Compilation/build issue PHP 8</li>
<li><a href="https://saxonica.plan.io/issues/5868">5868</a>:
    C samples don't build with Ubuntu</li>
<li><a href="https://saxonica.plan.io/issues/5869">5869</a>:
    For Windows SaxonC HE 12.0 there is no bat file to build the C samples</li>
</ul>

<p>If you encounter any issues with Saxon 12.1, please
<a href="https://saxonica.plan.io/projects/saxon/issues">report them</a>
on our issue tracker.</p>

</div></content></entry><entry><title>Brand new weblog, just like the old weblog</title><link href="https://blog.saxonica.com/norm/2023/03/16-weblog.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2023/03/16-weblog.html</id><published>2023-03-16T10:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2023/03/16-weblog.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>As part of some infrastructure cleanup, we decided to change how
the weblog is managed. It’s now hosted on
<a href="https://blog.saxonica.com/">blog.saxonica.com</a>.</p>

<p>All of the old posts have been copied over and redirects are in
place. Along the way, I cleaned up a few broken links.</p>

<p>If anything seems broken, please do let me know!</p>

</div></content></entry><entry><title>SaxonC HE “11.99” pre-release</title><link href="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/23-saxon-c.html</id><published>2022-12-23T17:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/23-saxon-c.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Happy holidays everyone! Wishing you peace and joy in this festive season!</p>

<p>And toys.</p>

<p>Since we didn't get any releases out before Christmas, we've
packaged up a special treat for anyone who wants to play with
something new: SaxonC HE 12.0 in Python.</p>

<p>We've built and deployed the Python "wheels" for installing SaxonC
HE “11.99” (that's the 12.0 code base, but it's a test release so I
didn't want to use up one of the 12.x release numbers). You’ll find the
details at <a href="https://saxonica.com/saxon-c/1199/">https://saxonica.com/saxon-c/1199/</a>.
</p>

<p>If you decide to
<a href="https://en.wiktionary.org/wiki/kick_the_tires">kick the tyres</a><sup>†</sup>,
please do let us know how it goes. There’s still work to do with
installing and packaging, but we think the API is in good shape. (I
did notice that if you call <code>compile_stylesheet()</code> and the stylesheet
isn’t well formed, the call silently returns <code>None</code> instead of raising
an error. I’ve
<a href="https://saxonica.plan.io/issues/5781">reported that one</a>!)</p>

<p>I’ll probably check my email most days, but I can’t speak for
anyone else. Apologies if some of your feedback isn’t properly
addressed before the new year.</p>

<p>Once again, wishing you the happiest of holiday seasons!</p>

<div class="fn">
<hr/>
<sup>†</sup>That’s “tires” for my American friends.
</div>
</div></content></entry><entry><title>Signed, sealed, and delivered</title><link href="https://blog.saxonica.com/norm/2022/12/21-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/12/21-net6.html</id><published>2022-12-21T13:19:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/12/21-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">
<h1>Signed, sealed, and delivered</h1>

<p>I have been trying to build SaxonCS for .NET such that I could deliver it
on MacOS without warning messages for
<a href="https://github.com/dotnet/sdk/issues/24337">a long time</a>.
It has not been an easy or enjoyable adventure. Here are some
breadcrumbs for the next poor soul forced to tread down this path.</p>

<p>You can’t do this with .NET 5. That’s probably less important today
than it was when I started. I don’t understand the details, but something has
been fixed in .NET 6 that isn’t going to be backported to .NET 5. (There’s
a comment to that effect in an issue, but I can’t now locate that issue.)</p>

<p>There are several problems that have to be solved. The application
has to be built such that it will run when signed. All of the various pieces
have to be (correctly) signed. A DMG must be constructed to distribute
the application (maybe I don’t <em>have</em> to do this step, but it’s
reasonably what users expect). The <em>DMG</em> has to be signed.
<em>And</em> the whole thing has to be notarized by Apple so that
it will open without warnings.</p>

<div>
<h2>The objective</h2>
<p>A complete, hands off, CI-driven build of a C# application to produce
a MacOS DMG file that a user can open and use without any warnings about
unsigned code or potentially malicious applications.</p>
</div>

<div>
<h2>Prerequisites</h2>

<p>Before you begin, there are some things you have to have setup.</p>

<ul>
<li><p>You need <a href="https://dotnet.microsoft.com/en-us/">dotnet</a> 6
(or later, I assume, but we’re planning to ship Saxon 12 with .NET 6
so that’s what I’m using).</p></li>
<li><p>You need the
<a href="https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools">nuget</a>
command line tool. This is distinct from the <em>nuget</em> subcommand
of the <em>dotnet</em> tool. As far as I can tell, only the former
can actually install packages.</p>
<p>On a Mac, you need the Mono framework and some
other fiddling to make it work. Because that’s the way it is. The details
are outlined on the tools page linked above.</p>
</li>
<li><p>You’ll need
<a href="https://developer.apple.com/xcode/">XCode</a>. I’m using version 14.2.
I think you need to install the XCode command line tools and you need to run
XCode at least once, it does a bunch of initialization the first time it runs.
</p></li>
<li><p>You need an Apple developer account and you have to go through
the dance necessary to create a developer ID certificate. The certificate
and (at least some of) the certificate chain need to be downloaded and
installed in your keychain. I don’t remember the exact details, but I seem
to recall that it was spelled out <em>reasonably</em> well in the Apple developer
documentation.</p>
</li>
<li><p>I decided to use
<a href="https://www.araelium.com/dmgcanvas">DMG Canvas</a> to build the
DMG. In addition to building the DMG, this application does the sign
and notarize dance with Apple for me. $20 well spent, I think. I
assume these steps can be done manually, but I’m not inspired to try
to figure out how just at the moment.</p>
</li>
</ul>

<p>Use the <em>nuget</em> command to install <code>Dotnet.Bundle</code>:</p>

<pre><code>$ nuget install Dotnet.Bundle</code></pre>

<p>This package constructs the “bundle” of files that MacOS expects
for an application. (That’s the <code><em>application</em>.app</code> directory
and its descendants.)</p>
</div>

<div>
<h2>Application files</h2>

<p>Start with your application. In our case, this complex beast:</p>

<pre><code>using System;

namespace HelloWorld
{
    public class HelloWorld
    {
        public static void Main(string[] arg)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}</code></pre>

<p>You will also need a <code>.csproj</code> file. Here’s one that works
for me:</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;PlatformTarget&gt;AnyCPU&lt;/PlatformTarget&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
    &lt;PublishSingleFile&gt;true&lt;/PublishSingleFile&gt;
    &lt;SelfContained&gt;true&lt;/SelfContained&gt;
    &lt;PublishReadyToRun&gt;true&lt;/PublishReadyToRun&gt;
    &lt;RuntimeIdentifier&gt;osx-x64&lt;/RuntimeIdentifier&gt;
    &lt;UseHardenedRuntime&gt;true&lt;/UseHardenedRuntime&gt;
    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;IncludeNativeLibrariesForSelfExtract&gt;true&lt;/IncludeNativeLibrariesForSelfExtract&gt;
    &lt;IncludeSymbolsInSingleFile&gt;false&lt;/IncludeSymbolsInSingleFile&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup&gt;
    &lt;CFBundleName&gt;HelloWorld&lt;/CFBundleName&gt;
    &lt;CFBundleDisplayName&gt;HelloWorld&lt;/CFBundleDisplayName&gt;
    &lt;CFBundleIdentifier&gt;com.saxonica.helloworld&lt;/CFBundleIdentifier&gt;
    &lt;CFBundleVersion&gt;1.0.0&lt;/CFBundleVersion&gt;
    &lt;CFBundleShortVersionString&gt;1.0.0&lt;/CFBundleShortVersionString&gt;
    &lt;CFBundleExecutable&gt;HelloWorld&lt;/CFBundleExecutable&gt;
    &lt;CFBundleIconFile&gt;HelloWorld.icns&lt;/CFBundleIconFile&gt;
    &lt;NSPrincipalClass&gt;NSApplication&lt;/NSPrincipalClass&gt;
    &lt;NSHighResolutionCapable&gt;true&lt;/NSHighResolutionCapable&gt;
    &lt;NSRequiresAquaSystemAppearance&gt;false&lt;/NSRequiresAquaSystemAppearance&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="DotNet.Bundle" Version="0.9.13" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;</code></pre>

<p>The first property group specifies properties of the build, the second
defines how the application will be bundled, and the last item group is
necessary to make the bundler part of the build.</p>

<p>Notes:</p>

<ol>
<li>You must specify <code>net6</code> for the framework and create
a single file, self-contained application.</li>
<li>You must use the hardened runtime.</li>
<li>You must include native libraries for self extraction.</li>
<li>You must <em>not</em> include symbols in the single file, that’s an option that
apparently stopped working in .NET 5.</li>
<li>I created <code>HelloWorld.icns</code> from a PNG with ImageMagick.</li>
</ol>
</div>

<div>
<h2>Building the application</h2>

<p>Add <code>Dotnet.Bundle</code> to the project:</p>

<pre><code>$ dotnet add package Dotnet.Bundle</code></pre>

<p>(You only have to do this once.)</p>

<p>Build the application:</p>

<pre><code>$ dotnet msbuild -t:BundleApp -p:RuntimeIdentifier=osx-x64 -p:Configuration=Release</code></pre>

<p>You can run the bundled application to make sure it works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>
</div>

<div>
<h2>Sign the application</h2>

<p>Next we have to sign the application. But before we can do that, we have
to make an entitlements plist file. I called mine <code>entitlements.plist</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-library-validation&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.cs.disable-executable-page-protection&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;</code></pre>

<p>Now we can sign it:</p>

<pre><code>$ codesign --force --options runtime --entitlements ./entitlements.plist --deep \
  --sign "Developer ID Application: YOUR DEVELOPER ID GOES HERE" \
  --timestamp bin/Release/net6.0/osx-x64/publish/HelloWorld.app</code></pre>

<p>You must use the entitlements option and the timestamp option. (You probably
need all the other options too, but those were the ones that I initially 
overlooked.)</p>

<p>You can run it again to make sure it still works:</p>

<pre><code>$ bin/Release/net6.0/osx-x64/publish/HelloWorld.app/Contents/MacOS/HelloWorld
Hello, World!</code></pre>

<p>(It didn’t for me for the longest time!)</p>
</div>

<div>
<h2>Construct the DMG</h2>

<p>Fire up the <em>DMG Canvas</em> application. (Yes, I know, I said I wanted this to
be a hands-off process. I believe <em>DMG Canvas</em> can be automated, but I haven’t
tried to figure out exactly how yet.)</p>

<p>The first time you open it up, go to the Preferences dialog and add your Apple ID
and a one-time password on the Notarization tab:</p>

<figure>
<img src="img/app-password.png" alt="Screen capture of the DMG Canvas notarization preferences tab."/>
</figure>

<p>This will enable signing and notarizing the DMG later.</p>

<p>On the main screen, add the application to the canvas. On the right hand
side, choose the second tab and select “Code Sign and Notarize” in the drop down.
You’ll have to specify the certificate you want to use, your Apple ID, and the primary
bundle ID. (I have no idea what that means in this context, but you have to put
something in there.)</p>

<figure>
<img src="img/app-main.png" alt="Screen capture of the DMG Canvas main screen with the notarization dialog shown on the right."/>
</figure>

<p>Click the “Build” button in the upper right corner, fill in the details,</p>

<figure>
<img src="img/app-build.png" alt="Screen capture of the DMG Canvas build dialog."/>
</figure>

<p>Hit Save and wait (nervously, and for quite a while) for the results!</p>

<figure>
<img src="img/app-wait.png" alt="Screen capture of the DMG Canvas modal dialog while it's building and notarizing the DMG file."/>
</figure>

<p>With luck, it all goes smoothly and you get back a signed, notarized DMG file.</p>

<p>There’s obviously more to be done in the DMG: it needs a background image, the
standard symlink to <code>/Applications</code> should be present, etc. But
I got a <a href="HelloWorld.dmg">working DMG</a> file out of it so, I’m
declaring victory for the moment.</p>

</div>
</div></content></entry><entry><title>SaxonCS for .NET 6</title><link href="https://blog.saxonica.com/norm/2022/08/09-net6.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/08/09-net6.html</id><published>2022-08-09T17:06:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/08/09-net6.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>We first published SaxonCS 11.x using .NET 5. Since then, .NET 5
has reached “end of life” and .NET 6 has become the recommended “long
term service” release of the .NET framework.</p>

<p>This puts us in a bit of a bind.</p>

<p>On the one hand, we try not to make disruptive changes in a
maintenance release if we can avoid it. Consequently, we’re
reluctant to suddenly require all of our customers who might be
building applications with SaxonCS 11.x to upgrade to .NET 6 just
because they want to install a new maintenance release.</p>

<p>On the other hand, it is becoming difficult to support .NET 5
applications in some environments. Ubuntu 22.04, for example, doesn’t
ship with the SSL libraries that .NET 5 requires. This makes it
difficult, perhaps impossible, to deploy SaxonCS 11.x built with .NET 5 in some
environments.</p>

<p>As a compromise, we’ve published a set of SaxonCS 11.4 releases
built against .NET 6. In order to distinguish them from their .NET 5
counterparts, we’ve named them “SaxonCS-b6”. The “b6” is both a nod
towards their .NET 6 provenance and a way of identifying them as
“beta”. There are no code changes in these builds, they should perform
exactly as the SaxonCS 11.4 release does, but they have not been
tested extensively.</p>

<p>They are identified as “SaxonCS-b6 11.4.1”. You can get the
platform-specific release artifacts from our downloads area and the
NuGet package has been uploaded and should be available soon.</p>

<p>(Speaking of NuGet, I should also confess that I published the
wrong SaxonCS 11.4.0 artifact. The SaxonCS 11.4.0 release on NuGet
will only work on 64 bit platforms. I republished the corrected,
architecture independent release as SaxonCS 11.4.1 yesterday.)</p>

<p>We’ll have to cross this bridge again if we publish another Saxon
11.x maintenance release. Please let us know what works for you, and what doesn’t.</p>

</div></content></entry><entry><title>Triaging the bug lists…</title><link href="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/06/15-saxonjs.html</id><published>2022-06-15T16:15:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/06/15-saxonjs.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>The very observant among you may have noticed me making a bunch of changes to
the
<a href="https://saxonica.plan.io/projects/saxon-js/issues">SaxonJS
issues list</a> this afternoon. We’ve started planning for SaxonJS 3.0 and we’ve made
a couple of early passes over the issues list.</p>

<p>Today, I tried to make the actual issues list reflect some of those
tentative plans. I’ve added “SaxonJS 3.0” as a milestone to a bunch of
issues and I’ve moved some of the priorities around.</p>

<p>Don’t read <em>too</em> much into that at the moment. For one
thing, there’s almost certainly too much on the list, for another
I expect we’ll do at least one more maintenance release of 2.x before we get to 3.0.
</p>

<p>But we have to start somewhere. Feedback welcome.</p>
</div></content></entry><entry><title>SaxonJS with web components</title><link href="https://blog.saxonica.com/norm/2022/04/19-shoelace.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2022/04/19-shoelace.html</id><published>2022-04-19T18:43:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2022/04/19-shoelace.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>I haven’t worked with
<a href="https://en.wikipedia.org/wiki/Web_Components">web components</a> very much,
though they’ve been on my “must explore more” list for a while. A couple of days ago,
I stumbled across <a href="https://shoelace.style/">Shoelace</a>, “a forward-thinking
library of web components.”</p>

<p>“That’d just work in SaxonJS, right?”, I asked myself.</p>

<p>Yep. I updated the
<a href="https://github.com/Saxonica/helloWorldJS">helloWorldJS</a> repository
that I created a while back to demonstrate it.</p>

<p>The new work is in the <code>shoelace</code> branch.</p>

<p>There’s not much different, really.</p>

<ol>
<li>The HTML file includes the
Shoelace scripts and styling from its CDN. (A more robust application
would want local copies, but this is just a toy.)</li>
<li>Instead of using a <code>button</code> element, we use the Shoelace
web-component: <code>&lt;sl-button&gt;Click me&lt;/sl-button&gt;</code>.
</li>
<li>The match pattern for the onclick handler changes to
<code>match="sl-button"</code>.</li>
</ol>

<p>That’s pretty much all there is to it. Neat. I must try out some more web
components when I have a chance. In principle, the seem like a really good idea.</p>

</div></content></entry><entry><title>Saxon-JS 2.2</title><link href="https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html</id><published>2021-05-11T12:00:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2021/05/11-saxon-js-22.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Saxon-JS 2.2
has been published on
<a href="https://saxonica.com/saxon-js/">Saxonica.com</a> and to the
<a href="https://www.npmjs.com/package/saxon-js">npm registry</a>!</p>

<p>This is a maintenance release that fixes a few bugs. The big one, to my mind, is resolving
the “global object” bug in Node.js. Previous releases of Saxon-JS always
created a global object named “<code>SaxonJS</code>”. This isn’t best practice on
Node.js and interfered with some platforms like
<a href="https://en.wikipedia.org/wiki/Electron_(software_framework)">Electron</a>
and <a href="https://en.wikipedia.org/wiki/Webpack">Webpack</a>.</p>

<p>Starting with 2.2, on Node.js, the global object no longer gets created.
If you’ve consistently used</p>

<pre><code>const SaxonJS = require('saxon-js');</code></pre>

<p>to load Saxon-JS, you’ll be fine. If you’ve used some other name
for the object, make sure that you refer to Saxon-JS exclusively by
that name. For example:</p>

<pre><code>const <b>sjs</b> = require('saxon-js');
const six = <b>sjs</b>.XPath.evaluate("3+3");
console.log(`six = ${six}`)</code></pre>

<p>We fixed a few other bugs as detailed in the
<a href="https://www.saxonica.com/saxon-js/documentation/index.html#!changes">change history</a>.
Thanks to everyone who took the time to report them!
</p>

</div></content></entry><entry><title>Saxon-JS 2.0.3</title><link href="https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html</id><published>2021-01-08T15:41:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2021/01/08-saxon-js-203.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>Happy New Year!</p>

<p>As of a few minutes ago (at time of publication!), Saxon-JS 2.0.3
has been published to the
<a href="https://www.npmjs.com/package/saxon-js">npm registry</a>.
This release contains no changes in functionality (this is not the
release you’ve been waiting for, we’re still working on that one).</p>

<p>The previous version has a published dependency on
<a href="https://www.npmjs.com/package/axios">axios</a> version 
0.19.2 which is, apparently, the subject of a security vulnerability
(or so <code>npm install</code> asserted this morning).</p>

<p>This tiny release simply updates the dependency to a patched
version of axios.</p>

<p>Axios is an HTTP library that is only used by the NodeJS version of
Saxon-JS. When Saxon-JS is running in the browser, it uses the
browser’s APIs, so this update should have no consequences for the
browser version at all.</p>

</div></content></entry><entry><title>helloWorld.Saxon-JS for Node.js</title><link href="https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html</id><published>2020-11-15T17:53:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2020/11/15-helloWorldNode.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>You may already have seen my
<a href="../10/27-helloWorld.html">helloWorld.Saxon-JS</a> posting. That
was about getting Saxon-JS working in your browser. This post is about
getting Saxon-JS working in Node.js.</p>

<p>I’m still tinkering with some personal projects and I’ve decided
that for one of them, I’m going to experiment with using Node.js. The
app is going to do its thing and then eventually I’m going to want to
build a web page to show the results.</p>

<p>I’m sure there are ways to do this in Node.js, but this is pretty
much the first ever thing I’ve built in node, so I don’t know what
they are. What I do know is that I’ve got a wodge of JSON and I want
to turn it into a web page.</p>

<p>XSLT to the rescue. And XSLT on the server side this time.</p>

<p>As before, I was able to follow <a href="https://www.saxonica.com/saxon-js/documentation/">the
documentation</a> and get it up and running. But once again, it
involved a lot more head scratching (and re-reading the <a href="https://www.saxonica.com/saxon-js/documentation/index.html#!api/transform">SaxonJS.transform
API page</a>) than I would care to admit. This time, I think the main
difficulty was my inexperience with node more than anything else. </p>

<p>What I would have liked <em>this time</em> was a simple Node.js
project that pulled all the pieces together so that I could build it
and see it working, and then begin to hack on it.</p>

<p>So I built one:
<a href="https://github.com/Saxonica/helloWorldNodeJS">https://github.com/Saxonica/helloWorldNodeJS</a>.
</p>

<p>There’s really nothing to show, it’s about getting it to run locally, but I
think the TL;DR is pretty straightforward.</p>

</div></content></entry><entry><title>More Maven experiments</title><link href="https://blog.saxonica.com/norm/2020/10/29-maven.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2020/10/29-maven.html</id><published>2020-10-29T12:12:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2020/10/29-maven.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>I haven’t actually looked at the server logs to see if anyone else
tried using our experimental Maven repository after
<a href="02-maven.html">I posted</a> about it earlier this month. But
I have, and it’s worked for me!
</p>

<p>I think we’d have to agree that it’s still experimental. After I
put up a raw set of files in a directory structure, a couple of folks
said I should be running a server to do this. I might do that, but I
haven’t had time to try it out yet.</p>

<p>Behind the scenes, I’m also working on build automation.
Ultimately, I want these artifacts to be published automatically.</p>

<p>In the meantime, I’ve added the 9.9.1-8 and 10.3 releases of HE (also
<a href="https://search.maven.org/artifact/net.sf.saxon/Saxon-HE">available</a>
on Maven Central), PE, and EE to our Maven repository.</p>

<p>The experimental Maven repository is at
<a href="https://dev.saxonica.com/maven/">https://dev.saxonica.com/maven/</a>.</p>

<p>If you can try it out and let me know if you have trouble (or if you don’t!),
I’d appreciate it.</p>

</div></content></entry><entry><title>helloWorld.Saxon-JS</title><link href="https://blog.saxonica.com/norm/2020/10/27-helloWorld.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2020/10/27-helloWorld.html</id><published>2020-10-27T12:30:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2020/10/27-helloWorld.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>What happened was, last Friday I decided to make my first foray
into using <a href="https://www.saxonica.com/saxon-js/">Saxon-JS</a>.
I have in mind a personal project that would use it for rendering and
I wanted to get my feet wet.</p>

<p>I was able to follow <a href="https://www.saxonica.com/saxon-js/documentation/">the
documentation</a> and pretty quickly I had it up and running. But
along the way, I stumbled a couple of times. I didn’t read the documentation
carefully enough in one case and in another, I introduced a typo into a URI.</p>

<p>What I would have liked was a simple project that pulled all the
pieces together, one where I could build it and see it working, and
then begin to hack on it.</p>

<p>Since I didn’t find one of those, I built one:
<a href="https://github.com/Saxonica/helloWorldJS">https://github.com/Saxonica/helloWorldJS</a>.
</p>

<p>On the plus side, this project demonstrates both replacing and
appending to web page content with an XSLT transformation, responding
to user events, and calling external JavaScript libraries.</p>

<p>On possibly the less plus side, I’ve used Gradle to pull all the
pieces together. You might argue that obfuscates things a little bit,
if you aren’t familiar with Gradle, but I wanted to put things in the
context of an actual project build and that’s what I use for builds
these days. PRs for branches that demonstrate Make or Ant or your
build tool of choice are welcome. That’s not meant to be the
interesting part.</p>

<p>There are three branches.</p>

<dl>
<dt><code>main</code></dt>
<dd>This branch is the simplest. The HTML page fires off a Saxon JS stylesheet
that transforms an XML document and updates the page with the result.
</dd>
<dt><code>use-script</code></dt>
<dd>This branch does basically the same thing, but instead of loading the XML
document by making another request to the server, the document is embedded in the
initial HTML document in a <code>script</code> element. It was an experiment I wanted
to try. It avoids a round trip to the server to get the XML document at the cost
of having to extract and parse the document from the HTML.
</dd>
<dt><code>render-commonmark</code></dt>
<dd>The personal project I’m thinking of converting to use Saxon-JS
stores some content in <a href="https://commonmark.org/">CommonMark</a>.
I thought it would be interesting to see if I could call an external JavaScript library
to convert that into HTML and then transform it. Yes, I can.
The JavaScript in <code>src/main/js/start.js</code> is a bit cleaner in this
branch, too.
</dd>
</dl>

<p>All three branches include a button that responds (by running an XSLT template
in the stylesheet) when you click it.</p>

<p>I’ve <a href="https://saxonica.github.io/helloWorldJS/">published</a>
the simplest version online, if you just want to see it in all it’s dull glory.</p>

</div></content></entry><entry><title>Atom feeds</title><link href="https://blog.saxonica.com/norm/2020/10/06-atom.html" rel="alternate" type="text/html"/><id>https://blog.saxonica.com/norm/2020/10/06-atom.html</id><published>2020-10-06T17:24:00Z</published><content type="xhtml" xml:base="https://blog.saxonica.com/norm/2020/10/06-atom.html"><div xmlns="http://www.w3.org/1999/xhtml">


<p>A few days ago, when <a href="01-hello.html">I said</a> that I’d
updated the weblog infrastructure, a couple of folks immediately asked
“where are the feeds?”</p>

<p>Good question. I wondered that myself.</p>

<p>I hadn’t got around to it at first, but I spent a little time today
putting them back where (I think) they were:</p>

<ul>
<li><a href="/mike/atom.xml">Atom feed for Mike’s weblog</a></li>
<li><a href="/oneil/atom.xml">Atom feed for O’Neil’s weblog</a></li>
<li><a href="/norm/atom.xml">Atom feed for this weblog</a></li>
<li><a href="/atom.xml">Aggregate feed for all the weblogs</a></li>
</ul>

<p>If you have trouble, please let me know. “It works for me.”</p>

<p>(The irony that this update won’t turn up in your feed reader is not lost on me.)</p>

</div></content></entry></feed>